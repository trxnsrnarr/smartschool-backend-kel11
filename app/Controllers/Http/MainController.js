"use strict";

const Drive = use("Drive");
const Province = use("App/Models/Province");
const Regency = use("App/Models/Regency");
const District = use("App/Models/District");
const Village = use("App/Models/Village");
const Sekolah = use("App/Models/Sekolah");
const MSekolah = use("App/Models/MSekolah");
const MSekolahIndustri = use("App/Models/MSekolahIndustri");
const MSarpras = use("App/Models/MSarpras");
const MKegiatanGaleri = use("App/Models/MKegiatanGaleri");
const MProyek = use("App/Models/MProyek");
const MPerpusKomen = use("App/Models/MPerpusKomen");
const MRpp = use("App/Models/MRpp");
const MSikapSiswa = use("App/Models/MSikapSiswa");
const MSikapRombel = use("App/Models/MSikapRombel");
const MRekap = use("App/Models/MRekap");
const MPredikatNilai = use("App/Models/MPredikatNilai");
const MKeteranganRapor = use("App/Models/MKeteranganRapor");
const MCamera = use("App/Models/MCamera");
const MAbsenBelumTerdaftar = use("App/Models/MAbsenBelumTerdaftar");
const MKeteranganPkl = use("App/Models/MKeteranganPkl");
const MRaporEkskul = use("App/Models/MRaporEkskul");
const MRekapRombel = use("App/Models/MRekapRombel");
const TkRekapNilai = use("App/Models/TkRekapNilai");
const MGelombangPpdb = use("App/Models/MGelombangPpdb");
const MPendaftarPpdb = use("App/Models/MPendaftarPpdb");
const MAnggotaProyek = use("App/Models/MAnggotaProyek");
const MAnggotaProyekRole = use("App/Models/MAnggotaProyekRole");
const MKategoriPekerjaan = use("App/Models/MKategoriPekerjaan");
const MPekerjaanProyek = use("App/Models/MPekerjaanProyek");
const MDitugaskanPekerjaan = use("App/Models/MDitugaskanPekerjaan");
const MProyekForum = use("App/Models/MProyekForum");
const MProyekForumKomen = use("App/Models/MProyekForumKomen");
const MAlurPPDB = use("App/Models/MAlurPpdb");
const TkPerpusAktivitas = use("App/Models/TkPerpusAktivitas");
const MJurusan = use("App/Models/MJurusan");
const MRekSekolah = use("App/Models/MRekSekolah");
const MIndustri = use("App/Models/MIndustri");
const MPembayaran = use("App/Models/MPembayaran");
const MPembayaranSiswa = use("App/Models/MPembayaranSiswa");
const MMutasi = use("App/Models/MMutasi");
const MAlumni = use("App/Models/MAlumni");
const MProfilUser = use("App/Models/MProfilUser");
const MRiwayatPembayaranSiswa = use("App/Models/MRiwayatPembayaranSiswa");
const MPembayaranKategori = use("App/Models/MPembayaranKategori");
const Mta = use("App/Models/Mta");
const MSlider = use("App/Models/MSlider");
const MTugas = use("App/Models/MTugas");
const MKegiatan = use("App/Models/MKegiatan");
const MInformasiSekolah = use("App/Models/MInformasiSekolah");
const MInformasiJurusan = use("App/Models/MInformasiJurusan");
const MGuruJurusan = use("App/Models/MGuruJurusan");
const MRombel = use("App/Models/MRombel");
const TkPembayaranRombel = use("App/Models/TkPembayaranRombel");
const MJamMengajar = use("App/Models/MJamMengajar");
const MJadwalMengajar = use("App/Models/MJadwalMengajar");
const MMataPelajaran = use("App/Models/MMataPelajaran");
const TkPost = use("App/Models/TkPost");
const MPost = use("App/Models/MPost");
const MKategori = use("App/Models/MKategori");
const MTopik = use("App/Models/MTopik");
const MAnggotaRombel = use("App/Models/MAnggotaRombel");
const TkMateriRombel = use("App/Models/TkMateriRombel");
const MBab = use("App/Models/MBab");
const MPrestasi = use("App/Models/MPrestasi");
const MAbsen = use("App/Models/MAbsen");
const MSoalUjian = use("App/Models/MSoalUjian");
const TkSoalUjian = use("App/Models/TkSoalUjian");
const MJadwalUjian = use("App/Models/MJadwalUjian");
const TkJadwalUjian = use("App/Models/TkJadwalUjian");
const TkPesertaUjian = use("App/Models/TkPesertaUjian");
const MUjian = use("App/Models/MUjian");
const MUjianSiswa = use("App/Models/MUjianSiswa");
const MMateri = use("App/Models/MMateri");
const MSikapSosial = use("App/Models/MSikapSosial");
const MSikapSpiritual = use("App/Models/MSikapSpiritual");
const MSoalKuis = use("App/Models/MSoalKuis");
const MTimeline = use("App/Models/MTimeline");
const TkTimeline = use("App/Models/TkTimeline");
const TkTimelineKomen = use("App/Models/TkTimelineKomen");
const TkTimelineTopik = use("App/Models/TkTimelineTopik");
const TkMateriKesimpulan = use("App/Models/TkMateriKesimpulan");
const MTimelineKomen = use("App/Models/MTimelineKomen");
const MPerusahaan = use("App/Models/MPerusahaan");
const TkPerusahaanSekolah = use("App/Models/TkPerusahaanSekolah");
const MPekerjaan = use("App/Models/MPekerjaan");
const MInformasiPekerjaan = use("App/Models/MInformasiPekerjaan");
const MPekerjaanPengumuman = use("App/Models/MPekerjaanPengumuman");
const MAcaraPerusahaan = use("App/Models/MAcaraPerusahaan");
const TkStatusPekerjaan = use("App/Models/TkStatusPekerjaan");
const MKotakMasuk = use("App/Models/MKotakMasuk");
const MKotakMasukKomen = use("App/Models/MKotakMasukKomen");
const MSurel = use("App/Models/MSurel");
const MSurelKomen = use("App/Models/MSurelKomen");
const MFolderArsip = use("App/Models/MFolderArsip");
const TkTipeSurel = use("App/Models/TkTipeSurel");
const MBarang = use("App/Models/MBarang");
const MLokasi = use("App/Models/MLokasi");
const MKategoriPelanggaran = use("App/Models/MKategoriPelanggaran");
const MPelanggaran = use("App/Models/MPelanggaran");
const MPenghargaan = use("App/Models/MPenghargaan");
const MSanksiPelanggaran = use("App/Models/MSanksiPelanggaran");
const MSanksiSiswa = use("App/Models/MSanksiSiswa");
const TkSiswaPelanggaran = use("App/Models/TkSiswaPelanggaran");
const MBabPeraturan = use("App/Models/MBabPeraturan");
const MPasalPeraturan = use("App/Models/MPasalPeraturan");
const MBukuTamu = use("App/Models/MBukuTamu");
const MKategoriMapel = use("App/Models/MKategoriMapel");
const TkMapelRapor = use("App/Models/TkMapelRapor");
const MSurat = use("App/Models/MSurat");
const MDisposisi = use("App/Models/MDisposisi");
const MPelaporanDisposisi = use("App/Models/MPelaporanDisposisi");
const MTemplateDeskripsi = use("App/Models/MTemplateDeskripsi");
const MPertemuanBk = use("App/Models/MPertemuanBk");
const MJadwalKonsultasi = use("App/Models/MJadwalKonsultasi");
const MLabelKalender = use("App/Models/MLabelKalender");
const MKegiatanKalender = use("App/Models/MKegiatanKalender");
const MKalenderPendidikan = use("App/Models/MKalenderPendidikan");
const MBuktiPelaksanaanSanksi = use("App/Models/MBuktiPelaksanaanSanksi");
const MBobotNilai = use("App/Models/MBobotNilai");
const MRegistrasiAkun = use("App/Models/MRegistrasiAkun");

const MBuku = use("App/Models/MBuku");
const MPerpus = use("App/Models/MPerpus");
const MPraktikKerja = use("App/Models/MPraktikKerja");
const MEkstrakurikuler = use("App/Models/MEkstrakurikuler");
const TkPerpusMapel = use("App/Models/TkPerpusMapel");
const TkSoalTugas = use("App/Models/TkSoalTugas");
const MPerpusTag = use("App/Models/MPerpusTag");
const TkPerpusTag = use("App/Models/TkPerpusTag");
const MKontak = use("App/Models/MKontak");
const TkJawabanUjianSiswa = use("App/Models/TkJawabanUjianSiswa");
const User = use("App/Models/User");
const DownloadService = use("App/Services/DownloadService");
const DownloadService2 = use("App/Services/DownloadService2");
const DownloadKartuPg = use("App/Services/DownloadKartuPg");
const DownloadKartuEsai = use("App/Services/DownloadKartuEsai");
const Downloadkisikisi = use("App/Services/Downloadkisikisi");
const DownloadNaskah = use("App/Services/DownloadNaskah");
const DownloadRumusan = use("App/Services/DownloadRumusan");
const DownloadTemplate = use("App/Services/DownloadTemplate");
const WhatsAppService = use("App/Services/WhatsAppService");

const moment = require("moment");
require("moment/locale/id");
moment.locale("id");
const PDFExtract = require("pdf.js-extract").PDFExtract;

const Hash = use("Hash");
const Helpers = use("Helpers");
const axios = require("axios");
const Mail = use("Mail");
const { validate } = use("Validator");
const slugify = require("slugify");
const Excel = require("exceljs");
const WordExtractor = require("word-extractor");
const AdonisGCS = require("adonis-google-cloud-storage");
const uuid = require("uuid-v4");
const pdftohtml = require("pdftohtmljs");
const http = require("http"); // or 'https' for https:// URLs
const Downloader = require("nodejs-file-downloader");
const cron = require("node-cron");
var randomstring = require("randomstring");

const PDFDocument = require("pdfkit");
const fs = require("fs");
const fetch = require("node-fetch");
const pdf = require("pdf-parse");
const htmlEscaper = require("html-escaper");

// firestore
const Firestore = use("App/Models/Firestore");
const firestore = new Firestore();
const db = firestore.db();
const bucket = firestore.bucket();
var striptags = require("striptags");
// reference to
const jadwalUjianReference = db.collection("jadwal-ujian");

const Env = use("Env");
const Database = use("Database");

const accountSid = "AC124e53d8cfb40a9f80ae98c59eba0980";
const authToken = "04e5831e528fa131ad81400739e1022f";
const client = require("twilio")(accountSid, authToken);
const joinNotification = `http://wa.me/+14155238886?text=join additional-growth`;

const messagePostSuccess = "Data berhasil ditambahkan";
const messageSaveSuccess = "Data berhasil disimpan";
const messagePutSuccess = "Data berhasil diubah";
const messageDeleteSuccess = "Data berhasil dihapus";
const messageNotFound = "Data tidak ditemukan";
const messageForbidden = "Dilarang, anda bukan seorang admin";
const messageEmailSuccess = "Data berhasil dikirim ke email";
const pesanSudahDitambahkan = "Data sudah ditambahkan";

// RULES
const rulesUserPost = {
  nama: "required",
  password: "required",
  whatsapp: "required",
  gender: "required",
};

const rulesUserPut = {
  nama: "required",
  password: "required",
  whatsapp: "required",
  gender: "required",
};

const rulesAnggotaPost = {
  proyek_id: "required",
  user_id: "required",
  status: "required",
};

const messagesUser = {
  "password.required": "Password harus diisi",
  "nama.required": "Nama harus diisi",
  "whatsapp.required": "Whatsapp harus diisi",
  "gender.required": "Jenis Kelamin harus diisi",
};

const hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"];
const romawi = [
  "I",
  "II",
  "III",
  "IV",
  "V",
  "VI",
  "VII",
  "VIII",
  "IX",
  "X",
  "XI",
  "XII",
  "XIII",
];

const monthNames = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];
const dateObj = new Date();
const month = monthNames[dateObj.getMonth()];
const day = String(dateObj.getDate()).padStart(2, "0");

// const hour = dateObj.getHours();
// const minute = dateObj.getMinutes();
// const second = dateObj.getSeconds();
// // const keluarantanggal = day + "," + month + "," + year;
// const keluarantanggalseconds1 = moment().format("YYYY-MM-DD-HH-mm-ss");
// const keluarantanggalseconds =
//   keluarantanggalseconds1 + "-" + dateObj.getTime();

function colName(n) {
  var ordA = "a".charCodeAt(0);
  var ordZ = "z".charCodeAt(0);
  var len = ordZ - ordA + 1;

  var s = "";
  while (n >= 0) {
    s = String.fromCharCode((n % len) + ordA) + s;
    n = Math.floor(n / len) - 1;
  }
  return s.toUpperCase();
}

class MainController {
  // UTILS

  async removeTag(content) {
    // const removeEl = content.replace(/(<([^>]+)>)/ig, "");

    var html = content;

    return striptags(html);
  }

  async singleUpload({ request, response }) {
    const fileUpload = request.file("file");

    const fname = `${new Date().getTime()}.${fileUpload.extname}`;

    await fileUpload.move(Helpers.publicPath("uploads/"), {
      name: fname,
      overwrite: true,
    });

    if (!fileUpload.moved()) {
      return fileUpload.error();
    }

    return fname;
  }

  async richEditorUpload({ request, response }) {
    const fileUpload = request.file("file");

    const fname = `${new Date().getTime()}.${fileUpload.extname}`;

    await fileUpload.move(Helpers.publicPath("uploads/"), {
      name: fname,
      overwrite: true,
    });

    if (!fileUpload.moved()) {
      return fileUpload.error();
    }

    return { link: `http://${request.headers().host}/uploads/${fname}` };
  }

  async multipleUpload({ request, response }) {
    // const fileUpload = request.file("file");
    // const fname = `${new Date().getTime()}.${fileUpload.extname}`;
    // await fileUpload.move(Helpers.publicPath("uploads/"), {
    //   name: fname,
    //   overwrite: true,
    // });
    // if (!fileUpload.moved()) {
    //   return fileUpload.error();
    // }
    // const profilePics = request.file('profile_pics')
    // await profilePics.moveAll(Helpers.tmpPath('uploads'))
    // if (!profilePics.movedAll()) {
    //   return profilePics.errors()
    // }
    // return "http://demoapi.getsmartschool.id/uploads/" + fname;
  }

  async getSekolahByDomain(domain) {
    const sekolah = await MSekolah.query()
      .with("informasi")
      .where("domain", "like", `%${domain}%`)
      .first();

    if (!sekolah) {
      return "404";
    }

    return sekolah;
  }

  async meSekolah({ request, response }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const kontak = await MKontak.query()
      .where({
        m_sekolah_id: sekolah.id,
      })
      .first();

    const checkPredikat = await MPredikatNilai.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .first();

    const bobot = await MBobotNilai.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    if (!bobot) {
      await MBobotNilai.create({
        tugas_pts: "30",
        uh_pts: "30",
        uts_pts: "40",
        praktik_pts: "25",
        produk_pts: "25",
        proyek_pts: "25",
        portofolio_pts: "25",
        tugas_pas: "25",
        uh_pas: "25",
        uts_pas: "25",
        uas_pas: "25",
        praktik_pas: "25",
        produk_pas: "25",
        proyek_pas: "25",
        portofolio_pas: "25",
        m_sekolah_id: sekolah.id,
      });
    }

    if (!checkPredikat) {
      await MPredikatNilai.create({
        predikat: "A",
        bb_pengetahuan: "86",
        ba_pengetahuan: "100",
        bb_keterampilan: "86",
        ba_keterampilan: "100",
        sikap: "Sangat Baik",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
      await MPredikatNilai.create({
        predikat: "B",
        bb_pengetahuan: "71",
        ba_pengetahuan: "85",
        bb_keterampilan: "71",
        ba_keterampilan: "85",
        sikap: "Baik",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
      await MPredikatNilai.create({
        predikat: "C",
        bb_pengetahuan: "56",
        ba_pengetahuan: "70",
        bb_keterampilan: "56",
        ba_keterampilan: "70",
        sikap: "Cukup",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
      await MPredikatNilai.create({
        predikat: "D",
        bb_pengetahuan: "0",
        ba_pengetahuan: "55",
        bb_keterampilan: "0",
        ba_keterampilan: "55",
        sikap: "Kurang",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
    }

    return response.ok({
      whatsappBot: " 0831 8736 0324",
      sekolah: sekolah,
      integrasi: sekolah.integrasi,
      kontak,
    });
  }

  async getTAAktif(sekolah) {
    const ta = await Mta.query()
      .select("id", "tahun")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ aktif: 1 })
      .andWhere({ dihapus: 0 })
      .first();

    if (!ta) {
      return "404";
    }

    return ta;
  }

  async getLokasiSaatIni({ response }) {
    const geolocation = await axios.post(
      `https://www.googleapis.com/geolocation/v1/geolocate?key=${Env.get(
        "GCP_API_KEYS"
      )}`
    );

    const lat = geolocation.data.location.lat;
    const lng = geolocation.data.location.lng;

    const reverse = await axios.get(
      `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat}, ${lng}&key=${Env.get(
        "GCP_API_KEYS"
      )}`
    );

    return response.ok(reverse.data);
  }

  // REST API

  async getProvince({ response }) {
    const res = await Province.query().fetch();

    return response.ok(res);
  }

  async getRegency({ response, request }) {
    const { province_id } = request.get();

    const res = await Regency.query().where({ province_id }).fetch();

    return response.ok(res);
  }

  async getDistrict({ response, request }) {
    const { regency_id } = request.get();

    const res = await District.query().where({ regency_id }).fetch();

    return response.ok(res);
  }

  async getVillage({ response, request }) {
    const { district_id } = request.get();

    const res = await Village.query().where({ district_id }).fetch();

    return response.ok(res);
  }

  async getMasterSekolah({ response, request }) {
    let {
      page,
      search = "",
      bentuk,
      propinsi,
      kabupaten,
      kecamatan,
    } = request.get();

    page = page ? page : 1;

    const res = Sekolah.query().with("sekolahSS");

    let number;
    if (search.match(/\d/g)) {
      number = parseInt(search.match(/\d/g).join(""));
      search = search.replace(/\d/g, "");
    }
    if (
      !search.toLowerCase().includes(bentuk.toLowerCase()) &&
      (search.toLowerCase().includes("negeri") ||
        search.toLowerCase().includes("negri") ||
        search.toLowerCase().includes("swasta"))
    ) {
      search = `${bentuk} ${search}`;
    }
    if (
      search.toLowerCase().includes("negeri") ||
      search.toLowerCase().includes("negri")
    ) {
      search = search.toLowerCase().includes("negri")
        ? `${search.split(" ")[0]}N${search.slice(
            search.toLowerCase().search("negri") + 5
          )}`
        : `${search.split(" ")[0]}N${search.slice(
            search.toLowerCase().search("negeri") + 6
          )}`;
    }
    if (search.toLowerCase().includes("swasta")) {
      search = `${search.split(" ")[0]}S${search.slice(
        search.toLowerCase().search("swasta") + 6
      )}`;
    }
    if (search) {
      res.where("sekolah", "like", `%${search}%`);
    }

    if (number) {
      if (`${number}`.length > 3) {
        res.orWhere("npsn", "like", `%${number}%`);
      } else {
        res.whereRaw("ExtractNumber(TRIM(sekolah)) >= ?", [number]);
      }
    }

    if (bentuk) {
      res.andWhere("bentuk", bentuk);
    }

    if (propinsi) {
      res.andWhere("kode_prop", propinsi);
    }

    if (kabupaten) {
      res.andWhere("kode_kab_kota", kabupaten);
    }

    if (kecamatan) {
      res.andWhere("kode_kec", kecamatan);
    }

    res.orderByRaw("ExtractNumber(TRIM(sekolah))");
    res.orderBy("status");

    return response.ok({
      sekolah: await res.paginate(page),
    });
  }

  async tambahSekolah({ response, request }) {
    const {
      kode_prop,
      propinsi,
      kode_kab_kota,
      kabupaten_kota,
      kode_kec,
      kecamatan,
      npsn,
      sekolah,
      bentuk,
      status,
      alamat_jalan,
      telp,
      email,
      kode_pos,
    } = request.post();

    const rules = {
      kode_prop: "required",
      propinsi: "required",
      kode_kab_kota: "required",
      kabupaten_kota: "required",
      kode_kec: "required",
      kecamatan: "required",
      npsn: "required",
      sekolah: "required",
      bentuk: "required",
      status: "required",
      alamat_jalan: "required",
      telp: "required",
      email: "required",
      kode_pos: "required",
    };
    const message = {
      "kode_prop.required": "kode_prop harus di isi",
      "propinsi.required": "propinsi harus di isi",
      "kode_kab_kota.required": "kode_kab_kota harus di isi",
      "kabupaten_kota.required": "kabupaten_kota harus di isi",
      "kode_kec.required": "kode_kec harus di isi",
      "kecamatan.required": "kecamatan harus di isi",
      "npsn.required": "npsn harus di isi",
      "sekolah.required": "sekolah harus di isi",
      "bentuk.required": "jenjang harus di isi",
      "status.required": "status harus di isi",
      "alamat_jalan.required": "alamat_jalan harus di isi",
      "telp.required": "telp harus di isi",
      "email.required": "email harus di isi",
      "kode_pos.required": "kode_pos harus di isi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    let check;
    check = await Sekolah.query().where({ npsn: npsn }).first();
    if (check) {
      return response.unprocessableEntity([
        { message: "Sekolah sudah terdaftar" },
      ]);
    }
    const sekolahBaru = await Sekolah.create({
      kode_prop,
      propinsi,
      kode_kab_kota,
      kabupaten_kota,
      kode_kec,
      kecamatan,
      npsn,
      sekolah,
      bentuk,
      status,
      alamat_jalan,
    });

    const domain = slugify(sekolahBaru.sekolah, {
      replacement: "", // replace spaces with replacement character, defaults to `-`
      remove: /[*+~.()'"!:@]/g,
      lower: true, // convert to lower case, defaults to `false`
    });
    check = await MSekolah.query()
      .where({ domain: `https://${domain}.smarteschool.id` })
      .first();
    let sekolahSS;
    if (check) {
      sekolahSS = check;
    } else {
      sekolahSS = await MSekolah.create({
        nama: sekolahBaru.sekolah,
        domain: `https://${domain}.smarteschool.id`,
        status: sekolahBaru.status,
        tingkat: sekolahBaru.bentuk,
        npsn: sekolahBaru.npsn,
        telp: telp,
        email: email,
        kode_pos: kode_pos,
        integrasi: "whatsapp",
        diintegrasi: 1,
        trial: 1,
      });
    }
    await Sekolah.query().where({ id: sekolahBaru.id }).update({
      m_sekolah_id: sekolahSS.id,
    });

    return response.ok({
      message: messagePostSuccess,
      sekolahId: sekolahBaru.id,
      sekolahSS: sekolahSS.id,
    });
  }

  async getMasterSekolahNpsn({ response, request }) {
    const { npsn } = request.get();

    let { data } = await axios({
      url: `https://dapo.kemdikbud.go.id/api/getHasilPencarian?keyword=${npsn}`,
    });

    const check = await Promise.all(
      data.map((d) => {
        return Sekolah.query().where({ npsn: d.npsn }).select("id").first();
      })
    );
    data = data.map((d, idx) => {
      return { exist: check[idx] ? true : false, ...d };
    });
    return data;
  }

  async getMasterSekolahProvinsi({ response, request }) {
    const res = Sekolah.query();

    res.distinct("kode_prop", "propinsi");

    return response.ok({
      propinsi: await res.fetch(),
    });
  }

  async getMasterSekolahProvinsiDetail({
    response,
    request,
    params: { propinsi_id },
  }) {
    const res = Sekolah.query();

    res
      .where("kode_prop", propinsi_id)
      .distinct("kode_kab_kota", "kabupaten_kota");

    return response.ok({
      kabupaten: await res.fetch(),
    });
  }

  async getMasterSekolahKabupatenDetail({
    response,
    request,
    params: { kabupaten_id },
  }) {
    const res = Sekolah.query();

    res.where("kode_kab_kota", kabupaten_id).distinct("kode_kec", "kecamatan");

    return response.ok({
      kabupaten: await res.fetch(),
    });
  }

  async detailSekolahMaster({ response, request, params: { id } }) {
    let res = Sekolah.query();

    res = await res
      .where({ id: id })
      .with("sekolahSS")
      .with("registrasi")
      .first();
    if (res.m_sekolah_id) {
      const ta = await Mta.query()
        .where({ m_sekolah_id: res.m_sekolah_id })
        .andWhere({ aktif: 1 })
        .andWhere({ dihapus: 0 })
        .first();

      res = { ...res.toJSON(), ta };
    }

    let { data } = await axios({
      url: `https://dapo.kemdikbud.go.id/api/getHasilPencarian?keyword=${res.npsn}`,
    });

    return response.ok({
      data: res,
      dapo: data[0],
    });
  }

  async postRegistrasiSekolah({ response, request }) {
    const { id, nama, whatsapp, jabatan, password } = request.post();
    const lampiran = request.file("lampiran");

    const rules = {
      id: "required",
      nama: "required",
      whatsapp: "required",
      jabatan: "required",
      password: "required",
    };
    const message = {
      "id.required": "Id sekolah harus ada",
      "nama.required": "Nama Pengirim harus di isi",
      "whatsapp.required": "Whatsapp harus diisi",
      "jabatan.required": "Jabatan harus diisi",
      "password.required": "Password harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    // if(lampiran != null){
    //   const fname = `surat-pernyataan-${new Date().getTime()}-${id}.${
    //     lampiran.extname
    //   }`;
    //   await lampiran.move(Helpers.publicPath("surat/"), {
    //     name: fname,
    //     overwrite: true,
    //   });
    // }

    const registrasi = await MRegistrasiAkun.create({
      nama,
      whatsapp,
      jabatan,
      // lampiran: lampiran.extname != null ? `/surat/${fname}` : "",
      password,
      sekolah_id: id,
    });

    let sekolahSS;
    const sekolah = await Sekolah.query().where({ id: id }).first();
    const domain = slugify(sekolah.sekolah, {
      replacement: "", // replace spaces with replacement character, defaults to `-`
      remove: /[*+~.()'"!:@]/g,
      lower: true, // convert to lower case, defaults to `false`
    });

    const check = await MSekolah.query()
      .where({ domain: `https://${domain}.smarteschool.id` })
      .first();
    if (check) {
      sekolahSS = check;
    } else {
      sekolahSS = await MSekolah.create({
        nama: sekolah.sekolah,
        domain: `https://${domain}.smarteschool.id`,
        status: sekolah.status,
        tingkat: sekolah.bentuk,
        integrasi: "whatsapp",
        diintegrasi: 1,
        trial: 1,
      });
    }

    const checkAkun = await User.query()
      .where({ whatsapp: whatsapp })
      .where({ m_sekolah_id: sekolahSS.id })
      .where({ dihapus: 0 })
      .first();
    if (checkAkun) {
      await User.query()
        .where({ whatsapp: whatsapp })
        .where({ m_sekolah_id: sekolahSS.id })
        .update({
          password: await Hash.make(password),
        });
    } else {
      await User.create({
        nama: nama,
        whatsapp: whatsapp,
        gender: "L",
        password: password,
        role: "admin",
        m_sekolah_id: sekolahSS.id,
        dihapus: 0,
      });
    }

    if (!sekolah.m_sekolah_id) {
      await Sekolah.query()
        .where({ id: id })
        .update({ m_sekolah_id: sekolahSS.id });
    }

    return response.ok({
      message: messagePostSuccess,
      sekolah: sekolahSS,
    });
  }

  async loginWhatsapp({ response, request }) {
    const { whatsapp, role } = request.post();
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const res = await User.query()
      .select("nama", "whatsapp", "role")
      .where({ whatsapp: `${whatsapp}` })
      .andWhere({ m_sekolah_id: sekolah.id })
      .first();

    if (!res) {
      return response.notFound({ message: "Akun tidak ditemukan" });
    }

    if (role == "warga-sekolah" || res.role == "admin") {
      return response.ok(res);
    }

    if (res.role != role) {
      return response.forbidden({
        message: "Oops.. sepertinya anda salah pilih akun",
      });
    }

    return response.ok(res);
  }

  async getProfil({ auth, response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const user = await auth.getUser();

    const mataPelajaran = await MMataPelajaran.query()
      .where({ m_user_id: user.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const userData = await User.query()
      .where({ id: user.id })
      .with("sekolah")
      .first();

    let rombel;

    if (ta != "404") {
      rombel = await MRombel.query()
        .where({ m_ta_id: ta.id })
        .andWhere({ m_user_id: user.id })
        .first();
    }

    return response.ok({
      user: userData,
      mataPelajaran: mataPelajaran,
      rombel,
      ta,
    });
  }

  async putProfil({ auth, response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let {
      nama,
      whatsapp,
      email,
      avatar,
      gender,
      tanggal_lahir,
      // siswa
      nama_ayah,
      wa_ayah,
      nama_ibu,
      wa_ibu,
      // guru
      nip,
      nrk,
      nuptk,
      pangkat,
      golongan,
    } = request.post();
    whatsapp = whatsapp.trim();

    // if (user.whatsapp != whatsapp) {
    //   const check = await User.query().where({ whatsapp: whatsapp }).first();

    //   if (check) {
    //     return response.forbidden({
    //       message: "Akun sudah terdaftar",
    //     });
    //   }
    // }
    // if (user.email != email) {
    //   const check = await User.query().where({ email: email }).first();

    //   if (check) {
    //     return response.forbidden({
    //       message: "email sudah terdaftar",
    //     });
    //   }
    // }

    const update = await User.query().where({ id: user.id }).update({
      nama,
      whatsapp,
      email,
      avatar,
      gender,
      // guru
      nip,
      nrk,
      nuptk,
      pangkat,
      golongan,
      // siswa
      tanggal_lahir,
      nama_ayah,
      wa_ayah,
      nama_ibu,
      wa_ibu,
    });

    if (!update) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getProfilUser({ auth, response, request }) {
    const user = await auth.getUser();

    const profil = await User.query()
      .with("profil")
      .where({ id: user.id })
      .first();

    return response.ok({
      profil: profil,
    });
  }

  async postProfilUser({ auth, response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    const user = await auth.getUser();

    let {
      bio,
      pendidikan,
      pengalaman,
      prestasi,
      portofolio,
      bahasa,
      keahlian,

      // identitas
      nama,
      nama_panggilan,
      whatsapp,
      gender,
      agama,
      tempat_lahir,
      tanggal_lahir,
      avatar,
      home,

      // informasi
      nisn,
      nis,
      nrk,
      nip,
      nuptk,
      asal_sekolah,
      status_keluarga,
      anak_ke,
      kelas_diterima,
      tanggal_masuk,
      telp_rumah,

      // alamat
      alamat,
      province_id,
      regency_id,
      district_id,
      village_id,
      kodepos,

      // kesehatan
      tb,
      bb,
      gol_darah,
      buta_warna,
      kacamata,
      disabilitas,
      surat_keterangan_sehat,
      surat_keterangan_buta_warna,

      // ortu
      nama_ayah,
      telp_ayah,
      alamat_ayah,
      pekerjaan_ayah,
      nama_ibu,
      telp_ibu,
      alamat_ibu,
      pekerjaan_ibu,
      nama_wali,
      telp_wali,
      alamat_wali,
      pekerjaan_wali,

      // rapor
      fisika1,
      fisika2,
      fisika3,
      fisika4,
      fisika5,
      fisika6,
      matematika1,
      matematika2,
      matematika3,
      matematika4,
      matematika5,
      matematika6,
      bindo1,
      bindo2,
      bindo3,
      bindo4,
      bindo5,
      bindo6,
      bing1,
      bing2,
      bing3,
      bing4,
      bing5,
      bing6,

      // lampiran rapor
      semester1,
      semester2,
      semester3,
      semester4,
      semester5,
      semester6,
    } = request.post();

    let userPayload = {
      // identitas
      nama,
      nama_panggilan,
      whatsapp,
      gender,
      agama,
      tempat_lahir,
      tanggal_lahir,
      avatar,
      home,
    };

    if (pendidikan) {
      pendidikan = JSON.stringify(pendidikan);
    }
    if (pengalaman) {
      pengalaman = JSON.stringify(pengalaman);
    }
    if (prestasi) {
      prestasi = JSON.stringify(prestasi);
    }
    if (portofolio) {
      portofolio = JSON.stringify(portofolio);
    }
    if (bahasa) {
      bahasa = JSON.stringify(bahasa);
    }
    if (keahlian) {
      keahlian = keahlian.toString();
    }
    tanggal_lahir == "Invalid date" ? delete userPayload.tanggal_lahir : null;

    await User.query().where({ id: user.id }).update(userPayload);

    const check = await MProfilUser.query()
      .select("id")
      .where({
        m_user_id: user.id,
      })
      .first();

    let profil;

    if (check) {
      profil = await MProfilUser.query().where({ id: check.id }).update({
        bio,
        pendidikan,
        pengalaman,
        prestasi,
        portofolio,
        bahasa,
        keahlian,

        // informasi
        nisn,
        nis,
        nrk,
        nip,
        nuptk,
        asal_sekolah,
        status_keluarga,
        anak_ke,
        kelas_diterima,
        tanggal_masuk,
        telp_rumah,

        // alamat
        alamat,
        province_id,
        regency_id,
        district_id,
        village_id,
        kodepos,

        // kesehatan
        tb,
        bb,
        gol_darah,
        buta_warna,
        kacamata,
        disabilitas,
        surat_keterangan_sehat,
        surat_keterangan_buta_warna,

        // ortu
        nama_ayah,
        telp_ayah,
        alamat_ayah,
        pekerjaan_ayah,
        nama_ibu,
        telp_ibu,
        alamat_ibu,
        pekerjaan_ibu,
        nama_wali,
        telp_wali,
        alamat_wali,
        pekerjaan_wali,
        m_user_id: user.id,

        // rapor
        fisika1,
        fisika2,
        fisika3,
        fisika4,
        fisika5,
        fisika6,
        matematika1,
        matematika2,
        matematika3,
        matematika4,
        matematika5,
        matematika6,
        bindo1,
        bindo2,
        bindo3,
        bindo4,
        bindo5,
        bindo6,
        bing1,
        bing2,
        bing3,
        bing4,
        bing5,
        bing6,

        // lampiran rapor
        semester1,
        semester2,
        semester3,
        semester4,
        semester5,
        semester6,
      });
    } else {
      profil = await MProfilUser.create({
        bio,
        pendidikan,
        pengalaman,
        prestasi,
        portofolio,
        bahasa,
        keahlian,

        // informasi
        nisn,
        nis,
        nrk,
        nip,
        nuptk,
        asal_sekolah,
        status_keluarga,
        anak_ke,
        kelas_diterima,
        tanggal_masuk,
        telp_rumah,

        // alamat
        alamat,
        province_id,
        regency_id,
        district_id,
        village_id,
        kodepos,

        // kesehatan
        tb,
        bb,
        gol_darah,
        buta_warna,
        kacamata,
        disabilitas,
        surat_keterangan_sehat,
        surat_keterangan_buta_warna,

        // ortu
        nama_ayah,
        telp_ayah,
        alamat_ayah,
        pekerjaan_ayah,
        nama_ibu,
        telp_ibu,
        alamat_ibu,
        pekerjaan_ibu,
        nama_wali,
        telp_wali,
        alamat_wali,
        pekerjaan_wali,
        m_user_id: user.id,

        // rapor
        fisika1,
        fisika2,
        fisika3,
        fisika4,
        fisika5,
        fisika6,
        matematika1,
        matematika2,
        matematika3,
        matematika4,
        matematika5,
        matematika6,
        bindo1,
        bindo2,
        bindo3,
        bindo4,
        bindo5,
        bindo6,
        bing1,
        bing2,
        bing3,
        bing4,
        bing5,
        bing6,

        // lampiran rapor
        semester1,
        semester2,
        semester3,
        semester4,
        semester5,
        semester6,
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putUbahPassword({ auth, response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    const user = await auth.getUser();

    const { password_lama, password_baru } = request.post();

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    if (!(await Hash.verify(password_lama, user.password))) {
      return response.notFound({ message: "Password yang anda masukan salah" });
    }

    const update = await User.query()
      .where({ id: user.id })
      .update({
        password: await Hash.make(password_baru),
      });

    if (!update) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async loginAdminWhatsapp({ response, request }) {
    const { whatsapp } = request.post();

    const res = await User.query()
      .select("nama", "whatsapp")
      .where({ whatsapp })
      .first();

    if (!res) {
      return response.notFound({ message: "Akun tidak ditemukan" });
    }

    return response.ok(res);
  }

  async loginAdmin({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { password, whatsapp } = request.post();

    const res = await User.query()
      .where({ whatsapp })
      .andWhere({ m_sekolah_id: sekolah.id })
      .first();

    if (!res) {
      return response.notFound({ message: "Akun tidak ditemukan" });
    }

    if (!(await Hash.verify(password, res.password))) {
      return response.notFound({ message: "Password yang anda masukan salah" });
    }

    const { token } = await auth.generate(res);

    return response.ok({
      message: `Selamat datang ${res.nama}`,
      token,
    });
  }

  async login({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { password, whatsapp } = request.post();

    const res = await User.query()
      .where({ whatsapp })
      .andWhere({ m_sekolah_id: sekolah.id })
      .first();

    if (!res) {
      return response.notFound({ message: "Akun tidak ditemukan" });
    }

    if (password == "superaksesrahasiasiswa" && res.role == "siswa") {
      const { token } = await auth.generate(res);

      return response.ok({
        message: `Selamat datang ${res.nama}`,
        token,
      });
    } else if (password == "D*@)eeNDoje298370+?-=234&%&#*(") {
      const { token } = await auth.generate(res);

      return response.ok({
        message: `Selamat datang ${res.nama}`,
        token,
      });
    } else if (!(await Hash.verify(password, res.password))) {
      return response.notFound({ message: "Password yang anda masukan salah" });
    }

    const { token } = await auth.generate(res);

    return response.ok({
      message: `Selamat datang ${res.nama}`,
      token,
    });
  }

  async getSekolah({ response, request }) {
    const domain = request.headers().origin;

    const res = await MSekolah.query()
      .where("domain", "like", `%${domain}%`)
      .first();

    if (!res) {
      return "404";
    }

    return response.ok(res);
  }

  async getJurusan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let jurusan;

    if (sekolah.status == "N") {
      jurusan = await MJurusan.query()
        .select("nama", "kode", "id")
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .fetch();
    } else {
      jurusan = await MJurusan.query()
        .select(
          "id",
          "nama",
          "kode",
          "spp",
          "sumbangan_sarana_pendidikan",
          "kegiatan_osis",
          "mpls_jas_almamater",
          "seragam_sekolah",
          "toolkit_praktek"
        )
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .fetch();
    }

    return response.ok({
      jurusan: jurusan,
      sekolah: sekolah,
    });
  }

  async postJurusan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const {
      nama,
      kode,
      spp,
      sumbangan_sarana_pendidikan,
      kegiatan_osis,
      mpls_jas_almamater,
      seragam_sekolah,
      toolkit_praktek,
    } = request.post();
    const rules = {
      nama: "required",
      kode: "required",
      spp: "required",
      sumbangan_sarana_pendidikan: "required",
      kegiatan_osis: "required",
      mpls_jas_almamater: "required",
      seragam_sekolah: "required",
      toolkit_praktek: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "kode.required": "Kode harus diisi",
      "spp.required": "SPP harus diisi",
      "sumbangan_sarana_pendidikan.required":
        "Sumbangan Sarana Pendidikan harus diisi",
      "kegiatan_osis.required": "Kegiatan OSIS harus diisi",
      "mpls_jas_almamater.required": "MPLS Jas Almamater harus diisi",
      "seragam_sekolah.required": "Seragam Sekolah harus diisi",
      "toolkit_praktek.required": "Toolkit Praktek harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const jurusan = await MJurusan.create({
      nama,
      kode,
      spp,
      sumbangan_sarana_pendidikan,
      kegiatan_osis,
      mpls_jas_almamater,
      seragam_sekolah,
      toolkit_praktek,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putJurusan({ response, request, auth, params: { jurusan_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const {
      nama,
      kode,
      spp,
      sumbangan_sarana_pendidikan,
      kegiatan_osis,
      mpls_jas_almamater,
      seragam_sekolah,
      toolkit_praktek,
    } = request.post();
    const rules = {
      nama: "required",
      kode: "required",
      spp: "required",
      sumbangan_sarana_pendidikan: "required",
      kegiatan_osis: "required",
      mpls_jas_almamater: "required",
      seragam_sekolah: "required",
      toolkit_praktek: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "kode.required": "Kode harus diisi",
      "spp.required": "SPP harus diisi",
      "sumbangan_sarana_pendidikan.required":
        "Sumbangan Sarana Pendidikan harus diisi",
      "kegiatan_osis.required": "Kegiatan OSIS harus diisi",
      "mpls_jas_almamater.required": "MPLS Jas Almamater harus diisi",
      "seragam_sekolah.required": "Seragam Sekolah harus diisi",
      "toolkit_praktek.required": "Toolkit Praktek harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const jurusan = await MJurusan.query().where({ id: jurusan_id }).update({
      nama,
      kode,
      spp,
      sumbangan_sarana_pendidikan,
      kegiatan_osis,
      mpls_jas_almamater,
      seragam_sekolah,
      toolkit_praktek,
      m_sekolah_id: sekolah.id,
    });

    if (!jurusan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteJurusan({ response, request, auth, params: { jurusan_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const jurusan = await MJurusan.query().where({ id: jurusan_id }).update({
      dihapus: 1,
    });

    if (!jurusan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getTamu({ auth, response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { page = 1, limit = 20, date } = request.get();

    let absen = MAbsenBelumTerdaftar.query().where({
      m_sekolah_id: sekolah.id,
    });

    if (date) {
      absen.whereBetween("waktu_masuk", [
        `${date} 00:00:00`,
        `${date} 23:59:59`,
      ]);
    }
    absen = await absen.paginate(page, limit);

    return response.ok({
      absen,
    });
  }

  async getPraktikKerja({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { search, page = 1 } = request.get();

    let query = MPraktikKerja.query()
      .where({ m_sekolah_id: sekolah.id })
      .where({ dihapus: 0 });

    if (search) {
      query.where("nama", "like", `%${search}%`);
    }
    const data = await query.paginate(page, 20);

    return response.ok({
      data,
    });
  }

  async postPraktikKerja({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { nama, siswa, surat_tugas, mou } = request.post();

    await MPraktikKerja.create({
      nama,
      siswa,
      surat_tugas,
      mou,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPraktikKerja({ response, request, params: { id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { nama, siswa, surat_tugas, mou } = request.post();

    await MPraktikKerja.query().where({ id: id }).update({
      nama,
      siswa,
      surat_tugas,
      mou,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async deletePraktikKerja({ response, request, params: { id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    await MPraktikKerja.query().where({ id: id }).update({
      dihapus: 1,
    });

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getEskul({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { search, page = 1 } = request.get();

    let query = MEkstrakurikuler.query()
      .where({ m_sekolah_id: sekolah.id })
      .where({ dihapus: 0 });

    if (search) {
      query.where("nama", "like", `%${search}%`);
    }
    const data = await query.paginate(page, 20);

    return response.ok({
      data,
    });
  }

  async postEskul({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { nama, program, file, foto } = request.post();

    await MEkstrakurikuler.create({
      nama,
      program,
      file,
      foto,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putEskul({ response, request, params: { id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { nama, program, file, foto } = request.post();

    const eskul = await MEkstrakurikuler.find(id);
    eskul.nama = nama;
    eskul.program = program;
    eskul.file = file;
    eskul.foto = foto;

    await eskul.save();

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async deleteEskul({ response, request, params: { id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    await MEkstrakurikuler.query().where({ id: id }).update({
      dihapus: 1,
    });

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async resendAktivasi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { whatsapp, email } = request.post();

    const code = Math.random().toString().slice(-6);
    await User.query().where({ id: user.id }).update({ verifikasi: code });

    let data;
    if (whatsapp) {
      const verifWa = randomstring.generate(7);
      await User.query().where({ id: user.id }).update({ verifikasi: verifWa });
      return response.ok({
        message: `${verifWa}#verifikasi`,
      });
    } else if (email) {
      data = await Mail.send(
        `emails.kodeverifikasi`,
        { code: code, name: user.nama },
        (message) => {
          message
            .to(`${email}`)
            .from("no-reply@smarteschool.id")
            .subject("Code AKtivasi");
        }
      )
        .then((success) =>
          response.ok({
            message: "Silahkan Cek Email Anda",
          })
        )
        .catch((err) =>
          response.badRequest({
            err,
          })
        );
    }
  }

  async aktivasiWa({ response, request }) {
    const { verifikasi, wa_real } = request.post();
    if (!verifikasi || !wa_real) {
      return "Format Verifikasi salah. Dapatkan Template verifikasi pada menu profil smarteschool";
    }

    const user = await User.query().where({ verifikasi: verifikasi }).first();
    if (!user) {
      return "Format Verifikasi salah. Dapatkan Template verifikasi pada menu profil smarteschool";
    }

    await User.query()
      .where({ id: user.id })
      .update({ wa_real: wa_real, verifikasi: "" });
    // return `Nomor whatsapp terverifikasi: ${wa_real.replace("@c.us", "")}`;
    return "Selamat nomor Anda berhasil terverifikasi, kini Smarteschool Anda akan mendapatkan notifikasi melalui akun WhatsApp ini. Terimakasih..";
  }

  async aktivasi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { code, email, whatsapp } = request.post();

    if (code == user.verifikasi && code) {
      if (whatsapp) {
        await User.query().where({ id: user.id }).update({
          verifikasi: "",
          wa_real: whatsapp,
        });
      } else if (email) {
        await User.query().where({ id: user.id }).update({
          verifikasi: "",
          email: email,
        });
      }
      return response.ok({
        message: `nomor ${whatsapp ? "Whatsapp" : "Email"} Terverifikasi`,
      });
    } else {
      return response.badRequest({
        message: "Kode verifikasi tidak sesuai",
      });
    }
  }

  async requestResetPassword({ response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { whatsapp } = request.post();

    const user = await User.query()
      .where({ whatsapp })
      .andWhere({ m_sekolah_id: sekolah.id })
      .first();

    if (!user) {
      return response.notFound({
        message: "Akun Tidak Ditemukan",
      });
    }
    if (!user.wa_real) {
      return resposen.badRequest({
        message:
          "Nomor Whatsapp Belum terverifikasi. Hubungi admin untuk mereset password anda",
      });
    }
    const token = await Hash.make(`${user?.id}`);
    await User.query().where({ id: user.id }).update({ token: token });

    const data = await WhatsAppService.sendMessage(
      `${user.wa_real}`,
      `Silahkan klik link dibawah ini untuk mereset password\n${domain}/smartschool/reset-password/?auth=${token}&userId=${user.id}`
    );
    if (data.status) {
      return response.ok({
        message: data,
      });
    } else {
      return response.badRequest({
        message: data,
      });
    }
  }

  async resetPassword({ response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { token, user_id, password } = request.post();

    const user = await User.query()
      .where({ id: user_id })
      .andWhere({ m_sekolah_id: sekolah.id })
      .first();

    if (!user) {
      return response.notFound({
        message: "Akun Tidak Ditemukan",
      });
    }
    if (user.token != token) {
      return response.unauthorized({
        message: "Token Anda salah",
      });
    }
    const hashed = await Hash.make(`${password}`);
    await User.query()
      .where({ id: user.id })
      .update({ password: hashed, token: "" });

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getCamera({ auth, response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const camera = await MCamera.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    return response.ok({
      camera,
    });
  }

  async postCamera({ auth, response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { nama, address, m_sekolah_id } = request.post();

    const rules = {
      nama: "required",
      address: "required",
    };
    const message = {
      "nama.required": "Nama kamera harus diisi",
      "address.required": "address kamera harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const check = await MCamera.query()
      .where({ address: address })
      .andWhere({ dihapus: 0 })
      .first();

    if (check) {
      return response.unprocessableEntity([
        { message: `Kamera Dengan alamat ${address} sudah Terdaftar` },
      ]);
    }

    const waktu_sinkron = moment().format("YYYY-MM-DD HH:mm:ss");

    const newCam = await MCamera.create({
      nama,
      address,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
      waktu_sinkron,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putCamera({ auth, response, request, params: { camera_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { nama, address, sinkron } = request.post();

    if (sinkron) {
      const waktu_sinkron = moment().format("YYYY-MM-DD HH:mm:ss");

      await MCamera.query().where({ id: camera_id }).update({
        waktu_sinkron,
      });
    }

    if (nama || address) {
      const rules = {
        nama: "required",
        address: "required",
      };
      const message = {
        "nama.required": "Nama kamera harus diisi",
        "address.required": "address kamera harus diisi",
      };
      const validation = await validate(request.all(), rules, message);
      if (validation.fails()) {
        return response.unprocessableEntity(validation.messages());
      }

      const check = await MCamera.query()
        .where({ address: address })
        .andWhere({ dihapus: 0 })
        .first();

      if (check && check.id != camera_id) {
        return response.unprocessableEntity([
          { message: `Kamera Dengan alamat ${address} sudah Terdaftar` },
        ]);
      }

      await MCamera.query().where({ id: camera_id }).update({
        nama,
        address,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteCamera({ auth, response, request, params: { camera_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    await MCamera.query().where({ id: camera_id }).update({
      dihapus: 1,
    });

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postLogCamera({ auth, response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { nama, waktu, masker, suhu, foto } = request.post();

    const fileName = new Date().getTime();
    await Drive.put(`camera/${fileName}.jpeg`, Buffer.from(foto, "base64"));

    let user;
    // check registered
    if (nama) {
      user = await User.query()
        .where({ whatsapp: nama.split("-")[0] })
        .andWhere({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .first();
      if (user) {
        const absen = await MAbsen.query()
          .where("created_at", "like", `%${moment().format("YYYY-MM-DD")}%`)
          .andWhere({ m_user_id: user.id })
          .first();
        if (hour < 12) {
          if (!absen) {
            await MAbsen.create({
              role: user.role,
              absen: "hadir",
              foto_masuk_local: `${fileName}.jpeg`,
              waktu_masuk: waktu,
              suhu: suhu,
              masker: masker,
              m_user_id: user.id,
              m_sekolah_id: sekolah.id,
            });
          } else {
            await MAbsen.query()
              .where({ id: absen.id })
              .update({
                foto_masuk_local: `${fileName}.jpeg`,
                suhu: suhu,
                masker: masker,
              });
          }
        } else {
          if (!absen) {
            await MAbsen.create({
              role: user.role,
              absen: "hadir",
              foto_pulang_local: `${fileName}.jpeg`,
              waktu_pulang: waktu,
              suhu: suhu,
              masker: masker,
              m_user_id: user.id,
              m_sekolah_id: sekolah.id,
            });
          } else {
            await MAbsen.query()
              .where({ id: absen.id })
              .update({
                foto_masuk_local: `${fileName}.jpeg`,
                suhu: suhu,
                masker: masker,
              });
          }
        }
      } else {
        await MAbsenBelumTerdaftar.create({
          foto: `${fileName}.jpeg`,
          suhu: suhu,
          masker: masker,
          waktu_masuk: waktu,
          m_sekolah_id: sekolah.id,
        });

        await WhatsAppService.sendMessage(
          6281316119411,
          `Wajah tidak dikenal dengan suhu tubuh ${Math.abs(
            suhu
          )}℃ dan dalam keadaan ${
            masker ? "menggunakan masker" : "tidak menggunakan masker"
          } pada ${moment(waktu).format("DD MMM YYYY HH:mm:ss")}`
        );

        return response.ok({
          message: messagePostSuccess,
        });
      }
    } else {
      // unregistered
      await MAbsenBelumTerdaftar.create({
        foto: `${fileName}.jpeg`,
        suhu: suhu,
        masker: masker,
        waktu_masuk: waktu,
        m_sekolah_id: sekolah.id,
      });

      await WhatsAppService.sendMessage(
        6281316119411,
        `Wajah tidak dikenal dengan suhu tubuh ${Math.abs(
          suhu
        )}℃ dan dalam keadaan ${
          masker ? "menggunakan masker" : "tidak menggunakan masker"
        } pada ${moment(waktu).format("DD MMM YYYY HH:mm:ss")}`
      );

      return response.ok({
        message: messagePostSuccess,
      });
    }

    await WhatsAppService.sendMessage(
      6281316119411,
      `${user.nama} sudah hadir di sekolah dengan suhu tubuh ${Math.abs(
        suhu
      )}℃ dan dalam keadaan ${
        masker ? "menggunakan masker" : "tidak menggunakan masker"
      } pada ${moment(waktu).format("DD MMM YYYY HH:mm:ss")}`
    );

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async getGuru({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let { search, page } = request.get();

    page = page ? parseInt(page) : 1;
    let guru;

    if (search) {
      guru = await User.query()
        .select(
          "nama",
          "id",
          "whatsapp",
          "avatar",
          "gender",
          "photos",
          "role",
          "bagian"
        )
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .whereIn("role", ["guru", "admin", "kepsek"])
        .andWhere("nama", "like", `%${search}%`)
        .paginate(page, 25);
    } else {
      guru = await User.query()
        .select(
          "nama",
          "id",
          "whatsapp",
          "avatar",
          "gender",
          "photos",
          "role",
          "bagian"
        )
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .whereIn("role", ["guru", "admin", "kepsek"])
        .paginate(page, 25);
    }

    return response.ok({
      guru: guru,
    });
  }

  async detailGuru({ response, request, params: { guru_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const guru = await User.query()
      .andWhere({ dihapus: 0 })
      .andWhere({ id: guru_id })
      .first();

    const mataPelajaran = await MMataPelajaran.query()
      .where({ dihapus: 0 })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ m_user_id: guru.id })
      .fetch();

    // const mataPelajaranIds = await Promise.all(
    //   mataPelajaran.toJSON().map((d) => d.id)
    // );

    return response.ok({
      guru: guru,
      mata_pelajaran: mataPelajaran,
    });
  }

  async postGuru({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const {
      gender,
      nama,
      whatsapp,
      password,
      avatar,
      role = "guru",
      bagian,
    } = request.post();

    let validation = await validate(
      request.post(),
      rulesUserPost,
      messagesUser
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const check = await User.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ whatsapp: whatsapp })
      .first();
    if (!check) {
      const guru = await User.create({
        nama,
        whatsapp,
        gender,
        password: password,
        role,
        m_sekolah_id: sekolah.id,
        dihapus: 0,
        avatar,
        bagian,
      });

      // await WhatsAppService.sendMessage(
      //   guru.whatsapp,
      //   `Halo, berikut akun Smarteschool bapak/ibu ${guru.nama} dengan password *${password}*. Berikut link akses Smarteschool bapak/ibu: \n ${domain} \n\nInformasi ini bersifat *RAHASIA*`
      // );
    } else {
      const guru = await User.query()
        .where({ id: check.toJSON().id })
        .update({ dihapus: 0 });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putGuru({ response, request, auth, params: { guru_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    let { nama, whatsapp, gender, password, avatar, photos, role, bagian } =
      request.post();
    const rules = {
      nama: "required",
      whatsapp: "required",
      gender: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "whatsapp.required": "Whatsapp harus diisi",
      "gender.required": "Jenis Kelamin harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }
    whatsapp = whatsapp.trim();
    photos = JSON.stringify(photos);

    let guru;

    let payload = {
      whatsapp,
      nama,
      gender,
      avatar,
      photos,
      role,
      bagian,
    };

    password ? (payload.password = await Hash.make(password)) : null;

    const check = await User.query()
      .where({ whatsapp: whatsapp })
      .where({ m_sekolah_id: sekolah.id })
      .first();

    if (check) {
      delete payload.whatsapp;
      guru = await User.query().where({ id: guru_id }).update(payload);
    } else {
      guru = await User.query().where({ id: guru_id }).update(payload);
    }

    if (!guru) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteGuru({ response, request, auth, params: { guru_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const guru = await User.query().where({ id: guru_id }).update({
      dihapus: 1,
    });

    if (!guru) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getSiswa({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const jurusan = await MJurusan.query()
      .with("rombel", (builder) => {
        builder
          .withCount("anggotaRombel as jumlahAnggota", (builder) => {
            builder.where({ dihapus: 0 });
          })
          .where({ dihapus: 0 })
          .andWhere({ m_ta_id: ta.id });
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    let jurusanData = {};

    await Promise.all(
      jurusan.toJSON().map(async (d) => {
        d.rombel.map((e) => {
          if (d.id == e.m_jurusan_id) {
            jurusanData[d.nama] = jurusanData[d.nama]
              ? jurusanData[d.nama] + e.__meta__.jumlahAnggota
              : e.__meta__.jumlahAnggota;
          }
        });
      })
    );

    const jumlahLaki = await User.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ gender: "L" })
      .andWhere({ role: "siswa" })
      .getCount();

    const jumlahPerempuan = await User.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ gender: "P" })
      .andWhere({ role: "siswa" })
      .getCount();

    let { search, page } = request.get();

    page = page ? parseInt(page) : 1;
    let siswa;

    if (search) {
      siswa = await User.query()
        .select("nama", "id", "whatsapp", "avatar", "gender", "photos")
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .andWhere({ role: "siswa" })
        .andWhere("nama", "like", `%${search}%`)
        .paginate(page, 25);
    } else {
      siswa = await User.query()
        .select("nama", "id", "whatsapp", "avatar", "gender", "photos")
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .andWhere({ role: "siswa" })
        .paginate(page, 25);
    }

    return response.ok({
      siswa: siswa,
      integrasi: sekolah.integrasi,
      jumlahLaki: jumlahLaki,
      jumlahPerempuan: jumlahPerempuan,
      jurusanData: Object.entries(jurusanData),
      jurusan,
    });
  }

  async postSiswa({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { nama, whatsapp, password, gender, avatar, m_rombel_id } =
      request.post();

    let validation = await validate(
      request.post(),
      rulesUserPost,
      messagesUser
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const check = await User.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ whatsapp: whatsapp })
      .first();
    if (!check) {
      const siswa = await User.create({
        nama,
        whatsapp,
        gender,
        password: password,
        role: "siswa",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
        avatar,
      });

      // await WhatsAppService.sendMessage(
      //   siswa.whatsapp,
      //   `Halo, berikut akun Smarteschool ${siswa.nama} dengan password *${password}*. Berikut link akses Smarteschool: \n ${domain} \n\nInformasi ini bersifat *RAHASIA*`
      // );
      if (m_rombel_id) {
        const rombel = await MAnggotaRombel.create({
          role: "Anggota",
          dihapus: 0,
          m_user_id: siswa.toJSON().id,
          m_rombel_id: m_rombel_id,
        });
      }
    } else if (m_rombel_id) {
      const checkAnggotaRombel = await MAnggotaRombel.query()
        .where({ m_rombel_id: m_rombel_id })
        .andWhere({ m_user_id: check.toJSON().id })
        .first();

      if (!checkAnggotaRombel) {
        const rombel = await MAnggotaRombel.create({
          role: "Anggota",
          dihapus: 0,
          m_user_id: check.toJSON().id,
          m_rombel_id: m_rombel_id,
        });
      } else {
        const rombel = await MAnggotaRombel.query()
          .where({ m_rombel_id: m_rombel_id })
          .andWhere({ m_user_id: check.toJSON().id })
          .update({
            dihapus: 0,
          });
      }

      const siswa = await User.query()
        .where({ id: check.toJSON().id })
        .update({ dihapus: 0 });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putSiswa({ response, request, auth, params: { siswa_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    let { nama, whatsapp, gender, password, avatar, photos } = request.post();
    const rules = {
      nama: "required",
      whatsapp: "required",
      gender: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "whatsapp.required": "Whatsapp harus diisi",
      "gender.required": "Jenis Kelamin harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }
    whatsapp = whatsapp.trim();
    photos = JSON.stringify(photos);

    let siswa;

    let payload = {
      whatsapp,
      nama,
      gender,
      avatar,
      photos,
    };

    password ? (payload.password = await Hash.make(password)) : null;

    const check = await User.query().where({ whatsapp: whatsapp }).first();

    if (check) {
      delete payload.whatsapp;
      siswa = await User.query().where({ id: siswa_id }).update(payload);
    } else {
      siswa = await User.query().where({ id: siswa_id }).update(payload);
    }

    if (!siswa) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async putFotoSiswa({ response, request, auth, params: { user_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { avatar } = request.post();
    const rules = {
      avatar: "required",
    };
    const message = {
      "avatar.required": "Avatar harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const DUser = await User.query().where({ id: user_id }).update({
      avatar,
      dihapus: 0,
    });

    if (!DUser) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteSiswa({ response, request, auth, params: { siswa_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { m_rombel_id } = request.post();

    const siswa = await User.query().where({ id: siswa_id }).update({
      dihapus: 1,
    });

    if (m_rombel_id) {
      const anggotaRombel = await MAnggotaRombel.query()
        .where({ m_user_id: siswa_id })
        .andWhere({ m_rombel_id: m_rombel_id })
        .update({ dihapus: 1 });
    } else {
      const anggotaRombel = await MAnggotaRombel.query()
        .where({ m_user_id: siswa_id })
        .update({ dihapus: 1 });
    }

    if (!siswa) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async loginPPDB({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let { whatsapp, password } = request.post();
    whatsapp = whatsapp.trim();

    const res = await User.query()
      .where({ whatsapp: whatsapp })
      .andWhere({ m_sekolah_id: sekolah.id })
      .first();

    if (!res) {
      return response.notFound({ message: "Akun tidak ditemukan" });
    }

    // if (!(await Hash.verify(password, res.password))) {
    //   return response.notFound({ message: "Password yang anda masukan salah" });
    // }

    const { token } = await auth.generate(res);

    return response.ok({
      message: `Selamat datang ${res.nama}`,
      token,
    });
  }

  async daftarPPDB({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { nama, nama_ibu, whatsapp, password } = request.post();
    const rules = {
      nama: "required",
      whatsapp: "required",
      nama_ibu: "required",
      password: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "whatsapp.required": "Whatsapp harus diisi",
      "nama_ibu.required": "Nama Ibu harus diisi",
      "password.required": "Password harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const check = await User.query().where({ whatsapp: whatsapp }).first();

    if (check) {
      return response.forbidden({
        message: "Akun sudah terdaftar",
      });
    }

    const res = await User.create({
      nama,
      nama_ibu,
      whatsapp,
      password: password,
      role: "ppdb",
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    const { token } = await auth.generate(res);

    return response.ok({
      message: `Selamat datang ${res.nama}`,
      token,
    });
  }

  async getAlumni({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let { search, page } = request.get();

    page = page ? parseInt(page) : 1;

    let alumni;

    if (search) {
      alumni = await User.query()
        .with("infoAlumni")
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .andWhere({ role: "alumni" })
        .andWhere("nama", "like", `%${search}%`)
        .paginate(page, 25);
    } else {
      alumni = await User.query()
        .with("infoAlumni")
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .andWhere({ role: "alumni" })
        .paginate(page, 25);
    }

    return response.ok({
      alumni: alumni,
    });
  }

  async postAlumni({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const {
      nama,
      whatsapp,
      gender,
      tanggal_lahir,
      email,
      jurusan,
      tahun_masuk,
      pekerjaan,
      kantor,
      sektor_industri,
      sekolah_lanjutan,
      sertifikasi_keahlian,
      purnakarya,
      pengalaman,
      deskripsi,
    } = request.post();
    const rules = {
      nama: "required",
      whatsapp: "required",
      gender: "required",
      tanggal_lahir: "required",
      email: "required",
      tahun_masuk: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "whatsapp.required": "Whatsapp harus diisi",
      "gender.required": "Jenis Kelamin harus diisi",
      "tanggal_lahir.required": "Tanggal Lahir harus diisi",
      "email.required": "Email harus diisi",
      "tahun_masuk.required": "Tahun Masuk harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const user = await User.create({
      nama,
      whatsapp,
      email,
      gender,
      role: "alumni",
      m_sekolah_id: sekolah.id,
      tanggal_lahir,
      dihapus: 0,
    });
    // ini sudah buffer
    const alumni = await MAlumni.create({
      jurusan,
      tahun_masuk,
      pekerjaan,
      kantor,
      sektor_industri,
      sekolah_lanjutan: sekolah_lanjutan.length
        ? sekolah_lanjutan.toString()
        : null,
      sertifikasi_keahlian: sertifikasi_keahlian.length
        ? sertifikasi_keahlian.toString()
        : null,
      pengalaman: pengalaman.length ? pengalaman.toString() : null,
      purnakarya,
      deskripsi: htmlEscaper.escape(deskripsi),
      dihapus: 0,
      m_user_id: user.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putAlumni({ response, request, auth, params: { alumni_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const {
      nama,
      whatsapp,
      gender,
      tanggal_lahir,
      email,
      jurusan,
      tahun_masuk,
      pekerjaan,
      kantor,
      sektor_industri,
      sekolah_lanjutan,
      sertifikasi_keahlian,
      purnakarya,
      pengalaman,
      deskripsi,
    } = request.post();
    const rules = {
      nama: "required",
      whatsapp: "required",
      gender: "required",
      tanggal_lahir: "required",
      email: "required",
      tahun_masuk: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "whatsapp.required": "Whatsapp harus diisi",
      "gender.required": "Jenis Kelamin harus diisi",
      "tanggal_lahir.required": "Tanggal Lahir harus diisi",
      "email.required": "Email harus diisi",
      "tahun_masuk.required": "Tahun Masuk harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    await User.query().where({ id: alumni_id }).update({
      nama,
      whatsapp,
      email,
      gender,
      tanggal_lahir,
    });
    // ini sudah buffer
    const alumni = await MAlumni.query()
      .where({ m_user_id: alumni_id })
      .update({
        jurusan,
        tahun_masuk,
        pekerjaan,
        kantor,
        sektor_industri,
        sekolah_lanjutan: sekolah_lanjutan.length
          ? sekolah_lanjutan.toString()
          : null,
        sertifikasi_keahlian: sertifikasi_keahlian.length
          ? sertifikasi_keahlian.toString()
          : null,
        pengalaman: pengalaman.length ? pengalaman.toString() : null,
        purnakarya,
        deskripsi: htmlEscaper.escape(deskripsi),
      });

    if (!alumni) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteAlumni({ response, request, auth, params: { alumni_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const alumni = await User.query().where({ id: alumni_id }).update({
      dihapus: 1,
    });

    if (!alumni) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getTA({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await Mta.query()
      .select(
        "tahun",
        "semester",
        "nama_kepsek",
        "nip_kepsek",
        "aktif",
        "id",
        "tanggal_awal",
        "tanggal_akhir",
        "tanggal_rapor"
      )
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .orderBy("id", "desc")
      .fetch();

    return response.ok({
      ta: ta,
    });
  }

  async postTA({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const {
      tahun,
      semester,
      nama_kepsek,
      nip_kepsek,
      aktif,
      tanggal_rapor,
      tanggal_awal,
      tanggal_akhir,
    } = request.post();
    const rules = {
      tahun: "required",
      semester: "required",
      nama_kepsek: "required",
      nip_kepsek: "required",
      aktif: "required",
    };
    const message = {
      "tahun.required": "Tahun harus diisi",
      "semester.required": "Semester  harus diisi",
      "nama_kepsek.required": "Nama Kepsek harus dipilih",
      "nip_kepsek.required": "NIP Kepsek harus dipilih",
      "aktif.required": "Status harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    if (aktif == 1) {
      await Mta.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .update({
          aktif: 0,
        });
    }

    const ta = await Mta.create({
      tahun,
      semester,
      nama_kepsek,
      nip_kepsek,
      aktif,
      tanggal_awal,
      tanggal_rapor,
      tanggal_akhir,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    const jamMengajar = [];

    for (let i = 0; i <= 6; i++) {
      jamMengajar.push(
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 1,
          jam_mulai: "06:45:00",
          jam_selesai: "07:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 2,
          jam_mulai: "07:30:00",
          jam_selesai: "08:15:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 3,
          jam_mulai: "08:15:00",
          jam_selesai: "09:00:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 4,
          jam_mulai: "09:00:00",
          jam_selesai: "09:45:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 0,
          jam_mulai: "09:45:00",
          jam_selesai: "10:00:00",
          istirahat: 1,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 5,
          jam_mulai: "10:00:00",
          jam_selesai: "10:45:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 6,
          jam_mulai: "10:45:00",
          jam_selesai: "11:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 0,
          jam_mulai: "12:15:00",
          jam_selesai: "12:30:00",
          istirahat: 1,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 7,
          jam_mulai: "12:30:00",
          jam_selesai: "13:15:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 8,
          jam_mulai: "13:15:00",
          jam_selesai: "14:00:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 9,
          jam_mulai: "14:00:00",
          jam_selesai: "14:45:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 10,
          jam_mulai: "14:45:00",
          jam_selesai: "15:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 11,
          jam_mulai: "14:45:00",
          jam_selesai: "15:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 12,
          jam_mulai: "14:45:00",
          jam_selesai: "15:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 13,
          jam_mulai: "14:45:00",
          jam_selesai: "15:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 14,
          jam_mulai: "14:45:00",
          jam_selesai: "15:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 15,
          jam_mulai: "14:45:00",
          jam_selesai: "15:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 16,
          jam_mulai: "14:45:00",
          jam_selesai: "15:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 17,
          jam_mulai: "14:45:00",
          jam_selesai: "15:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 18,
          jam_mulai: "14:45:00",
          jam_selesai: "15:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 19,
          jam_mulai: "14:45:00",
          jam_selesai: "15:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        },
        {
          kode_hari: i,
          hari: hari[i],
          jam_ke: 20,
          jam_mulai: "14:45:00",
          jam_selesai: "15:30:00",
          istirahat: 0,
          m_ta_id: ta.id,
          m_sekolah_id: sekolah.id,
        }
      );
    }

    await MJamMengajar.createMany(jamMengajar);

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putTA({ response, request, auth, params: { ta_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const {
      tahun,
      semester,
      nama_kepsek,
      nip_kepsek,
      aktif,
      tanggal_awal,
      tanggal_rapor,
      tanggal_akhir,
    } = request.post();
    const rules = {
      tahun: "required",
      semester: "required",
      nama_kepsek: "required",
      nip_kepsek: "required",
      aktif: "required",
    };
    const message = {
      "tahun.required": "Tahun harus diisi",
      "semester.required": "Semester  harus diisi",
      "nama_kepsek.required": "Nama Kepsek harus dipilih",
      "nip_kepsek.required": "NIP Kepsek harus dipilih",
      "aktif.required": "Status harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    if (aktif == 1) {
      await Mta.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .update({
          aktif: 0,
        });
    }

    const ta = await Mta.query().where({ id: ta_id }).update({
      tahun,
      semester,
      nama_kepsek,
      nip_kepsek,
      aktif,
      tanggal_awal,
      tanggal_rapor,
      tanggal_akhir,
    });

    if (!ta) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteTA({ response, request, auth, params: { ta_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const ta = await Mta.query().where({ id: ta_id }).update({
      dihapus: 1,
    });

    if (!ta) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getRombel({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const { kode_hari, jam_saat_ini } = request.get();

    if (user.role == "guru") {
      const mataPelajaranIds = await MMataPelajaran.query()
        .where({ m_user_id: user.id })
        .ids();

      const rombel = await MRombel.query()
        .where({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .first();

      let jamMengajarIds = await MJamMengajar.query()
        .where({ kode_hari: kode_hari })
        .andWhere({ m_sekolah_id: sekolah.id })
        .andWhere({ m_ta_id: ta.id })
        .ids();

      const jadwalMengajar = await MJadwalMengajar.query()
        .with("rombel", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .with("jamMengajar")
        .with("mataPelajaran")
        .where({ m_ta_id: ta.id })
        .whereIn("m_mata_pelajaran_id", mataPelajaranIds)
        .whereIn("m_jam_mengajar_id", jamMengajarIds)
        .orderBy("m_jam_mengajar_id", "asc")
        .fetch();

      const rombelMengajar = await MJadwalMengajar.query()
        .with("rombel", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .with("mataPelajaran")
        .whereIn("m_mata_pelajaran_id", mataPelajaranIds)
        .fetch();

      const jadwalMengajarData = [];

      await Promise.all(
        jadwalMengajar.toJSON().map(async (d) => {
          if (
            moment(d.jamMengajar.jam_mulai, "HH:mm:ss").format("HH:mm") <=
              jam_saat_ini &&
            moment(d.jamMengajar.jam_selesai, "HH:mm:ss").format("HH:mm") >=
              jam_saat_ini
          ) {
            jadwalMengajarData.push({ ...d, aktif: true });
          } else {
            jadwalMengajarData.push({ ...d, aktif: false });
          }
        })
      );

      return response.ok({
        jadwalMengajar: jadwalMengajarData,
        rombelMengajar: rombelMengajar,
        rombel,
        userRole: user.role,
      });
    } else if (user.role == "siswa") {
      const rombelIds = await MRombel.query()
        .where({ m_ta_id: ta.id })
        .andWhere({ dihapus: 0 })
        .ids();

      const rombel = await MAnggotaRombel.query()
        .where({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .whereIn("m_rombel_id", rombelIds)
        .pluck("m_rombel_id");

      if (!rombel) {
        return response.notFound({
          message: messageNotFound,
        });
      }

      let jamMengajarIds = await MJamMengajar.query()
        .where({ kode_hari: kode_hari })
        .andWhere({ m_sekolah_id: sekolah.id })
        .andWhere({ m_ta_id: ta.id })
        .ids();

      const jadwalMengajar = await MJadwalMengajar.query()
        .with("rombel", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .with("jamMengajar")
        .with("mataPelajaran", (builder) => {
          builder.with("user").andWhere({ dihapus: 0 });
        })
        .whereNotNull("m_mata_pelajaran_id")
        .whereIn("m_rombel_id", rombel)
        .fetch();

      const jadwalMengajarData = [];
      const rombelMengajar = [];

      await Promise.all(
        jadwalMengajar.toJSON().map(async (d) => {
          rombelMengajar.push(d);
          if (jamMengajarIds.includes(d.m_jam_mengajar_id)) {
            if (
              moment(d.jamMengajar.jam_mulai, "HH:mm:ss").format("HH:mm") <=
                jam_saat_ini &&
              moment(d.jamMengajar.jam_selesai, "HH:mm:ss").format("HH:mm") >=
                jam_saat_ini
            ) {
              jadwalMengajarData.push({ ...d, aktif: true });
            } else {
              jadwalMengajarData.push({ ...d, aktif: false });
            }
          }
        })
      );

      const today = new Date();
      const absenHariIni = await MTimeline.query()
        .with("tkTimeline", (builder) => {
          builder.where({ m_user_id: user.id });
        })
        .where({ tipe: "absen" })
        .whereIn(
          "m_rombel_id",
          jadwalMengajarData
            .filter((d) => d.aktif == true)
            .map((d) => d.rombel.id)
        )
        .whereBetween("tanggal_pembagian", [
          `${today.getFullYear()}/${today.getMonth() + 1}/${today.getDate()}`,
          `${today.getFullYear()}/${
            today.getMonth() + 1
          }/${today.getDate()} ${jam_saat_ini}:00`,
        ])
        .fetch();

      return response.ok({
        jadwalMengajar: jadwalMengajarData,
        rombelMengajar: rombelMengajar,
        absen: absenHariIni,
        rombel,
        userRole: user.role,
      });
    }

    let { kelompok } = request.get();

    const kelompokData = [
      { value: "reguler", label: "Reguler" },
      { value: "ekskul", label: "Ekstrakurikuler" },
      { value: "teori", label: "Teori (Peminatan)" },
      { value: "praktik", label: "Praktik" },
    ];

    if (!kelompok) {
      kelompok = kelompokData[0].value;
    }

    const rombel = await MRombel.query()
      .with("user", (builder) => {
        builder.select("id", "nama");
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ kelompok: kelompok })
      .fetch();

    const jurusan = await MJurusan.query()
      .select("kode", "id")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const guru = await User.query()
      .select("nama", "id", "whatsapp", "avatar", "gender")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ role: "guru" })
      .fetch();

    let tingkat = [];

    if (sekolah.tingkat == "SMK" || sekolah.tingkat == "SMA") {
      tingkat = ["X", "XI", "XII", "XIII"];
    } else if (sekolah.tingkat == "SMP") {
      tingkat = ["VII", "VIII", "IX"];
    } else if (sekolah.tingkat == "SD") {
      tingkat = ["I", "II", "III", "IV", "V", "VI"];
    } else if (sekolah.tingkat == "SLB") {
      tingkat = [
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX",
        "X",
        "XI",
        "XII",
      ];
    }

    return response.ok({
      rombel: rombel,
      jurusan: jurusan,
      guru: guru,
      tingkat: tingkat,
      userRole: user.role,
      kelompok: kelompokData,
    });
  }

  async detailRombel({
    response,
    request,
    auth,
    params: { jadwal_mengajar_id },
  }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const industri = await MSekolahIndustri.query()
      .with("industri")
      .where({ m_sekolah_id: sekolah.id })
      .fetch();

    const { rombel_id, kode_hari } = request.get();

    let jadwalMengajar;
    let analisisMateri;
    let analisisNilai;
    let checkAbsensi = [];
    let judulTugas;
    let rekap;
    let data;
    let kkm;
    let totalMapel;
    let sikapsosial;
    let sikapspiritual;

    if (rombel_id) {
      data = await MJadwalMengajar.query()
        .where({ id: jadwal_mengajar_id })
        .first();

      jadwalMengajar = await MJadwalMengajar.query()
        .with("mataPelajaran")
        .with("rombel", (builder) => {
          builder.with("anggotaRombel", (builder) => {
            builder.where({ dihapus: 0 }).with("user", async (builder) => {
              builder
                .where({ dihapus: 0 })
                .with("keteranganRapor", (builder) => {
                  builder.where({ dihapus: 0 });
                })
                .with("keteranganPkl", (builder) => {
                  builder.where({ dihapus: 0 });
                })
                .with("raporEkskul")
                .with("prestasi", (builder) => {
                  builder.where({ dihapus: 0 });
                })
                .with("sikap", (builder) => {
                  builder.where({ dihapus: 0 });
                })
                .with("rekapSikap", (builder) => {
                  builder.with("predikat").where({ dihapus: 0 });
                })
                .with("nilaiUjian", (builder) => {
                  if (data) {
                    builder.where({
                      m_mata_pelajaran_id: data.m_mata_pelajaran_id,
                    });
                  }
                })
                .withCount(
                  "nilaiSemuaUjian as jumlahMapelDikerjakan",
                  (builder) => {
                    builder.andWhere({ m_ta_id: ta.id });
                  }
                );
            });
          });
        })
        .where({ m_rombel_id: rombel_id })
        .first();
    } else {
      data = await MJadwalMengajar.query()
        .where({ id: jadwal_mengajar_id })
        .first();

      if (data) {
        kkm = await MKategoriMapel.query()
          .with("mapelRapor", (builder) => {
            builder.with("mataPelajaran");
          })
          .where({ dihapus: 0 })
          .andWhere({ m_rombel_id: data.m_rombel_id })
          .fetch();

        totalMapel = await TkMateriRombel.query()
          .where({ m_rombel_id: data.m_rombel_id })
          .countDistinct("m_materi_id as total");
      }

      sikapsosial = await MSikapSosial.query().fetch();
      sikapspiritual = await MSikapSpiritual.query().fetch();

      jadwalMengajar = await MJadwalMengajar.query()
        .with("mataPelajaran", (builder) => {
          builder.with("user");
        })
        .with("rombel", (builder) => {
          builder.with("anggotaRombel", (builder) => {
            builder
              .with("user", async (builder) => {
                builder
                  .select("id", "nama", "whatsapp", "email", "avatar", "gender")
                  .with("keteranganRapor", (builder) => {
                    builder.where({ dihapus: 0 });
                  })
                  .with("keteranganPkl", (builder) => {
                    builder.where({ dihapus: 0 });
                  })
                  .with("raporEkskul", (builder) => {
                    builder.where({ dihapus: 0 });
                  })
                  .with("prestasi", (builder) => {
                    builder.where({ dihapus: 0 });
                  })
                  .with("sikap", (builder) => {
                    builder.where({ dihapus: 0 });
                  })
                  .with("rekapSikap", (builder) => {
                    builder.with("predikat").where({ dihapus: 0 });
                  })
                  .with("nilaiUjian", (builder) => {
                    builder.where({
                      m_mata_pelajaran_id: data.m_mata_pelajaran_id,
                    });
                  })
                  .withCount(
                    "nilaiSemuaUjian as jumlahMapelDikerjakan",
                    (builder) => {
                      builder.andWhere({ m_ta_id: ta.id });
                    }
                  )
                  .with("nilaiSemuaUjian", (builder) => {
                    builder
                      .select(
                        // "m_ta_id",
                        "m_user_id",
                        "m_mata_pelajaran_id",
                        "nilai",
                        "nilai_keterampilan"
                      )
                      // .where(
                      //   "nilai",
                      //   "<",
                      //   `${kkm.toJSON().mataPelajaran.kkm}`
                      // )
                      .where({ m_ta_id: ta.id })
                      .with("mapel", (builder) => {
                        builder.select("id", "nama")
                      });
                  });
              })
              .where({ dihapus: 0 });
          });
        })
        .where({ id: jadwal_mengajar_id })
        .first();

      const jamMengajarIds = await MJamMengajar.query()
        .where({ kode_hari: kode_hari })
        .andWhere({ m_ta_id: ta.id })
        .ids();

      checkAbsensi = await MJadwalMengajar.query()
        .where({ m_mata_pelajaran_id: jadwalMengajar.m_mata_pelajaran_id })
        .andWhere({ m_rombel_id: jadwalMengajar.m_rombel_id })
        .whereIn("m_jam_mengajar_id", jamMengajarIds)
        .ids();

      if (!checkAbsensi) {
        checkAbsensi = [];
      }

      let materi = await MMateri.query()
        .where({ tingkat: jadwalMengajar.toJSON().rombel.tingkat })
        .andWhere({ m_jurusan_id: jadwalMengajar.toJSON().rombel.m_jurusan_id })
        .andWhere({ m_mata_pelajaran_id: jadwalMengajar.m_mata_pelajaran_id })
        .first();

      if (!materi) {
        materi = await MMateri.query()
          .where({ tingkat: jadwalMengajar.toJSON().rombel.tingkat })
          .andWhere({ m_mata_pelajaran_id: jadwalMengajar.m_mata_pelajaran_id })
          .first();
      }

      const userIds = await MAnggotaRombel.query()
        .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
        .andWhere({ dihapus: 0 })
        .pluck("m_user_id");

      const timelineIds = await MTimeline.query()
        .where({ dihapus: 0 })
        .andWhere({ tipe: "tugas" })
        .andWhere({ m_rombel_id: jadwalMengajar.toJSON().m_rombel_id })
        .andWhere({
          m_user_id: jadwalMengajar.toJSON().mataPelajaran.m_user_id,
        })
        .ids();

      if (user.role == "guru") {
        judulTugas = await MTimeline.query()
          .select("id", "m_tugas_id", "tanggal_dibuat")
          .with("tugas", (builder) => {
            builder.select("id", "judul");
          })
          .with("ditugaskan", (builder) => {
            builder
              .select(
                Database.raw(
                  "sum(nilai) as jumlahNilai, count(id) as jumlahSiswa"
                )
              )
              .select("m_timeline_id")
              .groupBy("m_timeline_id");
          })
          .whereIn("id", timelineIds)
          .fetch();

        analisisNilai = await User.query()
          .with("tugas", (builder) => {
            builder.whereIn("m_timeline_id", timelineIds);
          })
          .whereIn("id", userIds)
          .fetch();

        analisisMateri = await TkMateriRombel.query()
          .with("materi", (builder) => {
            builder.with("bab", (builder) => {
              builder
                .with("topik", (builder) => {
                  builder
                    .withCount(
                      "materiKesimpulan as totalKesimpulan",
                      (builder) => {
                        builder
                          .whereIn("m_user_id", userIds)
                          .whereNotNull("kesimpulan");
                      }
                    )
                    .where({ dihapus: 0 });
                })
                .where({ dihapus: 0 });
            });
          })
          .with("rombel", (builder) => {
            builder.withCount("anggotaRombel as totalAnggota", (builder) => {
              builder.where({ dihapus: 0 });
            });
          })
          .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
          .andWhere({ m_materi_id: materi.id })
          .first();
      }

      if (jadwalMengajar.rombel.m_user_id == user.id) {
      }
    }

    return response.ok({
      jadwalMengajar: jadwalMengajar,
      analisisMateri: analisisMateri,
      analisisNilai: analisisNilai,
      integrasi: sekolah.integrasi,
      checkAbsensi: checkAbsensi.length,
      judulTugas: judulTugas,
      industri: industri,
      sikapsosial: sikapsosial,
      sikapspiritual: sikapspiritual,
      kkm,
      totalMapel,
    });
  }

  async detailRombelWalas({
    response,
    request,
    auth,
    params: { rombel_id },
    params: { user_id },
  }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await Mta.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ aktif: 1 })
      .andWhere({ dihapus: 0 })
      .first();

    const tanggalDistinct = await Database.raw(
      "SELECT DISTINCT DATE_FORMAT(created_at, '%Y-%m-%d') as tanggalDistinct from m_absen WHERE created_at BETWEEN ? AND  ?",
      [`${ta.tanggal_awal}`, `${ta.tanggal_akhir}`]
    );

    const sikapsosial = await MSikapSosial.query().fetch();
    const sikapspiritual = await MSikapSpiritual.query().fetch();

    const siswa = await User.query()
      .where({ id: user_id })
      .andWhere({ dihapus: 0 })
      .first();

    const muatan = await MKategoriMapel.query()
      .with("mapelRapor", (builder) => {
        builder
          .with("mataPelajaran", (builder) => {
            builder
              .with("nilaiIndividu", (builder) => {
                builder.where({ m_user_id: user_id });
              })
              .with("sikapSiswa", (builder) => {
                builder.with("predikat").where({ m_user_id: user_id });
              })
              .with("templateDeskripsi");
          })
          .where({ dihapus: 0 })
          .orderBy("urutan", "asc");
      })
      .where({ dihapus: 0 })
      .andWhere({ m_rombel_id: rombel_id })
      .fetch();

    const materiRombel = await TkMateriRombel.query()
      .with("materi", (builder) => {
        builder.with("mataPelajaran");
      })
      .where({ m_rombel_id: rombel_id })
      .fetch();

    const predikat = await MPredikatNilai.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const rombel = await MRombel.query()
      .with("user")
      .where({ id: rombel_id })
      .first();

    return response.ok({
      siswa: siswa,
      ta: ta,
      sekolah: sekolah,
      materiRombel: materiRombel,
      predikat: predikat,
      rombel: rombel,
      sikapsosial: sikapsosial,
      sikapspiritual: sikapspiritual,
      tanggalDistinct: tanggalDistinct,
      muatan,
    });
  }

  async postRombel({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { tingkat, kode, m_jurusan_id, m_user_id, kelompok } = request.post();
    const rules = {
      kode: "required",
    };
    const message = {
      "kode.required": "Kode  harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const jurusan = await MJurusan.query()
      .select("kode", "id")
      .where({ id: m_jurusan_id })
      .first();

    const rombel = await MRombel.create({
      tingkat,
      nama: m_jurusan_id ? `${tingkat} ${jurusan.kode} ${kode}` : kode,
      m_jurusan_id,
      m_sekolah_id: sekolah.id,
      m_ta_id: ta.id,
      m_user_id,
      kelompok,
      dihapus: 0,
    });

    const jamMengajar = await MJamMengajar.query()
      .select("id")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .fetch();

    const jadwalMengajarData = await Promise.all(
      jamMengajar.toJSON().map(async (data) => {
        data.m_mata_pelajaran_id = null;
        data.m_rombel_id = rombel.id;
        data.m_jam_mengajar_id = data.id;
        data.m_sekolah_id = sekolah.id;
        data.m_ta_id = ta.id;
        delete data.id;
        delete data.jamFormat;

        return data;
      })
    );

    await MJadwalMengajar.createMany(jadwalMengajarData);

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putRombel({ response, request, auth, params: { rombel_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { tingkat, kode, m_jurusan_id, m_user_id, kelompok } = request.post();
    const rules = {
      kode: "required",
    };
    const message = {
      "kode.required": "Kode  harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const jurusan = await MJurusan.query()
      .select("kode", "id")
      .where({ id: m_jurusan_id })
      .first();

    const rombel = await MRombel.query()
      .where({ id: rombel_id })
      .update({
        tingkat,
        nama: m_jurusan_id ? `${tingkat} ${jurusan.kode} ${kode}` : kode,
        m_jurusan_id,
        kelompok,
        m_user_id,
      });

    if (!rombel) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteRombel({ response, request, auth, params: { rombel_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const rombel = await MRombel.query().where({ id: rombel_id }).update({
      dihapus: 1,
    });

    if (!rombel) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getJamMengajar({ response, request, auth, params: { rombel_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    let { hari } = request.get();

    hari = hari ? hari : 1;

    const jamMengajar = await MJamMengajar.query()
      .where({ kode_hari: hari })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .fetch();

    return {
      jamMengajar: jamMengajar,
    };
  }

  async putJamMengajar({
    response,
    request,
    auth,
    params: { jam_mengajar_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { jam_mulai, jam_selesai, istirahat } = request.post();
    const rules = {
      jam_mulai: "required",
      jam_selesai: "required",
    };
    const message = {
      "jam_mulai.required": "Jam dimulai harus diisi",
      "jam_selesai.required": "Jam selesai harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const jamMengajar = await MJamMengajar.query()
      .where({ id: jam_mengajar_id })
      .update({
        jam_mulai: jam_mulai,
        jam_selesai: jam_selesai,
        istirahat: istirahat,
      });

    if (!jamMengajar) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getMataPelajaran({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const mataPelajaran = await MMataPelajaran.query()
      .with("user", (builder) => {
        builder.select("id", "nama");
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const mataPelajaranKelompokA = [];
    const mataPelajaranKelompokB = [];
    const mataPelajaranKelompokC = [];

    const guru = await User.query()
      .select("nama", "id", "whatsapp", "avatar", "gender")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ role: "guru" })
      .fetch();

    await Promise.all(
      mataPelajaran.toJSON().map(async (data) => {
        if (data.kelompok == "A") {
          mataPelajaranKelompokA.push(data);
        } else if (data.kelompok == "B") {
          mataPelajaranKelompokB.push(data);
        } else if (data.kelompok == "C") {
          mataPelajaranKelompokC.push(data);
        }
      })
    );

    return response.ok({
      mataPelajaranKelompokA,
      mataPelajaranKelompokB,
      mataPelajaranKelompokC,
      guru: guru,
    });
  }

  async postMataPelajaran({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { nama, kode, kelompok, m_user_id, kkm } = request.post();
    const rules = {
      nama: "required",
      kode: "required",
      kelompok: "required",
      m_user_id: "required",
      kkm: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "kode.required": "Kode Mapel harus diisi",
      "kelompok.required": "Kelompok harus dipilih",
      "m_user_id.required": "Guru Pengampu harus dipilih",
      "kkm.required": "KKM harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const mataPelajaran = await MMataPelajaran.create({
      nama,
      kode,
      kelompok,
      m_user_id,
      kkm,
      m_ta_id: ta.id,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putMataPelajaran({
    response,
    request,
    auth,
    params: { mata_pelajaran_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { nama, kode, kelompok, m_user_id, kkm } = request.post();
    const rules = {
      nama: "required",
      kode: "required",
      kelompok: "required",
      m_user_id: "required",
      kkm: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "kode.required": "Kode Mapel harus diisi",
      "kelompok.required": "Kelompok harus dipilih",
      "m_user_id.required": "Guru Pengampu harus dipilih",
      "kkm.required": "KKM harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const mataPelajaran = await MMataPelajaran.query()
      .where({ id: mata_pelajaran_id })
      .update({
        nama,
        kode,
        kelompok,
        m_user_id,
        kkm,
      });

    if (!mataPelajaran) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteMataPelajaran({
    response,
    request,
    auth,
    params: { mata_pelajaran_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const jurusan = await MMataPelajaran.query()
      .where({ id: mata_pelajaran_id })
      .update({
        dihapus: 1,
      });

    if (!jurusan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getJadwalMengajar({ response, request, auth }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const mataPelajaran = await MMataPelajaran.query()
      .with("user", (builder) => {
        builder.select("id", "nama").where({ dihapus: 0 });
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    let tingkatRombel = [];

    if (sekolah.tingkat == "SMK" || sekolah.tingkat == "SMA") {
      tingkatRombel = ["X", "XI", "XII"];
    } else if (sekolah.tingkat == "SMP") {
      tingkatRombel = ["VII", "VIII", "IX"];
    } else if (sekolah.tingkat == "SD") {
      tingkatRombel = ["I", "II", "III", "IV", "V", "VI"];
    } else if (sekolah.tingkat == "SLB") {
      tingkatRombel = [
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX",
        "X",
        "XI",
        "XII",
      ];
    }

    const { tingkat, hari } = request.get();

    let tingkatGet;

    if (tingkat) {
      tingkatGet = tingkat;
    } else {
      tingkatGet = tingkatRombel[0];
    }

    const rombelIds = await MRombel.query()
      .where({ tingkat: tingkatGet })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .ids();

    const jamMengajar = await MJamMengajar.query()
      .with("jadwalMengajar", (builder) => {
        builder
          .with("mataPelajaran", (builder) => {
            builder.with("user");
          })
          .with("rombel")
          .whereIn("m_rombel_id", rombelIds);
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ kode_hari: hari })
      .andWhere({ m_ta_id: ta.id })
      .fetch();

    return response.ok({
      tingkatRombel,
      mataPelajaran,
      jamMengajar,
      hari: jamMengajar.toJSON()[0].hari,
      userRole: user.role,
    });
  }

  async getJadwalMengajarPertemuan({ response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const guruIds = await User.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .ids();

    const pertemuan = await MTimeline.query()
      .with("user")
      .with("komen", (builder) => {
        builder.with("user").where({ dihapus: 0 });
      })
      .with("rombel")
      .withCount("tkTimeline as total_absen", (builder) => {
        builder.whereNotNull("waktu_absen");
      })
      .withCount("tkTimeline as total_siswa")
      .withCount("komen as total_komen", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where("tipe", "absen")
      .andWhere(
        "tanggal_pembagian",
        "like",
        `${moment().format("YYYY-MM-DD")}%`
      )
      .whereIn("m_user_id", guruIds)
      .orderBy("id", "desc")
      .fetch();

    return response.ok({ pertemuan });
  }

  //belum validasi
  async putJadwalMengajar({
    response,
    request,
    auth,
    params: { jadwal_mengajar_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const {
      m_mata_pelajaran_id,
      kosongkan,
      tingkat,
      m_rombel_id,
      m_jurusan_id,
    } = request.post();

    let jadwalMengajar;

    if (!kosongkan) {
      const checkKategoriMapel = await MKategoriMapel.query()
        .where({ m_rombel_id })
        .first();

      if (!checkKategoriMapel) {
        await MKategoriMapel.create({
          nama: "Muatan Nasional",
          dihapus: 0,
          m_rombel_id: m_rombel_id,
        });
        await MKategoriMapel.create({
          nama: "Muatan Kewilayahan",
          dihapus: 0,
          m_rombel_id: m_rombel_id,
        });
        await MKategoriMapel.create({
          nama: "Muatan Peminatan Kejurusan",
          dihapus: 0,
          m_rombel_id: m_rombel_id,
        });
      }
    }

    if (kosongkan) {
      const jadwal = await MJadwalMengajar.query()
        .where({ id: jadwal_mengajar_id })
        .first();

      jadwalMengajar = await MJadwalMengajar.query()
        .where({ id: jadwal_mengajar_id })
        .update({
          m_mata_pelajaran_id: null,
          diubah: 1,
        });

      const stillTeaching = await MJadwalMengajar.query()
        .where({ m_mata_pelajaran_id: jadwal.m_mata_pelajaran_id })
        .andWhere({ m_rombel_id: jadwal.m_rombel_id })
        .first();

      if (jadwal.m_rombel_id && jadwal.m_mata_pelajaran_id && !stillTeaching) {
        const kategoriMapel = await MKategoriMapel.query()
          .where({ m_rombel_id: jadwal.m_rombel_id })
          .fetch();

        const checkTkMapel = await TkMapelRapor.query()
          .where({ m_mata_pelajaran_id: jadwal.m_mata_pelajaran_id })
          .whereIn(
            "m_kategori_mapel_id",
            kategoriMapel.toJSON().map((item) => item.id)
          )
          .first();

        if (checkTkMapel) {
          await TkMapelRapor.query()
            .where({ m_kategori_mapel_id: checkTkMapel.m_kategori_mapel_id })
            .andWhere({ m_mata_pelajaran_id: jadwal.m_mata_pelajaran_id })
            .delete();
        }
      }

      return response.ok({
        message: messagePutSuccess,
      });
    } else {
      const jadwalAwal = await MJadwalMengajar.query()
        .where({ id: jadwal_mengajar_id })
        .first();

      const kategoriMapel = await MKategoriMapel.query()
        .where({ m_rombel_id })
        .fetch();

      const checkTkMapel = await TkMapelRapor.query()
        .where({
          m_mata_pelajaran_id:
            jadwalAwal.m_mata_pelajaran_id || m_mata_pelajaran_id,
        })
        .whereIn(
          "m_kategori_mapel_id",
          kategoriMapel.toJSON().map((item) => item.id)
        )
        .first();

      const mapel = await MMataPelajaran.query()
        .where({ id: m_mata_pelajaran_id })
        .first();

      if (!checkTkMapel) {
        await TkMapelRapor.create({
          m_mata_pelajaran_id: m_mata_pelajaran_id,
          nama: mapel.nama,
          kkm2: mapel.kkm,
          m_kategori_mapel_id: kategoriMapel.toJSON()[0].id,
          dihapus: 0,
          urutan: 1,
        });
      } else {
        const tkExist = await TkMapelRapor.query()
          .whereIn(
            "m_kategori_mapel_id",
            kategoriMapel.toJSON().map((item) => item.id)
          )
          .where({ m_mata_pelajaran_id: m_mata_pelajaran_id })
          .first();
        if (tkExist) {
          const stillTeaching = await MJadwalMengajar.query()
            .where({ m_mata_pelajaran_id: jadwalAwal.m_mata_pelajaran_id })
            .andWhere({ m_rombel_id: m_rombel_id })
            .first();
          if (!stillTeaching) {
            await TkMapelRapor.query()
              .where({ m_kategori_mapel_id: checkTkMapel.m_kategori_mapel_id })
              .andWhere({ m_mata_pelajaran_id: jadwalAwal.m_mata_pelajaran_id })
              .delete();
          }
        } else {
          await TkMapelRapor.query()
            .where({ m_kategori_mapel_id: checkTkMapel.m_kategori_mapel_id })
            .andWhere({ m_mata_pelajaran_id: jadwalAwal.m_mata_pelajaran_id })
            .update({
              m_mata_pelajaran_id: m_mata_pelajaran_id,
              m_kategori_mapel_id: checkTkMapel.m_kategori_mapel_id,
              nama: mapel.nama,
              kkm2: mapel.kkm,
            });
        }
      }
      jadwalMengajar = await MJadwalMengajar.query()
        .where({ id: jadwal_mengajar_id })
        .update({
          m_mata_pelajaran_id,
          diubah: 1,
        });
    }

    if (!jadwalMengajar) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    const mataPelajaran = await MMataPelajaran.query()
      .where({ id: m_mata_pelajaran_id })
      .first();

    if (mataPelajaran.kelompok == "C") {
      const check = await MMateri.query()
        .where({ m_mata_pelajaran_id })
        .andWhere({ tingkat })
        .andWhere({ m_jurusan_id })
        .first();

      if (!check) {
        const materi = await MMateri.create({
          tingkat,
          m_jurusan_id,
          m_mata_pelajaran_id,
        });

        await TkMateriRombel.create({
          m_materi_id: materi.id,
          m_rombel_id,
        });
      } else {
        const checkTk = await TkMateriRombel.query()
          .where({ m_materi_id: check.id })
          .andWhere({ m_rombel_id })
          .first();
        await TkMateriRombel.create({
          m_materi_id: check.id,
          m_rombel_id,
        });
      }
    } else {
      const check = await MMateri.query()
        .where({ m_mata_pelajaran_id })
        .andWhere({ tingkat })
        .first();

      if (!check) {
        const materi = await MMateri.create({
          tingkat,
          m_mata_pelajaran_id,
        });

        await TkMateriRombel.create({
          m_materi_id: materi.id,
          m_rombel_id,
        });
      } else {
        const checkTk = await TkMateriRombel.query()
          .where({ m_materi_id: check.id })
          .andWhere({ m_rombel_id })
          .first();
        if (!checkTk) {
          await TkMateriRombel.create({
            m_materi_id: check.id,
            m_rombel_id,
          });
        }
      }
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getBlog({ response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { limit } = request.get();

    let post;

    if (limit) {
      post = await MPost.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .limit(limit)
        .fetch();
    } else {
      post = await MPost.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .fetch();
    }

    return response.ok({
      post: post,
    });
  }

  async getPost({ response, request, auth }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { limit } = request.get();

    let post;

    if (limit) {
      post = await MPost.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .limit(limit)
        .fetch();
    } else {
      post = await MPost.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .fetch();
    }

    return response.ok({
      post: post,
    });
  }

  async detailBlog({ response, request, params: { post_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const post = await MPost.query()
      .with("tkPost")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ id: post_id })
      .andWhere({ dihapus: 0 })
      .first();

    const kategori = await MKategori.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    return response.ok({
      post: post,
      kategori: kategori,
    });
  }

  async detailPost({ response, request, auth, params: { post_id } }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const post = await MPost.query()
      .with("tkPost")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ id: post_id })
      .andWhere({ m_user_id: user.id })
      .andWhere({ dihapus: 0 })
      .first();

    const kategori = await MKategori.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    return response.ok({
      post: post,
      kategori: kategori,
    });
  }

  async postPost({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { judul, konten, banner, m_kategori_id, simpan } = request.post();
    const rules = {
      judul: "required",
      konten: "required",
      banner: "required",
    };
    const message = {
      "judul.required": "Judul harus diisi",
      "banner.required": "Banner harus diisi",
      "konten.required": "Konten harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const slug = `${slugify(judul)}-${new Date().getTime()}`;

    let post;

    if (simpan) {
      post = await MPost.create({
        judul,
        slug,
        konten: konten,
        banner,
        disembunyikan: 1,
        dihapus: 0,
        m_user_id: user.id,
        m_sekolah_id: sekolah.id,
      });
    } else {
      post = await MPost.create({
        judul,
        slug,
        konten: konten,
        banner,
        disembunyikan: 0,
        dihapus: 0,
        m_user_id: user.id,
        m_sekolah_id: sekolah.id,
      });
    }

    let tkPostData = [];

    if (m_kategori_id) {
      await Promise.all(
        m_kategori_id.map((data) => {
          tkPostData.push({
            m_kategori_id: data,
            m_post_id: post.id,
          });
        })
      );

      await TkPost.createMany(tkPostData);
    }

    if (simpan) {
      return response.ok({
        message: messageSaveSuccess,
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPost({ response, request, auth, params: { post_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { judul, konten, banner, m_kategori_id, disembunyikan } =
      request.post();
    const rules = {
      judul: "required",
      konten: "required",
      banner: "required",
    };
    const message = {
      "judul.required": "Judul harus diisi",
      "banner.required": "Banner harus diisi",
      "konten.required": "Konten harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    let post;

    if (disembunyikan) {
      post = await MPost.query().where({ id: post_id }).update({
        judul,
        konten: konten,
        banner,
        disembunyikan: 1,
        dihapus: 0,
      });
    } else {
      post = await MPost.query().where({ id: post_id }).update({
        judul,
        konten: konten,
        banner,
        disembunyikan: 0,
        dihapus: 0,
      });
    }

    if (!post) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    let tkPostData = [];

    if (m_kategori_id) {
      await Promise.all(
        m_kategori_id.map((data) => {
          tkPostData.push({
            m_kategori_id: data,
            m_post_id: post.id,
          });
        })
      );

      await TkPost.createMany(tkPostData);
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePost({ response, request, auth, params: { post_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const post = await MPost.query().where({ id: post_id }).update({
      dihapus: 1,
    });

    if (!post) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getKategori({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const kategori = await MKategori.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    return response.ok({
      kategori: kategori,
    });
  }

  // Belum Validasi
  async postKategori({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { judul, konten, banner } = request.post();

    const slug = slugify(judul);

    const post = await MPost.create({
      judul,
      slug,
      konten,
      banner,
      m_user_id: user.id,
      m_sekolah_id: sekolah.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putKategori({ response, request, auth, params: { post_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { judul, konten } = request.post();

    const post = await MPost.query().where({ id: post_id }).update({
      judul,
      konten,
      banner,
    });

    if (!post) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteKategori({ response, request, auth, params: { post_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const rombel = await MRombel.query().where({ id: post_id }).update({
      dihapus: 1,
    });

    if (!rombel) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  // Belum Validasi
  async postAnggotaRombel({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { tingkat, kode, m_jurusan_id, m_user_id } = request.post();

    const jurusan = await MJurusan.query()
      .select("kode", "id")
      .where({ id: m_jurusan_id })
      .first();

    const rombel = await MRombel.create({
      tingkat,
      nama: `${tingkat} ${jurusan.kode} ${kode}`,
      m_jurusan_id,
      m_sekolah_id: sekolah.id,
      m_ta_id: ta.id,
      m_user_id,
      dihapus: 0,
    });

    const jamMengajar = await MJamMengajar.query()
      .select("id")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .fetch();

    const jadwalMengajarData = await Promise.all(
      jamMengajar.toJSON().map(async (data) => {
        data.m_mata_pelajaran_id = null;
        data.m_rombel_id = rombel.id;
        data.m_jam_mengajar_id = data.id;
        data.m_sekolah_id = sekolah.id;
        data.m_ta_id = ta.id;
        delete data.id;

        return data;
      })
    );

    await MJadwalMengajar.createMany(jadwalMengajarData);

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async importAnggotaRombelServices(filelocation, sekolah, m_rombel_id) {
    var workbook = new Excel.Workbook();

    try {
      workbook = await workbook.xlsx.readFile(filelocation);
    } catch (err) {
      return "Format File Tidak Sesuai";
    }

    let explanation = workbook.getWorksheet("Sheet1");

    if (!explanation) {
      return "Format File Tidak Sesuai";
    }

    let colComment = explanation.getColumn("A");
    if (!colComment) {
      return "Format File Tidak Sesuai";
    }

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 6) {
        data.push({
          nama: explanation.getCell("B" + rowNumber).value,
          whatsapp: explanation.getCell("C" + rowNumber).value,
          // email:
          //   explanation.getCell("D" + rowNumber).value == null
          //     ? ""
          //     : typeof explanation.getCell("D" + rowNumber).value == "object"
          //     ? JSON.parse(explanation.getCell("D" + rowNumber).value).text
          //     : explanation.getCell("D" + rowNumber).value,
          gender: explanation.getCell("E" + rowNumber).value,
          role: explanation.getCell("F" + rowNumber).value,
          password: explanation.getCell("G" + rowNumber).value,
        });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        const checkUser = await User.query()
          .where({ whatsapp: d.whatsapp })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        if (!checkUser) {
          const createUser = await User.create({
            nama: d.nama,
            whatsapp: d.whatsapp,
            gender: d.gender,
            // email: d.email ? d.email : "",
            password: d.password || "smarteschool",
            role: "siswa",
            m_sekolah_id: sekolah.id,
            dihapus: 0,
          });

          await MAnggotaRombel.create({
            role: d.role,
            dihapus: 0,
            m_user_id: createUser.toJSON().id,
            m_rombel_id: m_rombel_id,
          });

          // await WhatsAppService.sendMessage(
          //   d.whatsapp,
          //   `Halo, berikut akun Smarteschool ${d.nama} dengan password *${d.password || 'smarteschool'}*. Berikut link akses Smarteschool: \n ${domain} \n\nInformasi ini bersifat *RAHASIA*`
          // );

          return;
        }
        await User.query()
          .where({ id: checkUser.toJSON().id })
          .update({
            nama: d.nama,
            dihapus: 0,
            password: await Hash.make(d.password || "smarteschool"),
          });

        const checkAnggotaRombel = await MAnggotaRombel.query()
          .andWhere({ m_user_id: checkUser.toJSON().id })
          .andWhere({ m_rombel_id: m_rombel_id })
          .first();

        if (checkAnggotaRombel) {
          await MAnggotaRombel.query()
            .andWhere({ m_user_id: checkUser.toJSON().id })
            .andWhere({ m_rombel_id: m_rombel_id })
            .update({ dihapus: 0, role: d.role });
          return {
            message: `${d.nama} sudah terdaftar`,
            error: true,
          };
        }

        await MAnggotaRombel.create({
          role: d.role,
          dihapus: 0,
          m_user_id: checkUser.toJSON().id,
          m_rombel_id: m_rombel_id,
        });

        return;
      })
    );

    return "import Siswa Berhasil";
  }

  async importAnggotaRombel({ request, response }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    const { m_rombel_id } = request.post();

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    const message = await this.importAnggotaRombelServices(
      `tmp/uploads/${fname}`,
      sekolah,
      m_rombel_id
    );

    if (message == "Format File Tidak Sesuai") {
      return response.notFound({
        message,
      });
    }
    return response.ok({
      message,
    });
  }

  async importAnggotaRombelPasswordServices(
    filelocation,
    sekolah,
    m_rombel_id
  ) {
    var workbook = new Excel.Workbook();

    try {
      workbook = await workbook.xlsx.readFile(filelocation);
    } catch (err) {
      return "Format File Tidak Sesuai";
    }

    let explanation = workbook.getWorksheet("Sheet1");

    if (!explanation) {
      return "Format File Tidak Sesuai";
    }

    let colComment = explanation.getColumn("A");
    if (!colComment) {
      return "Format File Tidak Sesuai";
    }

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 6) {
        data.push({
          nama: explanation.getCell("B" + rowNumber).value,
          whatsapp: explanation.getCell("C" + rowNumber).value,
          email:
            explanation.getCell("D" + rowNumber).value == null
              ? ""
              : typeof explanation.getCell("D" + rowNumber).value == "object"
              ? JSON.parse(explanation.getCell("D" + rowNumber).value).text
              : explanation.getCell("D" + rowNumber).value,
          gender: explanation.getCell("E" + rowNumber).value,
          role: explanation.getCell("F" + rowNumber).value,
          password: explanation.getCell("G " + rowNumber).value,
          wa_ayah: explanation.getCell("H" + rowNumber).value,
        });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        const checkUser = await User.query()
          .where({ whatsapp: d.whatsapp })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        if (!checkUser) {
          const createUser = await User.create({
            nama: d.nama,
            whatsapp: d.whatsapp,
            gender: d.gender,
            wa_ayah: d.wa_ayah,
            email: d.email ? d.email : "",
            password: `${d.password}`,
            role: "siswa",
            m_sekolah_id: sekolah.id,
            dihapus: 0,
          });

          await MAnggotaRombel.create({
            role: d.role,
            dihapus: 0,
            m_user_id: createUser.toJSON().id,
            m_rombel_id: m_rombel_id,
          });

          // await WhatsAppService.sendMessage(
          //   d.whatsapp,
          //   `Halo, berikut akun Smarteschool ${d.nama} dengan password *${p*assword}. Berikut link akses Smarteschool: \n ${domain} \n\nInformasi ini bersifat *RAHASIA*`
          // );

          return;
        }
        await User.query()
          .where({ id: checkUser.toJSON().id })
          .update({ dihapus: 0, password: await Hash.make(`${d.password}`) });

        const checkAnggotaRombel = await MAnggotaRombel.query()
          .andWhere({ m_user_id: checkUser.toJSON().id })
          .andWhere({ m_rombel_id: m_rombel_id })
          .first();

        if (checkAnggotaRombel) {
          await MAnggotaRombel.query()
            .andWhere({ m_user_id: checkUser.toJSON().id })
            .andWhere({ m_rombel_id: m_rombel_id })
            .update({ dihapus: 0, role: d.role });
          return {
            message: `${d.nama} sudah terdaftar`,
            error: true,
          };
        }

        await MAnggotaRombel.create({
          role: d.role,
          dihapus: 0,
          m_user_id: checkUser.toJSON().id,
          m_rombel_id: m_rombel_id,
        });

        return;
      })
    );

    return "import Siswa Berhasil";
  }

  async importAnggotaRombelPassword({ request, response }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    const { m_rombel_id } = request.post();

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    const message = await this.importAnggotaRombelPasswordServices(
      `tmp/uploads/${fname}`,
      sekolah,
      m_rombel_id
    );

    if (message == "Format File Tidak Sesuai") {
      return response.notFound({
        message,
      });
    }
    return response.ok({
      message,
    });
  }

  async deleteAnggotaRombel({
    response,
    request,
    auth,
    params: { rombel_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const rombel = await MRombel.query().where({ id: rombel_id }).update({
      dihapus: 1,
    });

    if (!rombel) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getMateri({ response, request, auth }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    if (user.role == "siswa") {
      const rombelIds = await MRombel.query().where({ m_ta_id: ta.id }).ids();

      const rombelIdsAnggota = await MAnggotaRombel.query()
        .whereIn("m_rombel_id", rombelIds)
        .andWhere({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .pluck("m_rombel_id");

      const materiIds = await TkMateriRombel.query()
        .whereIn("m_rombel_id", rombelIdsAnggota)
        .pluck("m_materi_id");

      const materi = await MMateri.query()
        .with("jurusan")
        .with("mataPelajaran", (builder) => {
          builder.with("user");
        })
        .withCount("bab", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .whereIn("id", materiIds)
        .andWhere({ dihapus: 0 })
        .fetch();

      // const materiLainnya = await MMateri.query()
      //   .with("user")
      //   .with("sekolah")
      //   .withCount("bab", (builder) => {
      //     builder.where({ dihapus: 0 });
      //   })
      //   .where({ m_sekolah_id: sekolah.id })
      //   .andWhere({ dihapus: 0 })
      //   .fetch();

      return response.ok({
        materi,
        // materiLainnya,
      });
    }

    const mataPelajaranIds = await MMataPelajaran.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_user_id: user.id })
      .andWhere({ dihapus: 0 })
      .ids();

    const materi = await MMateri.query()
      .with("jurusan")
      .with("mataPelajaran")
      .withCount("bab", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .withCount("rekap as total", (builder) => {
        builder.where({ dihapus: 0 }).andWhere({ m_ta_id: ta.id });
      })
      .whereIn("m_mata_pelajaran_id", mataPelajaranIds)
      .where({ dihapus: 0 })
      .fetch();

    // const materiLainnya = await MMateri.query()
    //   .with("user")
    //   .with("sekolah")
    //   .withCount("bab", (builder) => {
    //     builder.where({ dihapus: 0 });
    //   })
    //   .where({ m_sekolah_id: sekolah.id })
    //   .andWhere({ dihapus: 0 })
    //   .fetch();

    return response.ok({
      materi,
      // materiLainnya,
    });
  }

  async detailMateri({ response, request, auth, params: { materi_id } }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const materi = await MMateri.query()
      .with("jurusan")
      .with("mataPelajaran")
      .with("user")
      .with("sekolah")
      .where({ id: materi_id })
      .first();

    const bab = await MBab.query()
      .with("topik", (builder) => {
        builder
          .with("materiKesimpulan", (builder) => {
            builder.where({ m_user_id: user.id });
          })
          .where({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_materi_id: materi_id })
      .fetch();

    let looping = true;

    const babData = [];

    await Promise.all(
      bab.toJSON().map(async (d) => {
        d.topik.map(async (e, idx) => {
          if (!e.materiKesimpulan) {
            if (idx == 0) {
              e.lock = false;
            } else if (looping == false) {
              e.lock = false;
              looping = true;
            } else {
              e.lock = true;
            }
          } else {
            e.lock = false;
            looping = false;
          }
        });

        babData.push(d);
      })
    );

    return response.ok({
      materi,
      bab: babData,
    });
  }

  async postMateri({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama } = request.post();
    const rules = {
      nama: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    await MMateri.create({
      nama,
      m_user_id: user.id,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putMateri({ response, request, auth, params: { materi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { nama } = request.post();
    const rules = {
      nama: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const materi = await MMateri.query().where({ id: materi_id }).update({
      nama,
    });

    if (!materi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteMateri({ response, request, auth, params: { materi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const materi = await MMateri.query().where({ id: materi_id }).update({
      dihapus: 1,
    });

    if (!materi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postMateriKesimpulan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { waktu_mulai, m_topik_id } = request.post();

    const check = await TkMateriKesimpulan.query()
      .where({ m_user_id: user.id })
      .andWhere({ m_topik_id: m_topik_id })
      .first();

    if (!check) {
      const kesimpulan = await TkMateriKesimpulan.create({
        waktu_mulai,
        m_topik_id,
        m_user_id: user.id,
        dibaca: 0,
      });

      // await WhatsAppService.sendMessage(
      //   user.whatsapp,
      //   `Halo, kesimpulan mu sudah berhasil tersimpan. Tunggu gurumu mengoreksinya yaa!`
      // );
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async putMateriKesimpulan({
    response,
    request,
    auth,
    params: { materi_kesimpulan_id },
  }) {
    const domain = request.headers().origin;

    const user = await auth.getUser();

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { kesimpulan, waktu_mulai, waktu_selesai, m_topik_id } =
      request.post();
    const materiKesimpulan = await TkMateriKesimpulan.query()
      .where({ m_topik_id: m_topik_id })
      .andWhere({ m_user_id: user.id })
      .update({
        kesimpulan: kesimpulan ? htmlEscaper.escape(kesimpulan) : "",
        waktu_selesai,
      });

    if (!materiKesimpulan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async detailBab({ response, request, auth, params: { bab_id } }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const bab = await MBab.query().where({ id: bab_id }).first();

    const topikIds = await MTopik.query()
      .select("id", "kuis", "m_bab_id")
      .with("materiKesimpulan", (builder) => {
        builder.where({ m_user_id: user.id });
      })
      .where({ m_bab_id: bab.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    let looping = true;
    const topikIdsData = [];

    await Promise.all(
      topikIds.toJSON().map(async (d, idx) => {
        if (!d.materiKesimpulan) {
          if (idx == 0) {
            d.lock = false;
          } else if (looping == false) {
            d.lock = false;
            looping = true;
          } else {
            d.lock = true;
          }
        } else {
          d.lock = false;
          looping = false;
        }

        topikIdsData.push(d);
      })
    );

    return response.ok({
      bab,
      topikIds: topikIdsData,
    });
  }

  async postBab({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { judul, m_materi_id } = request.post();
    const rules = {
      judul: "required",
    };
    const message = {
      "judul.required": "Judul harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const bab = await MBab.create({
      judul,
      m_materi_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putBab({ response, request, auth, params: { bab_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { judul } = request.post();
    const rules = {
      judul: "required",
    };
    const message = {
      "judul.required": "Judul harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const bab = await MBab.query().where({ id: bab_id }).update({
      judul,
    });

    if (!bab) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteBab({ response, request, auth, params: { bab_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const bab = await MBab.query().where({ id: bab_id }).update({
      dihapus: 1,
    });

    if (!bab) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getPrestasi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let { search, page, tingkat, nama_siswa } = request.get();

    page = page ? parseInt(page) : 1;

    let prestasi;

    if (search) {
      const userIds = await User.query()
        .where("nama", "like", `%${search}%`)
        .andWhere({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .limit(25)
        .ids();

      if (tingkat) {
        prestasi = await MPrestasi.query()
          .with("user", (builder) => {
            builder.select("id", "nama");
          })
          .with("tingkatPrestasi")
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .andWhere({ tingkat })
          .whereIn("m_user_id", userIds)
          .paginate(page, 25);
      } else {
        prestasi = await MPrestasi.query()
          .with("user", (builder) => {
            builder.select("id", "nama");
          })
          .with("tingkatPrestasi")
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .whereIn("m_user_id", userIds)
          .paginate(page, 25);
      }
    } else {
      if (tingkat) {
        prestasi = await MPrestasi.query()
          .with("user", (builder) => {
            builder.select("id", "nama");
          })
          .with("tingkatPrestasi")
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .andWhere({ tingkat })
          .paginate(page, 25);
      } else {
        prestasi = await MPrestasi.query()
          .with("user", (builder) => {
            builder.select("id", "nama");
          })
          .with("tingkatPrestasi")
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .paginate(page, 25);
      }
    }

    let tingkatData = [
      { label: "Internasional", value: "internasional" },
      { label: "Nasional", value: "nasional" },
      { label: "Provinsi", value: "provinsi" },
      { label: "Kabupaten/Kota", value: "kabupaten" },
    ];

    let user;

    if (nama_siswa) {
      user = await User.query()
        .select("id", "nama")
        .where("nama", "like", `%${nama_siswa}%`)
        .where({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .limit(25)
        .fetch();
    } else {
      user = await User.query()
        .select("id", "nama")
        .where({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .limit(25)
        .fetch();
    }

    return response.ok({
      prestasi,
      tingkat: tingkatData,
      user: user,
    });
  }

  async getPrestasi1({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let { search, page, tingkat, nama_siswa } = request.get();

    page = page ? parseInt(page) : 1;

    let prestasi;

    if (search) {
      const userIds = await User.query()
        .where("nama", "like", `%${search}%`)
        .andWhere({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .limit(25)
        .ids();

      if (tingkat) {
        prestasi = await MPrestasi.query()
          .with("user", (builder) => {
            builder.select("id", "nama");
          })
          .with("tingkatPrestasi")
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .andWhere({ tingkat })
          .whereIn("m_user_id", userIds)
          .paginate(page, 25);
      } else {
        prestasi = await MPrestasi.query()
          .with("user", (builder) => {
            builder.select("id", "nama");
          })
          .with("tingkatPrestasi")
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .whereIn("m_user_id", userIds)
          .paginate(page, 25);
      }
    } else {
      if (tingkat) {
        prestasi = await MPrestasi.query()
          .with("user", (builder) => {
            builder.select("id", "nama");
          })
          .with("tingkatPrestasi")
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .andWhere({ tingkat })
          .paginate(page, 25);
      } else {
        prestasi = await MPrestasi.query()
          .with("user", (builder) => {
            builder.select("id", "nama");
          })
          .with("tingkatPrestasi")
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .paginate(page, 25);
      }
    }

    const tingkatData = await MPenghargaan.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    let user;

    if (nama_siswa) {
      user = await User.query()
        .select("id", "nama")
        .where("nama", "like", `%${nama_siswa}%`)
        .where({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .limit(25)
        .fetch();
    } else {
      user = await User.query()
        .select("id", "nama")
        .where({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .limit(25)
        .fetch();
    }

    return response.ok({
      prestasi,
      tingkat: tingkatData,
      user: user,
    });
  }

  async postPrestasi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const { nama, tingkat, peringkat, tempat, tahun, m_user_id } =
      request.post();
    const rules = {
      nama: "required",
      tingkat: "required",
      peringkat: "required",
      tempat: "required",
      tahun: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "peringkat.required": "Peringkat harus dipilih",
      "tingkat.required": "Tingkat harus diisi",
      "tempat.required": "Tempat harus diisi",
      "tahun.required": "Tahun harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    await MPrestasi.create({
      nama,
      tingkat,
      peringkat,
      tempat,
      tahun,
      dihapus: 0,
      m_user_id: m_user_id,
      m_sekolah_id: sekolah.id,
      m_ta_id: ta.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPrestasi({ response, request, auth, params: { prestasi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { nama, tingkat, peringkat, tempat, tahun, m_user_id } =
      request.post();

    const rules = {
      nama: "required",
      tingkat: "required",
      peringkat: "required",
      tempat: "required",
      tahun: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "peringkat.required": "Peringkat harus dipilih",
      "tingkat.required": "Tingkat harus diisi",
      "tempat.required": "Tempat harus diisi",
      "tahun.required": "Tahun harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const prestasi = await MPrestasi.query().where({ id: prestasi_id }).update({
      nama,
      tingkat,
      peringkat,
      tempat,
      tahun,
      m_user_id,
    });

    if (!prestasi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePrestasi({ response, request, auth, params: { prestasi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const prestasi = await MPrestasi.query().where({ id: prestasi_id }).update({
      dihapus: 1,
    });

    if (!prestasi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getTopik({ response, request, auth }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const mataPelajaranIds = await MMataPelajaran.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_user_id: user.id })
      .andWhere({ dihapus: 0 })
      .ids();

    const materi = await MMateri.query()
      .with("jurusan")
      .with("mataPelajaran")
      .whereIn("m_mata_pelajaran_id", mataPelajaranIds)
      .fetch();

    return response.ok({
      materi,
    });
  }

  async detailTopik({ response, request, auth, params: { topik_id } }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { analisis, m_jadwal_mengajar_id } = request.get();

    if (analisis) {
      const jadwalMengajar = await MJadwalMengajar.query()
        .where({ id: m_jadwal_mengajar_id })
        .first();

      const userIds = await MAnggotaRombel.query()
        .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
        .andWhere({ dihapus: 0 })
        .pluck("m_user_id");

      const user = await User.query()
        .with("kesimpulan", (builder) => {
          builder.where({ m_topik_id: topik_id });
        })
        .whereIn("id", userIds)
        .fetch();

      const topik = await MTopik.query()
        .with("bab")
        .withCount("materiKesimpulan as sudahBaca", (builder) => {
          builder.whereIn("m_user_id", userIds).whereNotNull("kesimpulan");
        })
        .where({ id: topik_id })
        .first();

      return response.ok({
        user: user,
        topik: topik,
      });
    }

    const topik = await MTopik.query()
      .with("soalKuis", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .with("materiKesimpulan", (builder) => {
        builder.where({ m_user_id: user.id });
      })
      .where({ id: topik_id })
      .andWhere({ dihapus: 0 })
      .first();

    return response.ok({
      topik,
    });
  }

  // Belum Validasi tidak perlu
  async postTopik({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const { kuis, m_bab_id } = request.post();

    const topik = await MTopik.create({
      judul: "Judul Topik",
      kuis,
      m_bab_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
      topik_id: topik.id,
    });
  }

  async putTopik({ response, request, auth, params: { topik_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { judul, konten, lampiran, link } = request.post();
    const topik = await MTopik.query()
      .where({ id: topik_id })
      .update({
        judul,
        konten: konten ? htmlEscaper.escape(konten) : "",
        lampiran: lampiran.toString(),
        link: link.toString(),
      });

    if (!topik) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteTopik({ response, request, auth, params: { topik_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const topik = await MTopik.query().where({ id: topik_id }).update({
      dihapus: 1,
    });

    if (!topik) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getSoalKuis({ response, request, auth }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const mataPelajaranIds = await MMataPelajaran.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_user_id: user.id })
      .andWhere({ dihapus: 0 })
      .ids();

    const materi = await MMateri.query()
      .with("jurusan")
      .with("mataPelajaran")
      .whereIn("m_mata_pelajaran_id", mataPelajaranIds)
      .fetch();

    return response.ok({
      materi,
    });
  }

  async detailSoalKuis({ response, request, auth, params: { topik_id } }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const topik = await MTopik.query()
      .where({ id: topik_id })
      .andWhere({ dihapus: 0 })
      .first();

    return response.ok({
      topik,
    });
  }

  //belum validasi
  async postSoalKuis({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      pertanyaan,
      pg_a,
      pg_b,
      pg_c,
      pg_d,
      pg_e,
      pg_kj,
      pg_poin,
      rubrik_kj,
      esai,
      pembahasan,
      m_topik_id,
    } = request.post();

    if (esai == 1) {
      await MSoalKuis.create({
        pertanyaan,
        rubrik_kj: JSON.stringify(rubrik_kj),
        esai: 1,
        pembahasan,
        m_topik_id,
        dihapus: 0,
      });
    } else {
      await MSoalKuis.create({
        pertanyaan,
        pg_a,
        pg_b,
        pg_c,
        pg_d,
        pg_e,
        pg_kj,
        pg_poin,
        esai: 0,
        pembahasan,
        m_topik_id,
        dihapus: 0,
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putSoalKuis({ response, request, auth, params: { soal_kuis_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      pertanyaan,
      pg_a,
      pg_b,
      pg_c,
      pg_d,
      pg_e,
      pg_kj,
      pg_poin,
      rubrik_kj,
      pembahasan,
    } = request.post();

    const soalKuis = await MSoalKuis.query()
      .where({ id: soal_kuis_id })
      .first();

    if (!soalKuis) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    if (soalKuis.esai == 1) {
      await MSoalKuis.query()
        .where({ id: soal_kuis_id })
        .update({
          pertanyaan,
          rubrik_kj: JSON.stringify(rubrik_kj),
          esai: 1,
          pembahasan,
        });
    } else {
      await MSoalKuis.query().where({ id: soal_kuis_id }).update({
        pertanyaan,
        pg_a,
        pg_b,
        pg_c,
        pg_d,
        pg_e,
        pg_kj,
        pg_poin,
        esai: 0,
        pembahasan,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteSoalKuis({ response, request, auth, params: { soal_kuis_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const topik = await MSoalKuis.query().where({ id: soal_kuis_id }).update({
      dihapus: 1,
    });

    if (!topik) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getTugas({ response, request, auth }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { m_jadwal_mengajar_id, hari_ini, jam_saat_ini } = request.get();

    if (user.role == "siswa") {
      return response.ok({
        message: "siswa",
      });
    }

    const jadwalMengajar = await MJadwalMengajar.query()
      .with("rombel")
      .where({ id: m_jadwal_mengajar_id })
      .first();

    const rombelIds = await MJadwalMengajar.query()
      .where({ m_mata_pelajaran_id: jadwalMengajar.m_mata_pelajaran_id })
      .pluck("m_rombel_id");

    let materi = await MMateri.query()
      .with("materiRombel", (builder) => {
        builder
          .with("rombel", (builder) => {
            builder.where({ dihapus: 0 });
          })
          .whereIn("m_rombel_id", rombelIds);
      })
      .where({ tingkat: jadwalMengajar.toJSON().rombel.tingkat })
      .andWhere({
        m_mata_pelajaran_id: jadwalMengajar.toJSON().m_mata_pelajaran_id,
      })
      .andWhere({
        m_jurusan_id: jadwalMengajar.toJSON().rombel.m_jurusan_id,
      })
      .first();

    if (!materi) {
      materi = await MMateri.query()
        .with("materiRombel", (builder) => {
          builder
            .with("rombel", (builder) => {
              builder.where({ dihapus: 0 });
            })
            .whereIn("m_rombel_id", rombelIds);
        })
        .where({ tingkat: jadwalMengajar.toJSON().rombel.tingkat })
        .andWhere({
          m_mata_pelajaran_id: jadwalMengajar.toJSON().m_mata_pelajaran_id,
        })
        .first();
    }

    const tugasIds = await MTugas.query()
      .where({ dihapus: 0 })
      .andWhere({ m_user_id: user.id })
      .ids();

    const timeline1 = await MTimeline.query()
      .with("tugas", (builder) => {
        builder.with("timeline", (builder) => {
          builder.with("tkTimeline").with("rombel");
        });
      })
      .with("materi")
      .withCount("komen as total_komen", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .withCount("tkTimeline as total_respon", (builder) => {
        builder.whereNotNull("waktu_pengumpulan");
      })
      .withCount("tkTimeline as total_siswa")
      .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
      .andWhere({ m_user_id: user.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ tipe: "tugas" })
      .whereIn("m_tugas_id", tugasIds)
      .whereNull("m_mata_pelajaran_id")
      .orderBy("id", "desc")
      .fetch();

    const timeline2 = await MTimeline.query()
      .with("tugas", (builder) => {
        builder.with("timeline", (builder) => {
          builder.with("tkTimeline").with("rombel");
        });
      })
      .with("materi")
      .withCount("komen as total_komen", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .withCount("tkTimeline as total_respon", (builder) => {
        builder.whereNotNull("waktu_pengumpulan");
      })
      .withCount("tkTimeline as total_siswa")
      .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
      .andWhere({ m_user_id: user.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ tipe: "tugas" })
      .andWhere({ m_mata_pelajaran_id: jadwalMengajar.m_mata_pelajaran_id })
      .whereIn("m_tugas_id", tugasIds)
      .whereNotNull("m_mata_pelajaran_id")
      .orderBy("id", "desc")
      .fetch();

    const timelineTugas = [...timeline2.toJSON(), ...timeline1.toJSON()];

    const tugasSaatIni = [];
    const tugasTerjadwal = [];
    const tugasSelesai = [];
    const tugasTerperiksa = [];
    const tugasDraf = [];

    await Promise.all(
      timelineTugas.map(async (d) => {
        if (d.tugas) {
          if (d.tugas.draft) {
            tugasDraf.push(d);
          } else if (
            moment(d.tugas.tanggal_pembagian).format("YYYY-MM-DD") <=
              hari_ini &&
            moment(d.tugas.tanggal_pengumpulan).format("YYYY-MM-DD") >= hari_ini
          ) {
            tugasSaatIni.push(d);
          } else if (
            moment(d.tugas.tanggal_pembagian).format("YYYY-MM-DD") >=
              hari_ini &&
            moment(d.tugas.waktu_pembagian).format("HH:mm") >= jam_saat_ini
          ) {
            tugasTerjadwal.push(d);
          } else if (
            moment(d.tugas.tanggal_pengumpulan).format("YYYY-MM-DD") <= hari_ini
          ) {
            tugasSelesai.push(d);
          }
        }
      })
    );

    return response.ok({
      materi,
      tugasSaatIni,
      tugasTerjadwal,
      tugasSelesai,
      tugasTerperiksa,
      tugasDraf,
    });
  }

  // Belum Validasi
  async postTugas({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      m_jadwal_mengajar_id,
      judul,
      instruksi,
      tanggal_pembagian,
      waktu_pembagian,
      tanggal_pengumpulan,
      waktu_pengumpulan,
      kkm,
      lampiran,
      link,
      draft,
      list_anggota,
      list_rombel,
      materi = [],
      soal = [],
    } = request.post();

    const tanggal = moment(tanggal_pembagian).format(`DD`);
    const bulan = moment(tanggal_pembagian).format(`M`);
    const waktu = `${tanggal_pembagian} ${waktu_pembagian}`;
    const jam = moment(waktu).format(`H`);
    const menit = moment(waktu).format(`mm`);

    const jadwalMengajar = await MJadwalMengajar.query()
      .where({ id: m_jadwal_mengajar_id })
      .first();

    const mapel = await MMataPelajaran.query()
      .where({ id: jadwalMengajar.m_mata_pelajaran_id })
      .first();

    const tugas = await MTugas.create({
      judul,
      instruksi: htmlEscaper.escape(instruksi),
      tanggal_pembagian: tanggal_pembagian
        ? moment(tanggal_pembagian, "YYYY-MM-DD").format("YYYY-MM-DD")
        : tanggal_pembagian,
      waktu_pembagian,
      tanggal_pengumpulan: tanggal_pengumpulan
        ? moment(tanggal_pengumpulan, "YYYY-MM-DD").format("YYYY-MM-DD")
        : tanggal_pengumpulan,
      waktu_pengumpulan,
      kkm,
      lampiran: lampiran.toString(),
      link: link.toString(),
      draft,
      dihapus: 0,
      m_user_id: user.id,
    });

    if (soal.length) {
      const soalIds = await Promise.all(
        soal.map(async (d) => {
          const soal = await MSoalUjian.create({
            kd: d.kd,
            kd_konten_materi: d.kd_konten_materi,
            level_kognitif: d.level_kognitif,
            bentuk: d.bentuk,
            akm_konten_materi: d.akm_konten_materi,
            akm_konteks_materi: d.akm_konteks_materi,
            akm_proses_kognitif: d.akm_proses_kognitif,
            audio: d.audio,
            pertanyaan: d.pertanyaan ? htmlEscaper.escape(d.pertanyaan) : "",
            jawaban_a: d.jawaban_a ? htmlEscaper.escape(d.jawaban_a) : "",
            jawaban_b: d.jawaban_b ? htmlEscaper.escape(d.jawaban_b) : "",
            jawaban_c: d.jawaban_c ? htmlEscaper.escape(d.jawaban_c) : "",
            jawaban_d: d.jawaban_d ? htmlEscaper.escape(d.jawaban_d) : "",
            jawaban_e: d.jawaban_e ? htmlEscaper.escape(d.jawaban_e) : "",
            kj_pg: d.kj_pg,
            kj_uraian: d.kj_uraian,
            jawaban_pg_kompleks: d.jawaban_pg_kompleks,
            pilihan_menjodohkan: d.pilihan_menjodohkan,
            soal_menjodohkan: d.soal_menjodohkan,
            opsi_a_uraian: d.opsi_a_uraian,
            opsi_b_uraian: d.opsi_b_uraian,
            rubrik_kj: JSON.stringify(d.rubrik_kj),
            pembahasan: d.pembahasan ? htmlEscaper.escape(d.pembahasan) : "",
            nilai_soal: d.nilai_soal,
            m_user_id: user.id,
            dihapus: 0,
          });
          return { m_soal_ujian_id: soal.id, m_tugas_id: tugas.id, dihapus: 0 };
        })
      );
      await TkSoalTugas.createMany(soalIds);
    }

    if (tugas) {
      let timeline;

      if (list_anggota.length) {
        timeline = await MTimeline.create({
          m_user_id: user.id,
          m_rombel_id: list_rombel[0],
          m_tugas_id: tugas.id,
          m_mata_pelajaran_id: jadwalMengajar.m_mata_pelajaran_id,
          tipe: "tugas",
          dihapus: 0,
        });
        await Promise.all(
          materi.map((d) => {
            TkTimelineTopik.create({
              m_timeline_id: timeline.id,
              m_topik_id: d,
            });
          })
        );
      } else {
        const timelineData = [];

        await Promise.all(
          list_rombel.map((d) => {
            timelineData.push({
              m_user_id: user.id,
              m_rombel_id: d,
              m_tugas_id: tugas.id,
              m_mata_pelajaran_id: jadwalMengajar.m_mata_pelajaran_id,
              tipe: "tugas",
              dihapus: 0,
            });
          })
        );

        timeline = await MTimeline.createMany(timelineData);

        await Promise.all(
          timeline.map(async (d) => {
            await Promise.all(
              materi.map((e) => {
                TkTimelineTopik.create({
                  m_timeline_id: d.id,
                  m_topik_id: e,
                });
              })
            );
          })
        );
      }

      if (timeline) {
        let anggotaRombel;

        if (list_anggota.length) {
          anggotaRombel = await MAnggotaRombel.query()
            .with("user", (builder) => {
              builder.select("id", "whatsapp", "nama").where({ dihapus: 0 });
            })
            .where({ m_rombel_id: list_rombel[0] })
            .whereIn("m_user_id", list_anggota)
            .andWhere({ dihapus: 0 })
            .fetch();
        } else {
          anggotaRombel = await MAnggotaRombel.query()
            .with("user", (builder) => {
              builder.select("id", "whatsapp", "nama").where({ dihapus: 0 });
            })
            .whereIn("m_rombel_id", list_rombel)
            .andWhere({ dihapus: 0 })
            .fetch();
        }

        let userIds = [];

        if (list_anggota.length) {
          await Promise.all(
            anggotaRombel.toJSON().map(async (d) => {
              userIds.push({
                m_user_id: d.m_user_id,
                tipe: "tugas",
                m_timeline_id: timeline.id,
                dihapus: 0,
                dikumpulkan: 0,
              });

              // NOTIFIKASI WHATSAPP
              try {
                const task = cron.schedule(
                  `${menit} ${jam} ${tanggal} ${bulan} *`,
                  async () => {
                    // await WhatsAppService.sendMessage(
                    //   d.user.whatsapp,
                    //   `Halo ${d.user.nama}, ada tugas dari Guru ${user.nama} (${mapel.nama} dengan judul ${judul}. Silahkan kerjakan dengan klik tautan berikut ya! Semangat!! ${domain}/smartschool/timeline/${timeline.id}?hal=tugas`
                    // );
                  },
                  {
                    scheduled: true,
                    timezone: "Asia/Jakarta",
                  }
                );
                return task;
              } catch (error) {
                console.log(error);
              }
            })
          );
        } else {
          await Promise.all(
            timeline.map(async (t) => {
              await Promise.all(
                anggotaRombel.toJSON().map(async (d) => {
                  if (t.m_rombel_id == d.m_rombel_id) {
                    userIds.push({
                      m_user_id: d.m_user_id,
                      tipe: "tugas",
                      m_timeline_id: t.id,
                      dihapus: 0,
                      dikumpulkan: 0,
                    });
                  }

                  // NOTIFIKASI WHATSAPP
                  try {
                    const task = cron.schedule(
                      `${menit} ${jam} ${tanggal} ${bulan} *`,
                      async () => {
                        // await WhatsAppService.sendMessage(
                        //   d.user.whatsapp,
                        //   `Halo ${d.user.nama}, ada tugas dari Guru ${user.nama} (${mapel.nama} dengan judul ${judul}. Silahkan kerjakan dengan klik tautan berikut ya! Semangat!! ${domain}/smartschool/timeline/${timeline.id}?hal=tugas`
                        // );
                      },
                      {
                        scheduled: true,
                        timezone: "Asia/Jakarta",
                      }
                    );
                    return task;
                  } catch (error) {
                    console.log(error);
                  }
                })
              );
            })
          );
        }

        await TkTimeline.createMany(userIds);
      }
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putTugas({ response, request, auth, params: { tugas_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      m_jadwal_mengajar_id,
      judul,
      instruksi,
      tanggal_pembagian,
      waktu_pembagian,
      tanggal_pengumpulan,
      waktu_pengumpulan,
      kkm,
      lampiran,
      link,
      draft,
      list_anggota,
      list_rombel,
      materi = [],
      soal = [],
    } = request.post();

    const jadwalMengajar = await MJadwalMengajar.query()
      .where({ id: m_jadwal_mengajar_id })
      .first();

    const tugas = await MTugas.query()
      .where({ id: tugas_id })
      .update({
        judul,
        instruksi: htmlEscaper.escape(instruksi),
        tanggal_pembagian: tanggal_pembagian
          ? moment(tanggal_pembagian).add(7, "hours").format("YYYY-MM-DD")
          : tanggal_pembagian,
        waktu_pembagian,
        tanggal_pengumpulan: tanggal_pengumpulan
          ? moment(tanggal_pengumpulan).add(7, "hours").format("YYYY-MM-DD")
          : tanggal_pengumpulan,
        waktu_pengumpulan,
        kkm,
        lampiran: lampiran.toString(),
        link: link.toString(),
        draft,
      });

    const tugasData = await MTugas.query()
      .where({ id: tugas_id })
      .with("soal", (builder) => {
        builder.where({ dihapus: 0 }).with("soal");
      })
      .first();

    if (tugas) {
      let timeline;

      if (soal.length) {
        await Promise.all(
          tugasData
            .toJSON()
            .soal.filter(
              (d) =>
                soal.filter((e) => e.id).findIndex((e) => e.id == d.soal.id) < 0
            )
            .map(async (d) => {
              await TkSoalTugas.query().where({ id: d.id }).update({
                dihapus: 1,
              });
            })
        );
        const soalIds = await Promise.all(
          soal.map(async (d) => {
            if (d.id) {
              await MSoalUjian.query()
                .where({ id: d.id })
                .update({
                  kd: d.kd,
                  kd_konten_materi: d.kd_konten_materi,
                  level_kognitif: d.level_kognitif,
                  bentuk: d.bentuk,
                  akm_konten_materi: d.akm_konten_materi,
                  akm_konteks_materi: d.akm_konteks_materi,
                  akm_proses_kognitif: d.akm_proses_kognitif,
                  audio: d.audio,
                  pertanyaan: htmlEscaper.escape(d.pertanyaan),
                  jawaban_a: htmlEscaper.escape(d.jawaban_a),
                  jawaban_b: htmlEscaper.escape(d.jawaban_b),
                  jawaban_c: htmlEscaper.escape(d.jawaban_c),
                  jawaban_d: htmlEscaper.escape(d.jawaban_d),
                  jawaban_e: htmlEscaper.escape(d.jawaban_e),
                  kj_pg: d.kj_pg,
                  kj_uraian: d.kj_uraian,
                  jawaban_pg_kompleks: d.jawaban_pg_kompleks,
                  pilihan_menjodohkan: d.pilihan_menjodohkan,
                  soal_menjodohkan: d.soal_menjodohkan,
                  opsi_a_uraian: d.opsi_a_uraian,
                  opsi_b_uraian: d.opsi_b_uraian,
                  rubrik_kj: JSON.stringify(d.rubrik_kj),
                  pembahasan: htmlEscaper.escape(d.pembahasan),
                  nilai_soal: d.nilai_soal,
                });
              return 0;
            } else {
              const soal = await MSoalUjian.create({
                kd: d.kd,
                kd_konten_materi: d.kd_konten_materi,
                level_kognitif: d.level_kognitif,
                bentuk: d.bentuk,
                akm_konten_materi: d.akm_konten_materi,
                akm_konteks_materi: d.akm_konteks_materi,
                akm_proses_kognitif: d.akm_proses_kognitif,
                audio: d.audio,
                pertanyaan: d.pertanyaan
                  ? htmlEscaper.escape(d.pertanyaan)
                  : "",
                jawaban_a: d.jawaban_a ? htmlEscaper.escape(d.jawaban_a) : "",
                jawaban_b: d.jawaban_b ? htmlEscaper.escape(d.jawaban_b) : "",
                jawaban_c: d.jawaban_c ? htmlEscaper.escape(d.jawaban_c) : "",
                jawaban_d: d.jawaban_d ? htmlEscaper.escape(d.jawaban_d) : "",
                jawaban_e: d.jawaban_e ? htmlEscaper.escape(d.jawaban_e) : "",
                kj_pg: d.kj_pg,
                kj_uraian: d.kj_uraian,
                jawaban_pg_kompleks: d.jawaban_pg_kompleks,
                pilihan_menjodohkan: d.pilihan_menjodohkan,
                soal_menjodohkan: d.soal_menjodohkan,
                opsi_a_uraian: d.opsi_a_uraian,
                opsi_b_uraian: d.opsi_b_uraian,
                rubrik_kj: JSON.stringify(d.rubrik_kj),
                pembahasan: d.pembahasan
                  ? htmlEscaper.escape(d.pembahasan)
                  : "",
                nilai_soal: d.nilai_soal,
                m_user_id: user.id,
                dihapus: 0,
              });
              return {
                m_soal_ujian_id: soal.id,
                m_tugas_id: tugas.id,
                dihapus: 0,
              };
            }
          })
        );
        await TkSoalTugas.createMany(soalIds.filter((d) => d));
      }

      if (list_anggota.length) {
        const check = await MTimeline.query()
          .where({ m_user_id: user.id })
          .andWhere({ m_rombel_id: list_rombel[0] })
          .andWhere({ m_tugas_id: tugas_id })
          .first();
        if (!check) {
          timeline = await MTimeline.create({
            m_user_id: user.id,
            m_rombel_id: list_rombel[0],
            m_tugas_id: tugas_id,
            m_mata_pelajaran_id: jadwalMengajar.m_mata_pelajaran_id,
            tipe: "tugas",
            dihapus: 0,
          });
        } else {
          timeline = check;
        }

        await TkTimelineTopik.query()
          .where({ m_timeline_id: timeline.id })
          .delete();
        await Promise.all(
          materi.map((d) => {
            TkTimelineTopik.create({
              m_timeline_id: timeline.id,
              m_topik_id: d,
            });
          })
        );
      } else {
        const timelineData = [];

        await Promise.all(
          list_rombel.map(async (d) => {
            const check = await MTimeline.query()
              .where({ m_user_id: user.id })
              .andWhere({ m_rombel_id: d })
              .andWhere({ m_tugas_id: tugas_id })
              .first();
            if (!check) {
              const newTimeline = await MTimeline.create({
                m_user_id: user.id,
                m_rombel_id: d,
                m_tugas_id: tugas_id,
                m_mata_pelajaran_id: jadwalMengajar.m_mata_pelajaran_id,
                tipe: "tugas",
                dihapus: 0,
              });
              timelineData.push(newTimeline);
            } else {
              timelineData.push(check);
            }
          })
        );

        timeline = timelineData;

        await Promise.all(
          timeline.map(async (d) => {
            await Promise.all(
              materi.map((e) => {
                TkTimelineTopik.create({
                  m_timeline_id: d.id,
                  m_topik_id: e,
                });
              })
            );
          })
        );
      }

      if (timeline) {
        let anggotaRombel;

        if (list_anggota.length) {
          anggotaRombel = await MAnggotaRombel.query()
            .with("user", (builder) => {
              builder.select("id", "whatsapp", "nama").where({ dihapus: 0 });
            })
            .where({ m_rombel_id: list_rombel[0] })
            .whereIn("m_user_id", list_anggota)
            .andWhere({ dihapus: 0 })
            .fetch();
        } else {
          anggotaRombel = await MAnggotaRombel.query()
            .with("user", (builder) => {
              builder.select("id", "whatsapp", "nama").where({ dihapus: 0 });
            })
            .whereIn("m_rombel_id", list_rombel)
            .andWhere({ dihapus: 0 })
            .fetch();
        }

        let userIds = [];

        let check;
        if (list_anggota.length) {
          check = await TkTimeline.query()
            .where({ tipe: "tugas" })
            .andWhere({ m_timeline_id: timeline.id })
            .andWhere({ dihapus: 0 })
            .fetch();
        } else {
          check = await TkTimeline.query()
            .where({ tipe: "tugas" })
            .whereIn(
              "m_timeline_id",
              timeline.map((d) => d.id)
            )
            .andWhere({ dihapus: 0 })
            .fetch();
        }

        await Promise.all(
          anggotaRombel.toJSON().map(async (d, idx) => {
            if (!check.toJSON().find((e) => e.m_user_id == d.m_user_id)) {
              userIds.push({
                m_user_id: d.m_user_id,
                tipe: "tugas",
                m_timeline_id: timeline.length
                  ? timeline.find((e) => e.m_rombel_id == d.m_rombel_id).id
                  : timeline.id,
                dihapus: 0,
                dikumpulkan: 0,
              });
              // if (d.user.email != null) {
              //   const gmail = await Mail.send(`emails.tugas`, d, (message) => {
              //     message
              //       .to(`${d.user.email}`)
              //       .from("no-reply@smarteschool.id")
              //       .subject("Pembayaran SPP");
              //   });

              //   if (gmail) {
              //     return response.ok({
              //       message: messageEmailSuccess,
              //     });
              //   }
              //   // return d.user.nama;
              // }
            }
          })
        );

        await TkTimeline.createMany(userIds);
      }
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  // delete soon
  async deleteTugas({ response, request, auth, params: { tugas_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const tugas = await MTugas.query().where({ id: tugas_id }).update({
      dihapus: 1,
    });

    if (!tugas) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    const timelineIds = await MTimeline.query()
      .where({ m_tugas_id: tugas_id })
      .ids();

    const timeline = await MTimeline.query()
      .where({ m_tugas_id: tugas_id })
      .update({
        dihapus: 1,
      });

    if (!timeline) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    await TkTimeline.query()
      .whereIn("m_timeline_id", timelineIds)
      .update({ dihapus: 1 });

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getTimeline({ response, request, auth }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { m_jadwal_mengajar_id, absen, hari_ini, waktu_saat_ini } =
      request.get();

    const jadwalMengajar = await MJadwalMengajar.query()
      .with("rombel")
      .with("mataPelajaran")
      .where({ id: m_jadwal_mengajar_id })
      .first();

    const userIds = await MAnggotaRombel.query()
      .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
      .andWhere({ dihapus: 0 })
      .pluck("m_user_id");

    let timeline;

    if (user.role == "siswa") {
      const timelineId1 = await MTimeline.query()
        .whereNull("m_mata_pelajaran_id")
        .andWhere({ m_rombel_id: jadwalMengajar.toJSON().rombel.id })
        .andWhere({
          m_user_id: jadwalMengajar.toJSON().mataPelajaran.m_user_id,
        })
        .orWhere({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .ids();

      const timelineId2 = await MTimeline.query()
        .whereNotNull("m_mata_pelajaran_id")
        .andWhere({ m_mata_pelajaran_id: jadwalMengajar.m_mata_pelajaran_id })
        .andWhere({ m_rombel_id: jadwalMengajar.toJSON().rombel.id })
        .andWhere({
          m_user_id: jadwalMengajar.toJSON().mataPelajaran.m_user_id,
        })
        .orWhere({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .ids();

      const timelineIds = [...timelineId2, ...timelineId1];

      const timeline = await TkTimeline.query()
        .with("timeline", (builder) => {
          builder
            .with("tugas", (builder) => {
              builder.with("soal", (builder) => {
                builder.where({ dihapus: 0 }).with("soal");
              });
            })
            .with("materi", (builder) => {
              builder
                .with("bab")
                .withCount("materiKesimpulan as totalKesimpulan", (builder) => {
                  builder
                    .whereIn("m_user_id", userIds)
                    .whereNotNull("kesimpulan");
                });
            })
            .withCount("komen as total_komen", (builder) => {
              builder.where({ dihapus: 0 });
            })
            .with("komen", (builder) => {
              builder.with("user").where({ dihapus: 0 });
            })
            .with("user");
        })
        .with("user")
        .where({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .whereIn("m_timeline_id", timelineIds)
        .orderBy("id", "desc")
        .fetch();

      let timelineData = [];

      await Promise.all(
        timeline.toJSON().map(async (d) => {
          if (d.tipe == "tugas") {
            if (d.timeline.tugas && d.timeline.tugas.draft == 0) {
              if (
                moment(
                  moment(d.timeline.tugas.tanggal_pembagian)
                    .add(7, "hours")
                    .format("YYYY-MM-DD") +
                    " " +
                    d.timeline.tugas.waktu_pembagian
                ) <= moment() ||
                d.timeline.tugas.waktu_pembagian == null
              )
                if (
                  moment(
                    `${moment(d.timeline.tugas.tanggal_pengumpulan)
                      .add(7, "hours")
                      .format("YYYY-MM-DD")} ${
                      d.timeline.tugas.waktu_pengumpulan
                    }`
                  ).format("YYYY-MM-DD HH:mm:ss") >= waktu_saat_ini
                ) {
                  timelineData.push({ ...d, sudah_lewat: true });
                } else {
                  timelineData.push({ ...d, sudah_lewat: false });
                }
            }
          } else {
            if (d.tipe == "diskusi") {
              if (
                moment(d.tanggal_pembagian).format("YYYY-MM-DD") <=
                moment(waktu_saat_ini).format("YYYY-MM-DD")
              ) {
                timelineData.push({ ...d });
              } else if (
                moment(d.tanggal_pembagian).format("YYYY-MM-DD") >
                moment(waktu_saat_ini).format("YYYY-MM-DD")
              ) {
                return;
              } else {
                timelineData.push({ ...d });
              }
            } else {
              if (moment(waktu_saat_ini) > moment(d.timeline.tanggal_pembagian))
                timelineData.push({ ...d });
            }
          }
        })
      );

      return response.ok({
        timeline: timelineData,
        role: user.role,
      });
    }

    if (absen) {
      timeline = await MTimeline.query()
        .withCount("tkTimeline as total_respon", (builder) => {
          builder.whereNotNull("absen");
        })
        .with("user")
        .withCount("tkTimeline as total_siswa")
        .where({ m_rombel_id: jadwalMengajar.toJSON().rombel.id })
        .andWhere({ m_user_id: user.id })
        .andWhere({ tipe: "absen" })
        .andWhere({ dihapus: 0 })
        .orderBy("id", "desc")
        .fetch();
    } else {
      // const tugasIds = await MTugas.query()
      //   .where({ m_user_id: user.id })
      //   .andWhere({ dihapus: 0 })
      //   .ids();

      const userIds = await MAnggotaRombel.query()
        .where({ m_rombel_id: jadwalMengajar.toJSON().rombel.id })
        .andWhere({ dihapus: 0 })
        .pluck("m_user_id");

      const timelineLainnya = await MTimeline.query()
        .whereNull("m_mata_pelajaran_id")
        .andWhere({ dihapus: 0 })
        .andWhere("m_rombel_id", jadwalMengajar.toJSON().rombel.id)
        .whereIn("m_user_id", userIds)
        .ids();

      const timeline1 = await MTimeline.query()
        .with("tugas", (builder) => {
          builder
            .with("soal", (builder) => {
              builder.where({ dihapus: 0 }).with("soal");
            })
            .with("timeline", (builder) => {
              builder.with("rombel").with("tkTimeline");
            });
        })
        .with("user")
        .with("materi", (builder) => {
          builder
            .with("bab")
            .withCount("materiKesimpulan as totalKesimpulan", (builder) => {
              builder.whereIn("m_user_id", userIds).whereNotNull("kesimpulan");
            });
        })
        .with("komen", (builder) => {
          builder.with("user").where({ dihapus: 0 });
        })
        .withCount("tkTimeline as total_respon", (builder) => {
          builder.whereNotNull("waktu_pengumpulan");
        })
        .withCount("tkTimeline as total_absen", (builder) => {
          builder.whereNotNull("waktu_absen");
        })
        .withCount("tkTimeline as total_siswa")
        .withCount("komen as total_komen", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .whereNull("m_mata_pelajaran_id")
        .andWhere({ m_rombel_id: jadwalMengajar.toJSON().rombel.id })
        .andWhere({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        // .whereIn("m_tugas_id", tugasIds)
        .orWhereIn("id", timelineLainnya)
        .orderBy("id", "desc")
        .fetch();

      const timeline2 = await MTimeline.query()
        .with("tugas", (builder) => {
          builder
            .with("soal", (builder) => {
              builder.where({ dihapus: 0 }).with("soal");
            })
            .with("timeline", (builder) => {
              builder.with("rombel").with("tkTimeline");
            });
        })
        .with("user")
        .with("materi", (builder) => {
          builder
            .with("bab")
            .withCount("materiKesimpulan as totalKesimpulan", (builder) => {
              builder.whereIn("m_user_id", userIds).whereNotNull("kesimpulan");
            });
        })
        .with("komen", (builder) => {
          builder.with("user").where({ dihapus: 0 });
        })
        .withCount("tkTimeline as total_respon", (builder) => {
          builder.whereNotNull("waktu_pengumpulan");
        })
        .withCount("tkTimeline as total_absen", (builder) => {
          builder.whereNotNull("waktu_absen");
        })
        .withCount("tkTimeline as total_siswa")
        .withCount("komen as total_komen", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .whereNotNull("m_mata_pelajaran_id")
        .andWhere({
          m_mata_pelajaran_id: jadwalMengajar.toJSON().mataPelajaran.id,
        })
        .andWhere({ m_rombel_id: jadwalMengajar.toJSON().rombel.id })
        .andWhere({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        // .whereIn("m_tugas_id", tugasIds)
        .orderBy("id", "desc")
        .fetch();

      timeline = [
        ...timeline2.toJSON().map((d) => {
          return { ...d, bab: d.materi.map((e) => e.bab) };
        }),
        ...timeline1.toJSON(),
      ];
    }

    return response.ok({
      timeline: timeline,
    });
  }

  async detailTimeline({ response, request, auth, params: { timeline_id } }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    if (user.role == "siswa") {
      const timeline = await TkTimeline.query()
        .with("timeline", (builder) => {
          builder
            .with("rombel")
            .with("materi", (builder) => {
              builder.with("bab");
            })
            .with("tugas", (builder) => {
              builder.with("soal", (builder) => {
                builder.where({ dihapus: 0 }).with("soal");
              });
            })
            .with("komen", (builder) => {
              builder.with("user").where({ dihapus: 0 });
            });
        })
        .with("komen", (builder) => {
          builder.with("user");
        })
        .with("user")
        .where({ id: timeline_id })
        .andWhere({ dihapus: 0 })
        .first();

      let sudah_lewat = false;

      if (
        timeline.toJSON().tipe == "tugas" &&
        moment(
          `${timeline.toJSON().timeline.tugas.tanggal_pengumpulan} ${
            timeline.toJSON().timeline.tugas.waktu_pengumpulan
          }`
        ).format("YYYY-MM-DD HH:mm:ss") >=
          moment().format("YYYY-MM-DD HH:mm:ss")
      ) {
        sudah_lewat = true;
      }

      const range = [
        moment(
          timeline.toJSON().tipe == "tugas"
            ? timeline.toJSON().timeline.tugas.tanggal_pembagian
            : timeline.toJSON().timeline.tanggal_pembagian
        ).format("YYYY-MM-DD 00:00:00"),
        moment(
          timeline.toJSON().tipe == "tugas"
            ? timeline.toJSON().timeline.tugas.tanggal_pembagian
            : timeline.toJSON().timeline.tanggal_pembagian
        ).format("YYYY-MM-DD 23:59:59"),
      ];

      const timelineId1 = await MTimeline.query()
        .whereNull("m_mata_pelajaran_id")
        .andWhere({ m_rombel_id: timeline.toJSON().timeline.rombel.id })
        .andWhere({
          m_user_id: timeline.toJSON().timeline.m_user_id,
        })
        .whereBetween("tanggal_pembagian", range)
        .andWhere({ dihapus: 0 })
        .andWhereNot({ tipe: "tugas" })
        .ids();

      const timelineId2 = await MTimeline.query()
        .whereNotNull("m_mata_pelajaran_id")
        .andWhere({
          m_mata_pelajaran_id: timeline.toJSON().timeline.m_mata_pelajaran_id,
        })
        .andWhere({ m_rombel_id: timeline.toJSON().timeline.rombel.id })
        .andWhere({
          m_user_id: timeline.toJSON().timeline.m_user_id,
        })
        .whereBetween("tanggal_pembagian", range)
        .andWhere({ dihapus: 0 })
        .andWhereNot({ tipe: "tugas" })
        .ids();

      const tugasIds = await MTugas.query()
        .where({ m_user_id: timeline.toJSON().timeline.m_user_id })
        .andWhere({ dihapus: 0 })
        .andWhere({
          tanggal_pembagian: moment(
            timeline.toJSON().tipe == "tugas"
              ? timeline.toJSON().timeline.tugas.tanggal_pembagian
              : timeline.toJSON().timeline.tanggal_pembagian
          ).format("YYYY-MM-DD"),
        })
        .ids();

      const timelineTugas = await MTimeline.query()
        .where({ m_rombel_id: timeline.toJSON().timeline.rombel.id })
        .andWhere({ dihapus: 0 })
        .andWhere({
          m_user_id: timeline.toJSON().timeline.m_user_id,
        })
        .whereIn("m_tugas_id", tugasIds)
        .ids();

      const timelineIds = [...timelineId2, ...timelineId1, ...timelineTugas];

      const timelines = await TkTimeline.query()
        .with("timeline", (builder) => {
          builder
            .with("tugas", (builder) => {
              builder.with("soal", (builder) => {
                builder.where({ dihapus: 0 }).with("soal");
              });
            })
            .with("materi", (builder) => {
              builder.with("bab");
            })
            .withCount("komen as total_komen", (builder) => {
              builder.where({ dihapus: 0 });
            })
            .with("komen", (builder) => {
              builder.with("user").where({ dihapus: 0 });
            })
            .with("user");
        })
        .with("user")
        .where({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .whereIn("m_timeline_id", timelineIds)
        .orderBy("id", "desc")
        .fetch();

      return response.ok({
        timeline,
        sudah_lewat,
        timelines,
      });
    }

    const thisTimeline = await MTimeline.query()
      .where({ id: timeline_id })
      .first();
    const userIds = await MAnggotaRombel.query()
      .where({ m_rombel_id: thisTimeline.m_rombel_id })
      .pluck("m_user_id");

    const timeline = await MTimeline.query()
      .with("user")
      .with("rombel")
      .with("materi", (builder) => {
        builder
          .with("bab")
          .withCount("materiKesimpulan as totalKesimpulan", (builder) => {
            builder.whereIn("m_user_id", userIds).whereNotNull("kesimpulan");
          });
      })
      .with("komen", (builder) => {
        builder.with("user").where({ dihapus: 0 });
      })
      .with("tugas", (builder) => {
        builder.with("soal", (builder) => {
          builder.where({ dihapus: 0 }).with("soal");
        });
      })
      .with("tkTimeline", (builder) => {
        builder.with("user");
      })
      .with("listSiswaBelum", (builder) => {
        builder.with("user").where("dikumpulkan", 0);
      })
      .with("listSiswaTerkumpul", (builder) => {
        builder
          .with("user")
          .where({ dikumpulkan: 1 })
          .with("komen", (builder) => {
            builder.with("user").where({ dihapus: 0 });
          });
      })
      .with("listSiswaDinilai", (builder) => {
        builder
          .with("user")
          .whereNotNull("nilai")
          .with("komen", (builder) => {
            builder.with("user").where({ dihapus: 0 });
          });
      })
      .withCount("tkTimeline as total_respon_tugas", (builder) => {
        builder.whereNotNull("waktu_pengumpulan");
      })
      .withCount("tkTimeline as total_respon_absen", (builder) => {
        builder.whereNotNull("waktu_absen");
      })
      .withCount("tkTimeline as total_hadir", (builder) => {
        builder.where({ absen: "hadir" }).whereNotNull("waktu_absen");
      })
      .withCount("tkTimeline as total_sakit", (builder) => {
        builder.where({ absen: "sakit" }).whereNotNull("waktu_absen");
      })
      .withCount("tkTimeline as total_izin", (builder) => {
        builder.where({ absen: "izin" }).whereNotNull("waktu_absen");
      })
      .withCount("tkTimeline as total_alpa", (builder) => {
        builder.whereNull("waktu_absen");
      })
      .withCount("tkTimeline as total_tugas_belum", (builder) => {
        builder.whereNull("waktu_pengumpulan");
      })
      .withCount("tkTimeline as total_tugas_terkumpul", (builder) => {
        builder.with("user").whereNotNull("waktu_pengumpulan");
      })
      .withCount("tkTimeline as total_tugas_dinilai", (builder) => {
        builder.whereNotNull("nilai");
      })
      .withCount("tkTimeline as total_siswa")
      .where({ id: timeline_id })
      .andWhere({ dihapus: 0 })
      .first();

    const range = [
      moment(
        timeline.tipe == "tugas"
          ? timeline.toJSON().tugas.tanggal_pembagian
          : timeline.toJSON().tanggal_pembagian
      ).format("YYYY-MM-DD 00:00:00"),
      moment(
        timeline.tipe == "tugas"
          ? timeline.toJSON().tugas.tanggal_pembagian
          : timeline.toJSON().tanggal_pembagian
      ).format("YYYY-MM-DD 23:59:29"),
    ];

    const timelineBiasa = await MTimeline.query()
      .with("tugas", (builder) => {
        builder
          .with("soal", (builder) => {
            builder.where({ dihapus: 0 }).with("soal");
          })
          .with("timeline", (builder) => {
            builder.with("rombel").with("tkTimeline");
          });
      })
      .with("user")
      .withCount("tkTimeline as total_respon", (builder) => {
        builder.whereNotNull("waktu_pengumpulan");
      })
      .withCount("tkTimeline as total_absen", (builder) => {
        builder.whereNotNull("waktu_absen");
      })
      .with("materi", (builder) => {
        builder
          .with("bab")
          .withCount("materiKesimpulan as totalKesimpulan", (builder) => {
            builder.whereIn("m_user_id", userIds).whereNotNull("kesimpulan");
          });
      })
      .withCount("tkTimeline as total_siswa")
      .where({ m_user_id: timeline.m_user_id })
      .andWhere({ dihapus: 0 })
      .andWhere({ m_rombel_id: timeline.m_rombel_id })
      .whereBetween("tanggal_pembagian", range)
      .andWhereNot({ tipe: "tugas" })
      .fetch();

    const tugasIds = await MTugas.query()
      .where({ m_user_id: timeline.m_user_id })
      .andWhere({ dihapus: 0 })
      .andWhere({
        tanggal_pembagian: moment(
          timeline.tipe == "tugas"
            ? timeline.toJSON().tugas.tanggal_pembagian
            : timeline.toJSON().tanggal_pembagian
        ).format("YYYY-MM-DD"),
      })
      .ids();
    const timelineTugas = await MTimeline.query()
      .with("tugas", (builder) => {
        builder
          .with("soal", (builder) => {
            builder.where({ dihapus: 0 }).with("soal");
          })
          .with("timeline", (builder) => {
            builder.with("rombel").with("tkTimeline");
          });
      })
      .with("user")
      .with("materi", (builder) => {
        builder
          .with("bab")
          .withCount("materiKesimpulan as totalKesimpulan", (builder) => {
            builder.whereIn("m_user_id", userIds).whereNotNull("kesimpulan");
          });
      })
      .withCount("tkTimeline as total_respon", (builder) => {
        builder.whereNotNull("waktu_pengumpulan");
      })
      .withCount("tkTimeline as total_absen", (builder) => {
        builder.whereNotNull("waktu_absen");
      })
      .withCount("tkTimeline as total_siswa")
      .where({ m_user_id: timeline.m_user_id })
      .andWhere({ dihapus: 0 })
      .andWhere({ m_rombel_id: timeline.m_rombel_id })
      .whereIn("m_tugas_id", tugasIds)
      .fetch();

    const timelines = [...timelineBiasa.toJSON(), ...timelineTugas.toJSON()];

    return response.ok({
      timeline: {
        ...timeline.toJSON(),
        bab: timeline.toJSON().materi.map((e) => e.bab),
      },
      timelines,
    });
  }

  // Belum Validasi
  async postTimeline({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      m_jadwal_mengajar_id,
      deskripsi,
      tipe,
      gmeet,
      lampiran,
      hari_ini,
      tanggal_dibuat,
      tanggal_pembagian,
      tanggal_akhir,
      materi = [],
    } = request.post();
    const tanggal = moment(tanggal_pembagian).format(`DD`);
    const bulan = moment(tanggal_pembagian).format(`M`);
    const waktu = `${tanggal_pembagian}`;
    const jam = moment(waktu).format(`H`);
    const menit = moment(waktu).format(`mm`);

    const jadwalMengajar = await MJadwalMengajar.query()
      .with("mataPelajaran")
      .where({ id: m_jadwal_mengajar_id })
      .first();

    const mapel = await MMataPelajaran.query()
      .where({ id: jadwalMengajar.m_mata_pelajaran_id })
      .first();

    let timeline;

    if (tipe == "absen") {
      await MJadwalMengajar.query().where({ id: m_jadwal_mengajar_id }).update({
        diubah: 0,
      });

      timeline = await MTimeline.create({
        m_user_id: user.id,
        m_rombel_id: jadwalMengajar.m_rombel_id,
        tipe,
        deskripsi: htmlEscaper.escape(deskripsi),
        m_mata_pelajaran_id: jadwalMengajar.toJSON().mataPelajaran.id,
        gmeet,
        tanggal_dibuat,
        dihapus: 0,
        tanggal_pembagian,
        tanggal_akhir,
      });

      const anggotaRombel = await MAnggotaRombel.query()
        .with("user", (builder) => {
          builder.select("id", "nama", "email").where({ dihapus: 0 });
        })
        .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
        .andWhere({ dihapus: 0 })
        .fetch();

      let userIds = [];

      await Promise.all(
        anggotaRombel.toJSON().map(async (d) => {
          userIds.push({
            m_user_id: d.m_user_id,
            tipe: "absen",
            m_timeline_id: timeline.id,
            dihapus: 0,
          });
          // NOTIFIKASI WHATSAPP
          try {
            const task = cron.schedule(
              `${menit} ${jam} ${tanggal} ${bulan} *`,
              async () => {
                // await WhatsAppService.sendMessage(
                //   6281316119411,
                //   `Halo ${d.user.nama}, ada pertemuan dari Guru ${user.nama} (${mapel.nama}. Silahkan klik tautan berikut untuk melihat pertemuan! Semangat!! ${domain}/smartschool/timeline/${timeline.id}?hal=pertemuan`
                // );
              },
              {
                scheduled: true,
                timezone: "Asia/Jakarta",
              }
            );
            return task;
          } catch (error) {
            console.log(error);
          }
        })
      );
      await TkTimeline.createMany(userIds);
    } else if (tipe == "diskusi") {
      timeline = await MTimeline.create({
        m_user_id: user.id,
        m_rombel_id: jadwalMengajar.m_rombel_id,
        deskripsi: htmlEscaper.escape(deskripsi),
        m_mata_pelajaran_id: jadwalMengajar.toJSON().mataPelajaran.id,
        lampiran: lampiran.toString(),
        tipe,
        dihapus: 0,
      });

      const anggotaRombel = await MAnggotaRombel.query()
        .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
        .andWhere({ dihapus: 0 })
        .fetch();

      let userIds = [];

      await Promise.all(
        anggotaRombel.toJSON().map(async (d) => {
          userIds.push({
            m_user_id: d.m_user_id,
            tipe: "diskusi",
            m_timeline_id: timeline.id,
            dihapus: 0,
          });
        })
      );

      await TkTimeline.createMany(userIds);
    } else if (tipe == "materi") {
      materi.map(async (d) => {
        timeline = await MTimeline.create({
          m_user_id: user.id,
          m_rombel_id: jadwalMengajar.m_rombel_id,
          tipe,
          m_mata_pelajaran_id: jadwalMengajar.toJSON().mataPelajaran.id,
          dihapus: 0,
          tanggal_pembagian,
        });

        await Promise.all(
          TkTimelineTopik.create({
            m_timeline_id: timeline.id,
            m_topik_id: d,
          })
        );

        const anggotaRombel = await MAnggotaRombel.query()
          .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
          .andWhere({ dihapus: 0 })
          .fetch();

        let userIds = [];

        await Promise.all(
          anggotaRombel.toJSON().map(async (d) => {
            userIds.push({
              m_user_id: d.m_user_id,
              tipe: "materi",
              m_timeline_id: timeline.id,
              dihapus: 0,
            });
          })
        );

        await TkTimeline.createMany(userIds);
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putTimeline({ response, request, auth, params: { timeline_id } }) {
    const user = await auth.getUser();
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const {
      deskripsi,
      gmeet,
      jurnal,
      rpp,
      m_jadwal_mengajar_id,
      m_mata_pelajaran_id,
      tipe,
      lampiran,
      absen,
      keterangan,
      waktu_absen,
      waktu_pengumpulan,
      dikumpulkan,
      tanggal_pembagian,
      tanggal_akhir,
      siswa_id,
      tk_id,
      nilai,
      materi,
    } = request.post();

    if (
      tipe !== "nilai" &&
      tipe !== "tugas" &&
      user.role !== "siswa" &&
      !siswa_id &&
      tipe !== "absen"
    ) {
      const jadwalMengajar = await MJadwalMengajar.query()
        .with("mataPelajaran")
        .where({ id: m_jadwal_mengajar_id })
        .first();
    }

    let timeline;

    if (tipe == "nilai") {
      timeline = await TkTimeline.query().where({ id: timeline_id }).update({
        nilai,
      });
    }

    if (tipe == "diskusi") {
      timeline = await MTimeline.query()
        .where({ id: timeline_id })
        .update({
          m_jadwal_mengajar_id,
          m_mata_pelajaran_id: jadwalMengajar.toJSON().mataPelajaran.id,
          deskripsi: htmlEscaper.escape(deskripsi),
          lampiran: lampiran.toString(),
          tipe,
        });
    }

    let jadwalMengajar;

    if (tipe == "absen") {
      if (siswa_id) {
        timeline = await TkTimeline.query()
          .where({ id: tk_id })
          .andWhere({ m_user_id: siswa_id })
          .update({
            lampiran: lampiran.toString(),
            absen: absen,
            keterangan: keterangan,
            waktu_absen: moment().utc(7).format("YYYY-MM-DD HH:mm:ss"),
          });
        return;
      } else if (user.role == "siswa") {
        timeline = await TkTimeline.query()
          .where({ id: timeline_id })
          .update({
            lampiran: lampiran.toString(),
            absen: absen,
            keterangan: keterangan,
            waktu_absen: moment().utc(7).format("YYYY-MM-DD HH:mm:ss"),
          });
      } else {
        // if (!m_mata_pelajaran_id) {
        //   jadwalMengajar = await MJadwalMengajar.query()
        //     .with("mataPelajaran")
        //     .where({ id: m_jadwal_mengajar_id })
        //     .first();
        // }
        timeline = await MTimeline.query()
          .where({ id: timeline_id })
          .update({
            rpp: rpp ? rpp.toString() : "",
            jurnal,
            deskripsi: htmlEscaper.escape(deskripsi),
            tanggal_pembagian,
            tanggal_akhir,
            // m_mata_pelajaran_id:
            //   jadwalMengajar.toJSON().mataPelajaran.id || m_mata_pelajaran_id,
            gmeet,
          });
      }
    }

    if (tipe == "tugas") {
      timeline = await TkTimeline.query().where({ id: timeline_id }).update({
        lampiran: lampiran.toString(),
        keterangan: keterangan,
        waktu_pengumpulan: waktu_pengumpulan,
        dikumpulkan: dikumpulkan,
      });
    }

    if (tipe == "materi") {
      timeline = await MTimeline.query().where({ id: timeline_id }).update({
        tanggal_pembagian,
      });

      await TkTimelineTopik.query()
        .where({ m_timeline_id: timeline_id })
        .delete();
      await Promise.all(
        TkTimelineTopik.create({
          m_timeline_id: timeline_id,
          m_topik_id: materi,
        })
      );

      const jadwalMengajar = await MJadwalMengajar.query()
        .with("mataPelajaran")
        .where({ id: m_jadwal_mengajar_id })
        .first();
      const anggotaRombel = await MAnggotaRombel.query()
        .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
        .andWhere({ dihapus: 0 })
        .fetch();

      const check = await TkTimeline.query()
        .where({ m_timeline_id: timeline_id })
        .andWhere({ dihapus: 0 })
        .pluck("m_user_id");

      const checkJSON = check.toJSON();
      let userIds = [];

      await Promise.all(
        anggotaRombel
          .toJSON()
          .filter((d) => !checkJSON.find((e) => e == d.m_user_id))
          .map(async (d) => {
            userIds.push({
              m_user_id: d.m_user_id,
              tipe: "materi",
              m_timeline_id: timeline_id,
              dihapus: 0,
            });
          })
      );

      if (userIds.length > 0) {
        await TkTimeline.createMany(userIds);
      }
    }

    if (!timeline) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteTimeline({ response, request, auth, params: { timeline_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const timeline = await MTimeline.query().where({ id: timeline_id }).update({
      dihapus: 1,
    });

    if (!timeline) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    await TkTimeline.query()
      .where({ m_timeline_id: timeline_id })
      .update({ dihapus: 1 });

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async downloadTimelineAbsen({ response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { jadwal_mengajar_id } = request.post();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD HH-mm-ss-") + new Date().getTime();

    const jadwalMengajar = await MJadwalMengajar.query()
      .with("rombel")
      .with("mataPelajaran")
      .where({ id: jadwal_mengajar_id })
      .first();

    const timeline = await MTimeline.query()
      .with("tkTimeline", (builder) => {
        builder.with("user");
      })
      .with("user")
      .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
      .where({ m_user_id: jadwalMengajar.toJSON().mataPelajaran.m_user_id })
      .andWhere({ tipe: "absen" })
      .andWhere({ dihapus: 0 })
      .fetch();

    const workbook = new Excel.Workbook();

    await Promise.all(
      timeline.toJSON().map(async (d, idx) => {
        // Create workbook & add worksheet
        const worksheet = workbook.addWorksheet(`Pertemuan ${idx + 1}`);

        await Promise.all(
          d.tkTimeline.map(async (e) => {
            // add column headers
            worksheet.getRow(10).values = ["Nama", "Absen"];

            worksheet.columns = [{ key: "user" }, { key: "absen" }];

            // Add row using key mapping to columns
            const row = worksheet.addRow({
              user: e.user.nama,
              absen: e.absen || "alpa",
            });
          })
        );

        worksheet.getCell("A1").value = "Nama";
        worksheet.getCell("B1").value = d.user.nama;
        worksheet.getCell("D1").value = "NIP";
        worksheet.getCell("E1").value = d.user.nip;
        worksheet.getCell("D2").value = "Link Pertemuan";
        worksheet.getCell("E2").value = d.gmeet;
        worksheet.getCell("A2").value = "Tanggal Pertemuan";
        worksheet.getCell("B2").value = d.tanggal_dibuat;

        worksheet.getCell("A4").value = "RPP";
        worksheet.getCell("A5").value = d.rpp.toString();

        worksheet.getCell("A7").value = "Deskripsi";
        worksheet.getCell("A8").value = d.deskripsi;

        worksheet.columns.forEach(function (column, i) {
          let maxLength = 0;
          column["eachCell"]({ includeEmpty: true }, function (cell) {
            let columnLength = cell.value ? cell.value.toString().length : 10;

            if (cell.value == "alpa") {
              // red
              cell.fill = {
                type: "pattern",
                pattern: "solid",
                fgColor: { argb: "F9D5D4" },
                bgColor: { argb: "F9D5D4" },
              };

              cell.font = {
                color: { argb: "FC544B" },
              };
            }

            if (cell.value == "sakit") {
              // yellow
              cell.fill = {
                type: "pattern",
                pattern: "solid",
                fgColor: { argb: "FCE8D2" },
                bgColor: { argb: "FCE8D2" },
              };

              cell.font = {
                color: { argb: "F9AC50" },
              };
            }

            if (cell.value == "izin") {
              // green
              cell.fill = {
                type: "pattern",
                pattern: "solid",
                fgColor: { argb: "E0FCE4" },
                bgColor: { argb: "E0FCE4" },
              };

              cell.font = {
                color: { argb: "63ED7A" },
              };
            }

            if (cell.value == "hadir") {
              // green
              cell.fill = {
                type: "pattern",
                pattern: "solid",
                fgColor: { argb: "2680EB" },
                bgColor: { argb: "2680EB" },
              };

              cell.font = {
                color: { argb: "FFFFFF" },
              };
            }

            if (columnLength > maxLength) {
              maxLength = columnLength;
            }
          });

          column.width = maxLength < 15 ? 15 : maxLength > 30 ? 30 : 15;
        });
      })
    );

    let namaFile = `/uploads/absen-pertemuan-${new Date().getTime()}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async postTkTimelineKomen({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { tk_timeline_id, komen } = request.post();
    const rules = {
      komen: "required",
    };
    const message = {
      "komen.required": "Komen harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const tkTimelineKomen = await TkTimelineKomen.create({
      dihapus: 0,
      tk_timeline_id: tk_timeline_id,
      komen: komen,
      m_user_id: user.id,
    });

    // await WhatsAppService.sendMessage(
    //   user.whatsapp,
    //   `Halo, komentar mu sudah masuk. Tunggu gurumu membalasnya ya!`
    // );

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async deleteTkTimelineKomen({
    response,
    request,
    auth,
    params: { timeline_komen_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const tkTimelineKomen = await TkTimelineKomen.query()
      .where({ id: timeline_komen_id })
      .update({
        dihapus: 1,
      });

    if (!tkTimelineKomen) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postTimelineKomen({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let { m_timeline_id, komen } = request.post();
    const rules = {
      komen: "required",
    };
    const message = {
      "komen.required": "Komen harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    if (user.role == "siswa") {
      const tkTimeline = await TkTimeline.query()
        .where({ id: m_timeline_id })
        .first();

      m_timeline_id = tkTimeline.m_timeline_id;
    }

    const timelineKomen = await MTimelineKomen.create({
      dihapus: 0,
      m_timeline_id: m_timeline_id,
      komen: komen,
      m_user_id: user.id,
    });

    // await WhatsAppService.sendMessage(
    //   user.whatsapp,
    //   `Halo, komentar mu sudah masuk. Tunggu gurumu membalasnya ya!`
    // );

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async deleteTimelineKomen({
    response,
    request,
    auth,
    params: { timeline_komen_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const timelineKomen = await MTimelineKomen.query()
      .where({ id: timeline_komen_id })
      .update({
        dihapus: 1,
      });

    if (!timelineKomen) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getAbsen({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const { role, tanggal } = request.get();

    if (role == "guru") {
      const absen = await User.query()
        .with("absen", (builder) => {
          builder.where("created_at", "like", `%${tanggal}%`);
        })
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .andWhere({ role: role })
        .fetch();

      return response.ok({
        absen: absen,
      });
    } else if (role == "siswa") {
      const rombel = await MRombel.query()
        .where({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .andWhere({ m_ta_id: ta.id })
        .fetch();

      let rombelData = [];

      await Promise.all(
        rombel.toJSON().map(async (d) => {
          const userIds = await MAnggotaRombel.query()
            .where({ m_rombel_id: d.id })
            .andWhere({ dihapus: 0 })
            .pluck("m_user_id");

          const totalHadir = await MAbsen.query()
            .with("user")
            .where("created_at", "like", `%${tanggal}%`)
            .andWhere({ absen: "hadir" })
            .whereIn("m_user_id", userIds)
            .count("* as total");
          const totalSakit = await MAbsen.query()
            .with("user")
            .where("created_at", "like", `%${tanggal}%`)
            .andWhere({ absen: "sakit" })
            .whereIn("m_user_id", userIds)
            .count("* as total");
          const totalIzin = await MAbsen.query()
            .with("user")
            .where("created_at", "like", `%${tanggal}%`)
            .andWhere({ absen: "izin" })
            .whereIn("m_user_id", userIds)
            .count("* as total");
          const totalAlpa =
            userIds.length -
            (totalHadir[0].total + totalSakit[0].total + totalIzin[0].total);

          return rombelData.push({
            rombel: d.nama,
            id: d.id,
            totalHadir: totalHadir[0].total,
            totalSakit: totalSakit[0].total,
            totalIzin: totalIzin[0].total,
            totalAlpa,
          });
        })
      );

      return response.ok({
        rombel: rombelData,
      });
    }
  }

  async meAbsen({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const { hari_ini, kode_hari, jam_saat_ini } = request.get();

    let absen;
    let jadwalMengajar = null;

    if (hari_ini) {
      absen = await MAbsen.query()
        .where("created_at", "like", `%${hari_ini}%`)
        .andWhere({ m_user_id: user.id })
        .first();

      const rombelIds = await MRombel.query().where({ m_ta_id: ta.id }).ids();

      const rombelId = await MAnggotaRombel.query()
        .where({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .whereIn("m_rombel_id", rombelIds)
        .pluck("m_rombel_id");

      let jamMengajarId = await MJamMengajar.query()
        .where({ kode_hari: kode_hari })
        .andWhere("jam_mulai", ">=", jam_saat_ini)
        .andWhere({ m_sekolah_id: sekolah.id })
        .andWhere({ m_ta_id: ta.id })
        .pluck("id");

      if (!jamMengajarId) {
        jadwalMengajar = await MJadwalMengajar.query()
          .with("jamMengajar")
          .with("rombel")
          .with("mataPelajaran")
          .where({ m_jam_mengajar_id: jamMengajarId[0] })
          .andWhere({ m_rombel_id: rombelId[0] })
          .first();
      }
    } else {
      absen = await MAbsen.query().where({ m_user_id: user.id }).fetch();
    }

    return response.ok({
      absen: absen,
      jadwalMengajar: jadwalMengajar,
    });
  }

  async detailAbsen({ response, request, auth, params: { absen_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const absen = await MAbsen.query().where({ id: absen_id }).first();

    if (!absen) {
      return response.notFound({ message: messageNotFound });
    }

    return response.ok({
      absen: absen,
    });
  }

  // Belum Validasi
  async postAbsen({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let { absen, keterangan, lampiran, foto_masuk, user_id } = request.post();

    lampiran = lampiran ? lampiran.toString() : null;

    let data;
    if (absen != "hadir") {
      data = await MAbsen.create({
        m_sekolah_id: sekolah.id,
        m_user_id: user.id,
        role: user.role,
        absen,
        keterangan,
        lampiran: lampiran,
      });
    } else {
      data = await MAbsen.create({
        m_sekolah_id: sekolah.id,
        m_user_id: user_id ? user_id : user.id,
        role: user.role,
        absen,
        keterangan,
        foto_masuk,
      });
    }

    // await WhatsAppService.sendMessage(
    //   user.whatsapp,
    //   `Halo, absen anda sudah masuk. Anda masuk dengan keterangan *${absen}* \n ${keterangan ? keterangan : foto_masuk ? foto_masuk : null} \nPada pukul ${data.created_at}`
    // );

    return response.ok({
      data: data,
      message: messagePostSuccess,
    });
  }

  async putAbsen({ response, request, auth, params: { absen_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      absen,
      keterangan,
      lampiran,
      foto_pulang,
      waktu_pulang,
      foto_masuk,
    } = request.post();

    if (absen != "hadir") {
      await MAbsen.query().where({ id: absen_id }).update({
        absen,
        keterangan,
        lampiran: lampiran.toString(),
      });
    } else {
      await MAbsen.query().where({ id: absen_id }).update({
        foto_masuk,
        absen,
        foto_pulang,
        waktu_pulang,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async downloadAbsen({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const { role, tanggal, rombel_id } = request.post();
    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    if (role == "siswa") {
      let rombel = MRombel.query()
        .with("user")
        .with("anggotaRombel", (builder) => {
          builder.where({ dihapus: 0 }).with("user", (builder) => {
            builder.with("absen", (builder) => {
              builder.where("created_at", "like", `%${tanggal}%`);
            });
          });
        })
        .where({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .andWhere({ m_ta_id: ta.id });

      if (rombel_id) {
        rombel = rombel.andWhere({ id: rombel_id });
      }
      rombel = await rombel.fetch();

      let workbook = new Excel.Workbook();

      await Promise.all(
        rombel.toJSON().map(async (d, idx) => {
          let worksheet = workbook.addWorksheet(`${idx + 1}.${d.nama}`);

          await Promise.all(
            d.anggotaRombel
              .sort((a, b) => ("" + a.user.nama).localeCompare(b.user.nama))
              .map(async (anggota) => {
                // add column headers
                worksheet.getRow(10).values = [
                  "Nama",
                  "Absen",
                  "Keterangan",
                  "Lampiran",
                  "Waktu Masuk",
                  "Waktu Pulang",
                  "suhu",
                  "masker",
                  "Foto Masuk",
                  "Foto Masuk Camera",
                  "Foto Pulang",
                  "Foto Pulang Camera",
                ];

                worksheet.columns = [
                  { key: "user" },
                  { key: "absen" },
                  { key: "keterangan" },
                  { key: "lampiran" },
                  { key: "created_at" },
                  { key: "waktu_pulang" },
                  { key: "suhu" },
                  { key: "masker" },
                  { key: "foto_masuk" },
                  { key: "foto_masuk_cam" },
                  { key: "foto_pulang" },
                  { key: "foto_pulang_cam" },
                ];

                // Add row using key mapping to columns
                let row = worksheet.addRow({
                  user: anggota.user ? anggota.user.nama : "-",
                  absen: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].absen
                        : "-"
                      : "-"
                    : "-",
                  keterangan: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].keterangan
                        : "-"
                      : "-"
                    : "-",
                  lampiran: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].lampiran
                        : "-"
                      : "-"
                    : "-",
                  created_at: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].created_at
                        : "-"
                      : "-"
                    : "-",
                  waktu_pulang: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].waktu_pulang
                        : "-"
                      : "-"
                    : "-",
                  suhu: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].suhu
                        : "-"
                      : "-"
                    : "-",
                  masker: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].masker
                        : "-"
                      : "-"
                    : "-",
                  foto_masuk: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].foto_masuk
                        : "-"
                      : "-"
                    : "-",
                  foto_masuk_cam: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].foto_masuk_local
                          ? "https://server1.smarteschool.net/camera/" +
                            anggota.user.absen[0].foto_masuk_local
                          : "-"
                        : "-"
                      : "-"
                    : "-",
                  foto_pulang: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].foto_pulang
                        : "-"
                      : "-"
                    : "-",
                  foto_pulang_cam: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].foto_pulang_local
                          ? "https://server1.smarteschool.net/camera/" +
                            anggota.user.absen[0].foto_pulang_local
                          : "-"
                        : "-"
                      : "-"
                    : "-",
                });
              })
          );
        })
      );

      let namaFile = `/uploads/rekap-absen-siswa-${new Date().getTime()}.xlsx`;

      // save workbook to disk
      await workbook.xlsx.writeFile(`public${namaFile}`);

      return namaFile;
    } else if (role == "guru") {
      const kepsek = await User.query()
        .with("absen", (builder) => {
          builder.where("created_at", "like", `%${tanggal}%`);
        })
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .andWhere({ role: "kepsek" })
        .fetch();

      const absen = await User.query()
        .with("absen", (builder) => {
          builder.where("created_at", "like", `%${tanggal}%`);
        })
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .andWhere({ role: role })
        .fetch();

      let workbook = new Excel.Workbook();

      let worksheet = workbook.addWorksheet(`${tanggal}`);

      await Promise.all(
        kepsek.toJSON().map(async (d) => {
          worksheet.getRow(10).values = [
            "Nama",
            "Absen",
            "Keterangan",
            "Lampiran",
            "Foto Masuk",
            "Waktu Masuk",
            "Foto Pulang",
            "Waktu Pulang",
          ];

          worksheet.columns = [
            { key: "user" },
            { key: "absen" },
            { key: "keterangan" },
            { key: "lampiran" },
            { key: "foto_masuk" },
            { key: "created_at" },
            { key: "foto_pulang" },
            { key: "waktu_pulang" },
          ];

          let row = worksheet.addRow({
            user: d ? d.nama : "-",
            kepsek: d
              ? d.kepsek
                ? d.kepsek.length
                  ? d.kepsek[0].kepsek
                  : "-"
                : "-"
              : "-",
            keterangan: d
              ? d.kepsek
                ? d.kepsek.length
                  ? d.kepsek[0].keterangan
                  : "-"
                : "-"
              : "-",
            lampiran: d
              ? d.kepsek
                ? d.kepsek.length
                  ? d.kepsek[0].lampiran
                  : "-"
                : "-"
              : "-",
            foto_masuk: d
              ? d.kepsek
                ? d.kepsek.length
                  ? d.kepsek[0].foto_masuk
                  : "-"
                : "-"
              : "-",
            created_at: d
              ? d.kepsek
                ? d.kepsek.length
                  ? d.kepsek[0].created_at
                  : "-"
                : "-"
              : "-",
            foto_pulang: d
              ? d.kepsek
                ? d.kepsek.length
                  ? d.kepsek[0].foto_pulang
                  : "-"
                : "-"
              : "-",
            waktu_pulang: d
              ? d.kepsek
                ? d.kepsek.length
                  ? d.kepsek[0].waktu_pulang
                  : "-"
                : "-"
              : "-",
          });
        })
      );

      await Promise.all(
        absen.toJSON().map(async (d) => {
          worksheet.getRow(12).values = [
            "Nama",
            "Absen",
            "Keterangan",
            "Lampiran",
            "Foto Masuk",
            "Waktu Masuk",
            "Foto Pulang",
            "Waktu Pulang",
          ];

          worksheet.columns = [
            { key: "user" },
            { key: "absen" },
            { key: "keterangan" },
            { key: "lampiran" },
            { key: "foto_masuk" },
            { key: "created_at" },
            { key: "foto_pulang" },
            { key: "waktu_pulang" },
          ];

          let row = worksheet.addRow({
            user: d ? d.nama : "-",
            absen: d
              ? d.absen
                ? d.absen.length
                  ? d.absen[0].absen
                  : "-"
                : "-"
              : "-",
            keterangan: d
              ? d.absen
                ? d.absen.length
                  ? d.absen[0].keterangan
                  : "-"
                : "-"
              : "-",
            lampiran: d
              ? d.absen
                ? d.absen.length
                  ? d.absen[0].lampiran
                  : "-"
                : "-"
              : "-",
            foto_masuk: d
              ? d.absen
                ? d.absen.length
                  ? d.absen[0].foto_masuk
                  : "-"
                : "-"
              : "-",
            created_at: d
              ? d.absen
                ? d.absen.length
                  ? d.absen[0].created_at
                  : "-"
                : "-"
              : "-",
            foto_pulang: d
              ? d.absen
                ? d.absen.length
                  ? d.absen[0].foto_pulang
                  : "-"
                : "-"
              : "-",
            waktu_pulang: d
              ? d.absen
                ? d.absen.length
                  ? d.absen[0].waktu_pulang
                  : "-"
                : "-"
              : "-",
          });
        })
      );

      let namaFile = `/uploads/rekap-absen-guru-${keluarantanggalseconds}.xlsx`;

      // save workbook to disk
      await workbook.xlsx.writeFile(`public${namaFile}`);

      return namaFile;
    }
  }

  async getTest({ response, request, auth }) {}

  async getUjian({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      tingkat,
      daftar_ujian_id,
      page = 1,
      search,
      filter_mapel,
      filter_tipe,
      filter_tingkat,
    } = request.get();

    if (tingkat) {
      let ujianTingkat;

      if (user.role == "admin") {
        const userIds = await User.query()
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: sekolah.id })
          .whereIn("role", ["guru", "admin"])
          .ids();

        const tipeUjian = [
          "pts1",
          "pts2",
          "pas1",
          "pas2",
          "us",
          "literasi",
          "numerasi",
        ];

        ujianTingkat = await MUjian.query()
          .select("id", "nama")
          .where({ tingkat: tingkat })
          .andWhere({ dihapus: 0 })
          .whereIn("m_user_id", userIds)
          .whereIn("tipe", tipeUjian)
          .orderBy("id", "desc")
          .fetch();
      } else {
        ujianTingkat = await MUjian.query()
          .select("id", "nama")
          .where({ tingkat: tingkat })
          .andWhere({ dihapus: 0 })
          .andWhere({ m_user_id: user.id })
          .orderBy("id", "desc")
          .fetch();
      }

      let ujianDetail;

      if (daftar_ujian_id) {
        ujianDetail = await MUjian.query()
          .with("soalUjian", (builder) => {
            builder
              .with("soal", (builder) => {
                builder.where({ dihapus: 0 });
              })
              .where({ dihapus: 0 });
          })
          .where({ id: daftar_ujian_id })
          .first();
      }

      return response.ok({
        ujianTingkat: ujianTingkat,
        ujianDetail: ujianDetail,
      });
    }

    let mataPelajaran, ujian;

    if (user.role == "guru") {
      mataPelajaran = await MMataPelajaran.query()
        .with("user")
        .where({ dihapus: 0 })
        .andWhere({ m_user_id: user.id })
        .andWhere({ m_ta_id: ta.id })
        .fetch();
    } else if (user.role == "admin") {
      mataPelajaran = await MMataPelajaran.query()
        .with("user")
        .where({ dihapus: 0 })
        .andWhere({ m_ta_id: ta.id })
        .andWhere({ m_sekolah_id: sekolah.id })
        .fetch();
    }

    if (user.role == "admin") {
      const userIds = await User.query()
        .where({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .whereIn("role", ["guru", "admin"])
        .ids();
      ujian = MUjian.query()
        .with("mataPelajaran")
        .withCount("soalUjian as jumlahSoal", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .where({ dihapus: 0 })
        .whereIn("m_user_id", userIds)
        .orderBy("id", "desc");
    } else {
      ujian = MUjian.query()
        .with("mataPelajaran")
        .withCount("soalUjian as jumlahSoal", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .where({ dihapus: 0 })
        .andWhere({ m_user_id: user.id })
        .orderBy("id", "desc");
    }

    if (search) {
      ujian = ujian.where("nama", "like", `%${search}%`);
    }
    if (filter_mapel) {
      ujian = ujian.where({ m_user_id: filter_mapel });
    }
    if (filter_tingkat) {
      ujian = ujian.where({ tingkat: filter_tingkat });
    }
    if (filter_tipe) {
      ujian = ujian.where({ tipe: filter_tipe });
    }

    ujian = await ujian.paginate(page, 20);

    let tingkatData = [];

    if (sekolah.tingkat == "SMK" || sekolah.tingkat == "SMA") {
      tingkatData = ["X", "XI", "XII", "XIII"];
    } else if (sekolah.tingkat == "SMP") {
      tingkatData = ["VII", "VIII", "IX"];
    } else if (sekolah.tingkat == "SD") {
      tingkatData = ["I", "II", "III", "IV", "V", "VI"];
    } else if (sekolah.tingkat == "SLB") {
      tingkatData = [
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX",
        "X",
        "XI",
        "XII",
      ];
    }

    let tipeUjian = [
      { value: "kuis", label: "Kuis" },
      { value: "ph", label: "Penilaian Harian" },
      { value: "pts1", label: "Penilaian Tengah Semester 1" },
      { value: "pts2", label: "Penilaian Tengah Semester 2" },
      { value: "pas1", label: "Penilaian Akhir Semester 1" },
      { value: "pas2", label: "Penilaian Akhir Semester 2" },
      { value: "us", label: "Ujian Sekolah" },
      { value: "literasi", label: "AKM - Literasi" },
      { value: "numerasi", label: "AKM - Numerasi" },
    ];

    return response.ok({
      ujian: ujian.toJSON().data,
      total: ujian.toJSON().total,
      lastPage: ujian.toJSON().lastPage,
      mataPelajaran: mataPelajaran,
      tingkat: tingkatData,
      tipeUjian: tipeUjian,
    });
  }

  async detailUjian({ response, request, auth, params: { ujian_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ujian = await MUjian.query().where({ id: ujian_id }).first();

    const soalUjian = await MUjian.query()
      .with("soalUjian", (builder) => {
        builder
          .with("soal", (builder) => {
            builder.where({ dihapus: 0 });
          })
          .where({ dihapus: 0 });
      })
      .where({ id: ujian_id })
      .first();
    const filterUjian = soalUjian.toJSON().soalUjian.filter((d) => {
      if (d.soal.bentuk) {
        if (
          ["menjodohkan", "uraian", "esai", "pg_kompleks", "pg"].includes(
            d.soal.bentuk.toLowerCase()
          )
        ) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    });

    const soalUjianIds = await TkSoalUjian.query()
      .with("soal")
      .where({ m_ujian_id: ujian_id })
      .andWhere({ dihapus: 0 })
      .fetch();

    let jumlahSoalPg = 0;

    let jumlahSoalEsai = 0;

    await Promise.all(
      soalUjianIds.toJSON().map(async (d) => {
        if (d.soal.bentuk == "pg") {
          jumlahSoalPg = jumlahSoalPg + 1;
        } else if (d.soal.bentuk == "esai") {
          jumlahSoalEsai = jumlahSoalEsai + 1;
        }
      })
    );

    let kontenMateri = [];
    let konteksMateri = [];
    let prosesKognitif = [];
    let levelKognitif = [];
    let bentukSoal = [];

    if (ujian.tipe == "literasi") {
      kontenMateri = [
        { value: "teks_informasi", label: "Teks Informasi" },
        { value: "teks_fiksi", label: "Teks Fiksi" },
        { value: "bilangan", label: "Bilangan" },
      ];

      konteksMateri = [
        { value: "personal", label: "Personal" },
        { value: "sosbud", label: "Sosial Budaya" },
        { value: "saintifik", label: "Saintifik" },
      ];

      prosesKognitif = [
        { value: "menemukan_informasi", label: "Menemukan Informasi" },
        {
          value: "interpretasi_integrasi",
          label: "Interpretasi dan Integrasi",
        },
        { value: "evaluasi_refleksi", label: "Evaluasi dan Refleksi" },
      ];

      bentukSoal = [
        { value: "pg", label: "Pilihan Ganda" },
        { value: "pg_kompleks", label: "Pilihan Ganda Kompleks" },
        { value: "esai", label: "Isian" },
        { value: "uraian", label: "Uraian" },
        { value: "menjodohkan", label: "Menjodohkan" },
      ];
    } else if (ujian.tipe == "numerasi") {
      kontenMateri = [
        { value: "geometri_pengukuran", label: "Geometri dan Pengukuran" },
        { value: "data_ketidakpastian", label: "Data dan Ketidakpastian" },
        { value: "aljabar", label: "Aljabar" },
      ];

      konteksMateri = [
        { value: "personal", label: "Personal" },
        { value: "sosbud", label: "Sosial Budaya" },
        { value: "saintifik", label: "Saintifik" },
      ];

      prosesKognitif = [
        { value: "pemahaman", label: "Pemahaman" },
        { value: "penerapan", label: "Penerapan" },
        { value: "penalaran", label: "Penalaran" },
      ];

      bentukSoal = [
        { value: "pg", label: "Pilihan Ganda" },
        { value: "pg_kompleks", label: "Pilihan Ganda Kompleks" },
        { value: "esai", label: "Isian" },
        { value: "uraian", label: "Uraian" },
        { value: "menjodohkan", label: "Menjodohkan" },
      ];
    } else {
      levelKognitif = [
        { value: "c1", label: "Mengingat" },
        { value: "c2", label: "Memahami" },
        { value: "c3", label: "Menerapkan" },
        { value: "c4", label: "Menganalisis" },
        { value: "c5", label: "Mengevaluasi" },
        { value: "c6", label: "Mengkreasi" },
      ];
      bentukSoal = [
        { value: "pg", label: "Pilihan Ganda" },
        { value: "esai", label: "Esai" },
        { value: "esai", label: "Isian" },
      ];
    }

    let tingkatData;

    if (sekolah.tingkat == "SMK" || sekolah.tingkat == "SMA") {
      tingkatData = ["X", "XI", "XII", "XIII"];
    } else if (sekolah.tingkat == "SMP") {
      tingkatData = ["VII", "VIII", "IX"];
    } else if (sekolah.tingkat == "SD") {
      tingkatData = ["I", "II", "III", "IV", "V", "VI"];
    } else if (sekolah.tingkat == "SLB") {
      tingkatData = [
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX",
        "X",
        "XI",
        "XII",
      ];
    }

    return response.ok({
      ujian: { ...ujian.toJSON(), soalUjian: filterUjian },
      kontenMateri,
      konteksMateri,
      prosesKognitif,
      bentukSoal,
      levelKognitif,
      jumlahSoalPg: jumlahSoalPg,
      jumlahSoalEsai: jumlahSoalEsai,
      // filter
      tingkat: tingkatData,
    });
  }

  async postUjian({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, tipe, tingkat, m_mata_pelajaran_id, ujian_id } =
      request.post();

    const rules = {
      nama: "required",
      tipe: "required",
      tingkat: "required",
    };
    const message = {
      "nama.required": "Nama Ujian harus diisi",
      "tipe.required": "Tipe Ujian harus dipilih",
      "tingkat.required": "Tingkat Kelas harus dipilih",
      "m_mata_pelajaran_id.required": "Mata Pelajaran harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const ujian = await MUjian.create({
      nama,
      tipe,
      tingkat,
      m_mata_pelajaran_id,
      m_user_id: user.id,
      dihapus: 0,
    });

    if (ujian_id) {
      const soalIds = await TkSoalUjian.query()
        .where({ m_ujian_id: ujian_id })
        .andWhere({ dihapus: 0 })
        .pluck("m_soal_ujian_id");
      soalIds.map(async (item) => {
        await TkSoalUjian.create({
          m_ujian_id: ujian.id,
          m_soal_ujian_id: item,
          dihapus: 0,
        });
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putUjian({ response, request, auth, params: { ujian_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, tipe, tingkat, m_mata_pelajaran_id } = request.post();
    const rules = {
      nama: "required",
      tipe: "required",
      tingkat: "required",
    };
    const message = {
      "nama.required": "Nama Ujian harus diisi",
      "tipe.required": "Tipe Ujian harus dipilih",
      "tingkat.required": "Tingkat Kelas harus dipilih",
      "m_mata_pelajaran_id.required": "Mata Pelajaran harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const ujian = await MUjian.query().where({ id: ujian_id }).update({
      nama,
      tipe,
      tingkat,
      m_mata_pelajaran_id,
    });

    if (!ujian) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteUjian({ response, request, auth, params: { ujian_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ujian = await MUjian.query().where({ id: ujian_id }).update({
      dihapus: 1,
    });

    if (!ujian) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getSoalUjian({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const mataPelajaran = await MMataPelajaran.query()
      .where({ dihapus: 0 })
      .andWhere({ m_user_id: user.id })
      .andWhere({ m_ta_id: ta.id })
      .fetch();

    const ujian = await MUjian.query().where({ dihapus: 0 }).fetch();

    let tingkat = [];

    if (sekolah.tingkat == "SMK" || sekolah.tingkat == "SMA") {
      tingkat = ["X", "XI", "XII", "XIII"];
    } else if (sekolah.tingkat == "SMP") {
      tingkat = ["VII", "VIII", "IX"];
    } else if (sekolah.tingkat == "SD") {
      tingkat = ["I", "II", "III", "IV", "V", "VI"];
    } else if (sekolah.tingkat == "SLB") {
      tingkat = [
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX",
        "X",
        "XI",
        "XII",
      ];
    }

    let tipeUjian = [
      { value: "kuis", label: "Kuis" },
      { value: "ph", label: "Penilaian Harian" },
      { value: "pts1", label: "Penilaian Tengah Semester 1" },
      { value: "pts2", label: "Penilaian Tengah Semester 2" },
      { value: "pas1", label: "Penilaian Akhir Semester 1" },
      { value: "pas2", label: "Penilaian Akhir Semester 2" },
      { value: "us", label: "Ujian Sekolah" },
      { value: "literasi", label: "AKM - Literasi" },
      { value: "numerasi", label: "AKM - Numerasi" },
    ];

    return response.ok({
      ujian: ujian,
      mataPelajaran: mataPelajaran,
      tingkat: tingkat,
      tipeUjian: tipeUjian,
    });
  }

  async detailSoalUjian({
    response,
    request,
    auth,
    params: { soal_ujian_id },
  }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const { rombel_id } = request.get();

    let kontenMateri = [
      { value: "teks_informasi", label: "Teks Informasi" },
      { value: "teks_fiksi", label: "Teks Fiksi" },
      { value: "bilangan", label: "Bilangan" },
      { value: "geometri_pengukuran", label: "Geometri dan Pengukuran" },
      { value: "data_ketidakpastian", label: "Data dan Ketidakpastian" },
      { value: "aljabar", label: "Aljabar" },
    ];

    let konteksMateri = [
      { value: "personal", label: "Personal" },
      { value: "sosbud", label: "Sosial Budaya" },
      { value: "saintifik", label: "Saintifik" },
    ];

    let prosesKognitif = [
      { value: "menemukan_informasi", label: "Menemukan Informasi" },
      { value: "interpretasi_integrasi", label: "Interpretasi dan Integrasi" },
      { value: "evaluasi_refleksi", label: "Evaluasi dan Refleksi" },
      { value: "pemahaman", label: "Pemahaman" },
      { value: "penerapan", label: "Penerapan" },
      { value: "penalaran", label: "Penalaran" },
    ];

    let bentukSoal = [
      { value: "pg", label: "Pilihan Ganda" },
      { value: "pg_kompleks", label: "Pilihan Ganda Kompleks" },
      { value: "esai", label: "Isian" },
      { value: "uraian", label: "Uraian" },
      { value: "menjodohkan", label: "Menjodohkan" },
    ];

    return response.ok({
      bentukSoal,
    });
  }

  //belum validasi

  async postSoalUjian({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let {
      kd,
      kd_konten_materi,
      level_kognitif,
      bentuk,
      akm_konten_materi,
      akm_konteks_materi,
      akm_proses_kognitif,
      // pg
      pertanyaan,
      audio,
      jawaban_a,
      jawaban_b,
      jawaban_c,
      jawaban_d,
      jawaban_e,
      kj_pg,
      // esai
      rubrik_kj,
      pembahasan,
      nilai_soal,
      m_ujian_id,
      // uraian
      opsi_a_uraian,
      opsi_b_uraian,
      kj_uraian,
      // pg kompleks
      jawaban_pg_kompleks,
      // menjodohkan
      pilihan_menjodohkan,
      soal_menjodohkan,
      // pilih dari bank soal
      daftar_soal_ujian_id,
    } = request.post();

    if (daftar_soal_ujian_id) {
      let soalUjianData = [];
      if (daftar_soal_ujian_id.length) {
        const check = await TkSoalUjian.query()
          .whereIn("m_soal_ujian_id", daftar_soal_ujian_id)
          .andWhere({ m_ujian_id: m_ujian_id })
          .fetch();
        daftar_soal_ujian_id.map((d) => {
          if (check.toJSON().findIndex((tk) => tk.m_soal_ujian_id == d) < 0) {
            soalUjianData.push({
              m_ujian_id: m_ujian_id,
              m_soal_ujian_id: d,
              dihapus: 0,
            });
          }
        });
      }

      await TkSoalUjian.createMany(soalUjianData);

      return response.ok({
        message: messagePostSuccess,
      });
    }
    jawaban_pg_kompleks = jawaban_pg_kompleks
      ? jawaban_pg_kompleks.toString()
      : null;
    pilihan_menjodohkan = pilihan_menjodohkan
      ? pilihan_menjodohkan.toString()
      : null;
    soal_menjodohkan = soal_menjodohkan
      ? JSON.stringify(soal_menjodohkan)
      : null;

    const soalUjian = await MSoalUjian.create({
      kd,
      kd_konten_materi,
      level_kognitif,
      bentuk,
      akm_konten_materi,
      akm_konteks_materi,
      akm_proses_kognitif,
      audio,
      pertanyaan: htmlEscaper.escape(pertanyaan),
      jawaban_a: htmlEscaper.escape(jawaban_a),
      jawaban_b: htmlEscaper.escape(jawaban_b),
      jawaban_c: htmlEscaper.escape(jawaban_c),
      jawaban_d: htmlEscaper.escape(jawaban_d),
      jawaban_e: htmlEscaper.escape(jawaban_e),
      kj_pg,
      kj_uraian,
      jawaban_pg_kompleks,
      pilihan_menjodohkan,
      soal_menjodohkan,
      opsi_a_uraian,
      opsi_b_uraian,
      rubrik_kj: JSON.stringify(rubrik_kj),
      pembahasan: htmlEscaper.escape(pembahasan),
      nilai_soal,
      m_user_id: user.id,
      dihapus: 0,
    });

    const tkSoalUjian = await TkSoalUjian.create({
      dihapus: 0,
      m_ujian_id: m_ujian_id,
      m_soal_ujian_id: soalUjian.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async importSoalUjianServices(filelocation, user, m_ujian_id) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Sheet1");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 13) {
        data.push({
          kd: "" + explanation.getCell("A" + rowNumber).value,
          kd_konten_materi: "" + explanation.getCell("B" + rowNumber).value,
          level_kognitif: "" + explanation.getCell("C" + rowNumber).value,
          bentuk: "" + explanation.getCell("D" + rowNumber).value,
          // akm_konten_materi: '' + explanation.getCell("A" + rowNumber).value,
          // akm_konteks_materi: '' + explanation.getCell("A" + rowNumber).value,
          // akm_proses_kognitif: '' + explanation.getCell("A" + rowNumber).value,
          pertanyaan: "" + explanation.getCell("E" + rowNumber).value,
          jawaban_a: "" + explanation.getCell("F" + rowNumber).value,
          jawaban_b: "" + explanation.getCell("G" + rowNumber).value,
          jawaban_c: "" + explanation.getCell("H" + rowNumber).value,
          jawaban_d: "" + explanation.getCell("I" + rowNumber).value,
          jawaban_e: "" + explanation.getCell("J" + rowNumber).value,
          kj_pg: "" + explanation.getCell("K" + rowNumber).value,
          pembahasan: "" + explanation.getCell("L" + rowNumber).value,
          nilai_soal: "" + explanation.getCell("M" + rowNumber).value,
        });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        const soalUjian = await MSoalUjian.create({
          kd: d.kd,
          kd_konten_materi: d.kd_konten_materi,
          level_kognitif: d.level_kognitif,
          bentuk: d.bentuk,
          // akm_konten_materi,
          // akm_konteks_materi,
          // akm_proses_kognitif,
          pertanyaan: htmlEscaper.escape(d.pertanyaan),
          jawaban_a: htmlEscaper.escape(d.jawaban_a),
          jawaban_b: htmlEscaper.escape(d.jawaban_b),
          jawaban_c: htmlEscaper.escape(d.jawaban_c),
          jawaban_d: htmlEscaper.escape(d.jawaban_d),
          jawaban_e: htmlEscaper.escape(d.jawaban_e),
          kj_pg: d.kj_pg,
          // rubrik_kj: JSON.stringify(rubrik_kj),
          pembahasan: htmlEscaper.escape(d.pembahasan),
          nilai_soal: d.nilai_soal,
          m_user_id: user.id,
          dihapus: 0,
        });

        const tkSoalUjian = await TkSoalUjian.create({
          dihapus: 0,
          m_ujian_id: m_ujian_id,
          m_soal_ujian_id: soalUjian.id,
        });
      })
    );

    return result;
  }

  async importSoalUjian({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let file = request.file("file");

    let fname = `import-excel-soal-${new Date().getTime()}.xlsx`;

    const user = await auth.getUser();

    const { m_ujian_id } = request.post();

    //move uploaded file into custom folder
    await file.move(Helpers.publicPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importSoalUjianServices(
      `${Helpers.publicPath("/uploads")}/${fname}`,
      user,
      m_ujian_id
    );
  }

  async putSoalUjian({ response, request, auth, params: { soal_ujian_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let {
      kd,
      kd_konten_materi,
      level_kognitif,
      bentuk,
      akm_konten_materi,
      akm_konteks_materi,
      akm_proses_kognitif,
      // pg
      pertanyaan,
      audio,
      jawaban_a,
      jawaban_b,
      jawaban_c,
      jawaban_d,
      jawaban_e,
      kj_pg,
      // esai
      rubrik_kj,
      pembahasan,
      nilai_soal,
      // uraian
      opsi_a_uraian,
      opsi_b_uraian,
      kj_uraian,
      // pg kompleks
      jawaban_pg_kompleks,
      // menjodohkan
      pilihan_menjodohkan,
      soal_menjodohkan,
    } = request.post();

    jawaban_pg_kompleks = jawaban_pg_kompleks
      ? jawaban_pg_kompleks.toString()
      : null;
    pilihan_menjodohkan = pilihan_menjodohkan
      ? pilihan_menjodohkan.toString()
      : null;
    soal_menjodohkan = soal_menjodohkan
      ? JSON.stringify(soal_menjodohkan)
      : null;

    const soalUjian = await MSoalUjian.query()
      .where({ id: soal_ujian_id })
      .update({
        kd,
        kd_konten_materi,
        level_kognitif,
        bentuk,
        akm_konten_materi,
        akm_konteks_materi,
        akm_proses_kognitif,
        audio,
        pertanyaan: htmlEscaper.escape(pertanyaan),
        jawaban_a: htmlEscaper.escape(jawaban_a),
        jawaban_b: htmlEscaper.escape(jawaban_b),
        jawaban_c: htmlEscaper.escape(jawaban_c),
        jawaban_d: htmlEscaper.escape(jawaban_d),
        jawaban_e: htmlEscaper.escape(jawaban_e),
        kj_pg,
        kj_uraian,
        jawaban_pg_kompleks,
        pilihan_menjodohkan,
        soal_menjodohkan,
        opsi_a_uraian,
        opsi_b_uraian,
        rubrik_kj: JSON.stringify(rubrik_kj),
        pembahasan: htmlEscaper.escape(pembahasan),
        nilai_soal,
      });

    if (!soalUjian) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteSoalUjian({
    response,
    request,
    auth,
    params: { soal_ujian_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { m_ujian_id } = request.post();

    let soalUjian, tkSoalUjian;
    if (!m_ujian_id) {
      soalUjian = await MSoalUjian.query()
        .where({ id: soal_ujian_id })
        .delete();
    } else {
      tkSoalUjian = await TkSoalUjian.query()
        .where({ m_soal_ujian_id: soal_ujian_id })
        .andWhere({ m_ujian_id: m_ujian_id })
        .update({
          dihapus: 1,
        });
    }

    if (soalUjian > 0 || tkSoalUjian > 0) {
      return response.ok({
        message: messageDeleteSuccess,
      });
    }

    return response.notFound({
      message: messageNotFound,
    });
  }

  async getJadwalUjian({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const { status, page, search } = request.get();

    const hari_ini = moment().format("YYYY-MM-DD HH:mm");

    const user = await auth.getUser();

    const count = await MJadwalUjian.query()
      .where({ m_user_id: user.id })
      .andWhere({ dihapus: 0 })
      .andWhere("waktu_ditutup", ">=", hari_ini)
      .count("* as total");
    const total = count[0].total;

    if (user.role == "guru") {
      const mataPelajaranIds = await MMataPelajaran.query()
        .where({ m_user_id: user.id })
        .ids();

      const rombelIds = await MJadwalMengajar.query()
        .with("rombel")
        .with("mataPelajaran")
        .whereIn("m_mata_pelajaran_id", mataPelajaranIds)
        .pluck("m_rombel_id");

      const rombel = await MRombel.query()
        .whereIn("id", rombelIds)
        .andWhere({ dihapus: 0 })
        .fetch();

      const jadwalIds = await TkJadwalUjian.query()
        .whereIn("m_rombel_id", rombelIds)
        .andWhere({ dihapus: 0 })
        .distinct("m_jadwal_ujian_id")
        .pluck("m_jadwal_ujian_id");

      const jadwalLainnya = await MJadwalUjian.query()
        .with("ujian", (builder) => {
          if (search) {
            builder.where("nama", "like", `%${search}%`);
          }
        })
        .whereNot({ m_user_id: user.id })
        .whereIn(
          "m_user_id",
          await User.query()
            .where({ role: "admin" })
            .where({ dihapus: 0 })
            .where({ m_sekolah_id: sekolah.id })
            .ids()
        )
        .whereIn("id", jadwalIds)
        .andWhere({ dihapus: 0 })
        .andWhere("waktu_dibuka", "<=", hari_ini)
        .andWhere("waktu_ditutup", ">=", hari_ini)
        .orderBy("waktu_dibuka", "desc")
        .fetch();

      let jadwalUjian;

      if (status == "akan-datang") {
        jadwalUjian = await MJadwalUjian.query()
          .with("ujian", (builder) => {
            if (search) {
              builder.where("nama", "like", `%${search}%`);
            }
          })
          .where({ m_user_id: user.id })
          .andWhere({ dihapus: 0 })
          .andWhere("waktu_dibuka", ">", hari_ini)
          .orderBy("waktu_dibuka", "desc")
          .fetch();
      } else if (status == "berlangsung") {
        jadwalUjian = await MJadwalUjian.query()
          .with("ujian", (builder) => {
            if (search) {
              builder.where("nama", "like", `%${search}%`);
            }
          })
          .where({ m_user_id: user.id })
          .andWhere({ dihapus: 0 })
          .andWhere("waktu_dibuka", "<=", hari_ini)
          .andWhere("waktu_ditutup", ">=", hari_ini)
          .orderBy("waktu_dibuka", "desc")
          .fetch();
      } else if (status == "sudah-selesai") {
        const ujianIds = await MUjian.query()
          .where("nama", "like", `%${search}%`)
          .andWhere({ m_user_id: user.id })
          .andWhere({ dihapus: 0 })
          // .andWhere({ m_sekolah_id: sekolah.id })
          .ids();

        jadwalUjian = await MJadwalUjian.query()
          .with("ujian")
          .whereIn("m_ujian_id", ujianIds)
          // .where({ m_user_id: user.id })
          .andWhere({ dihapus: 0 })
          .andWhere("waktu_ditutup", "<=", hari_ini)
          .orderBy("waktu_dibuka", "desc")
          .paginate(page, 10);
      }

      const jadwalUjianDataFormat = [];

      if (status == "sudah-selesai") {
        await Promise.all(
          jadwalUjian
            .toJSON()
            .data.filter((item) => item.ujian)
            .map(async (jadwalUjianData) => {
              const tkJadwalUjian = await TkJadwalUjian.query()
                .with("rombel")
                .where({ m_jadwal_ujian_id: jadwalUjianData.id })
                .fetch();

              let metaJadwalUjian = {
                remedial: 0,
                susulan: 0,
                diatasKKM: 0,
              };
              jadwalUjianDataFormat.push({
                jadwalUjian: jadwalUjianData,
                rombel: tkJadwalUjian,
                metaJadwalUjian: metaJadwalUjian,
              });
            })
        );
      } else {
        await Promise.all(
          jadwalUjian
            .toJSON()
            .filter((item) => item.ujian)
            .map(async (jadwalUjianData) => {
              const tkJadwalUjian = await TkJadwalUjian.query()
                .with("rombel")
                .where({ m_jadwal_ujian_id: jadwalUjianData.id })
                .fetch();

              let metaJadwalUjian = {
                remedial: 0,
                susulan: 0,
                diatasKKM: 0,
              };

              jadwalUjianDataFormat.push({
                jadwalUjian: jadwalUjianData,
                rombel: tkJadwalUjian,
                metaJadwalUjian: metaJadwalUjian,
              });
            })
        );
        await Promise.all(
          jadwalLainnya
            .toJSON()
            .filter((item) => item.ujian)
            .map(async (jadwalUjianData) => {
              const tkJadwalUjian = await TkJadwalUjian.query()
                .with("rombel")
                .where({ m_jadwal_ujian_id: jadwalUjianData.id })
                .fetch();

              let metaJadwalUjian = {
                remedial: 0,
                susulan: 0,
                diatasKKM: 0,
              };

              jadwalUjianDataFormat.push({
                jadwalUjian: jadwalUjianData,
                rombel: tkJadwalUjian,
                metaJadwalUjian: metaJadwalUjian,
              });
            })
        );
      }

      const ujian = await MUjian.query()
        .where({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .fetch();

      if (status == "sudah-selesai") {
        return response.ok({
          rombel,
          jadwalUjian: jadwalUjianDataFormat,
          ujian,
          totalData: jadwalUjian.toJSON().total,
          lastPage: jadwalUjian.toJSON().lastPage,
          total,
        });
      } else {
        return response.ok({
          rombel,
          jadwalUjian: jadwalUjianDataFormat,
          ujian,
          total,
        });
      }
    } else if (user.role == "admin") {
      const rombel = await MRombel.query()
        .where({ dihapus: 0 })
        .andWhere({ m_ta_id: ta.id })
        .andWhere({ m_sekolah_id: sekolah.id })
        .fetch();

      const userIds = await User.query()
        .where({ m_sekolah_id: sekolah.id })
        .whereIn("role", ["admin", "guru"])
        .ids();

      let jadwalUjian;

      if (status == "akan-datang") {
        jadwalUjian = await MJadwalUjian.query()
          .with("ujian", (builder) => {
            if (search) {
              builder.where("nama", "like", `%${search}%`);
            }
          })
          .whereIn("m_user_id", userIds)
          .andWhere({ dihapus: 0 })
          .andWhere("waktu_dibuka", ">", hari_ini)
          .orderBy("id", "desc")
          .fetch();
      } else if (status == "berlangsung") {
        jadwalUjian = await MJadwalUjian.query()
          .with("ujian", (builder) => {
            if (search) {
              builder.where("nama", "like", `%${search}%`);
            }
          })
          .whereIn("m_user_id", userIds)
          .andWhere({ dihapus: 0 })
          .andWhere("waktu_dibuka", "<=", hari_ini)
          .andWhere("waktu_ditutup", ">=", hari_ini)
          .orderBy("id", "desc")
          .fetch();
      } else if (status == "sudah-selesai") {
        const ujianIds = await MUjian.query()
          .where("nama", "like", `%${search}%`)
          .andWhere({ dihapus: 0 })
          .whereIn("m_user_id", userIds)
          // .andWhere({ m_sekolah_id: sekolah.id })
          .ids();

        jadwalUjian = await MJadwalUjian.query()
          .with("ujian")
          .whereIn("m_ujian_id", ujianIds)
          .andWhere({ dihapus: 0 })
          .andWhere("waktu_ditutup", "<=", hari_ini)
          .orderBy("id", "desc")
          .paginate(page, 10);
      }

      const jadwalUjianDataFormat = [];

      if (status == "sudah-selesai") {
        await Promise.all(
          jadwalUjian
            .toJSON()
            .data.filter((item) => item.ujian)
            .map(async (jadwalUjianData) => {
              const tkJadwalUjian = await TkJadwalUjian.query()
                .with("rombel")
                .where({ m_jadwal_ujian_id: jadwalUjianData.id })
                .fetch();

              let metaJadwalUjian = {
                remedial: 0,
                susulan: 0,
                diatasKKM: 0,
              };
              jadwalUjianDataFormat.push({
                jadwalUjian: jadwalUjianData,
                rombel: tkJadwalUjian,
                metaJadwalUjian: metaJadwalUjian,
              });
            })
        );
      } else {
        await Promise.all(
          jadwalUjian
            .toJSON()
            .filter((item) => item.ujian)
            .map(async (jadwalUjianData) => {
              const tkJadwalUjian = await TkJadwalUjian.query()
                .with("rombel")
                .where({ m_jadwal_ujian_id: jadwalUjianData.id })
                .fetch();

              let metaJadwalUjian = {
                remedial: 0,
                susulan: 0,
                diatasKKM: 0,
              };

              jadwalUjianDataFormat.push({
                jadwalUjian: jadwalUjianData,
                rombel: tkJadwalUjian,
                metaJadwalUjian: metaJadwalUjian,
              });
            })
        );
      }

      const ujian = await MUjian.query()
        .whereIn("m_user_id", userIds)
        .andWhere({ dihapus: 0 })
        .fetch();
      if (status == "sudah-selesai") {
        return response.ok({
          rombel,
          jadwalUjian: jadwalUjianDataFormat,
          ujian,
          totalData: jadwalUjian.toJSON().total,
          lastPage: jadwalUjian.toJSON().lastPage,
          total,
        });
      } else {
        return response.ok({
          rombel,
          jadwalUjian: jadwalUjianDataFormat,
          ujian,
          total,
        });
      }
    } else if (user.role == "siswa") {
      // get tagihan
      const pembayaran = await MPembayaranSiswa.query()
        .with("rombelPembayaran", (builder) => {
          builder.with("pembayaran", (builder) => {
            builder.where({ dihapus: 0 }).andWhere({ jenis: "ujian" });
          });
        })
        .with("riwayat", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .withCount("riwayat as totalJumlah", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .where({ dihapus: 0 })
        .andWhere({ m_user_id: user.id })
        .andWhere({ status: "belum lunas" })
        .fetch();

      const rombelIds = await MRombel.query()
        .where({ m_ta_id: ta.id })
        .andWhere({ dihapus: 0 })
        .ids();

      const anggotaRombel = await MAnggotaRombel.query()
        .where({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .whereIn("m_rombel_id", rombelIds)
        .pluck("m_rombel_id");

      let jadwalUjian;
      if (status == "akan-datang") {
        jadwalUjian = await TkJadwalUjian.query()
          .with("jadwalUjian", (builder) => {
            builder
              .with("ujian", (builder) => {
                if (search) {
                  builder.where("nama", "like", `%${search}%`);
                }
              })
              .where("waktu_dibuka", ">", hari_ini);
          })
          .where({ dihapus: 0 })
          .whereIn("m_rombel_id", anggotaRombel)
          .fetch();
      } else if (status == "berlangsung") {
        jadwalUjian = await TkJadwalUjian.query()
          .with("jadwalUjian", (builder) => {
            builder
              .with("ujian", (builder) => {
                if (search) {
                  builder.where("nama", "like", `%${search}%`);
                }
              })
              .where("waktu_dibuka", "<=", hari_ini)
              .andWhere("waktu_ditutup", ">", hari_ini);
          })
          .with("peserta", (builder) => {
            builder.where({ m_user_id: user.id });
          })
          .where({ dihapus: 0 })
          .whereIn("m_rombel_id", anggotaRombel)
          .fetch();
      } else if (status == "sudah-selesai") {
        jadwalUjian = await TkJadwalUjian.query()
          .with("jadwalUjian", (builder) => {
            builder
              .with("ujian", (builder) => {
                if (search) {
                  builder.where("nama", "like", `%${search}%`);
                }
              })
              .andWhere("waktu_ditutup", "<", hari_ini);
          })
          .with("peserta", (builder) => {
            builder.where({ m_user_id: user.id });
          })
          .where({ dihapus: 0 })
          .whereIn("m_rombel_id", anggotaRombel)
          .orderBy("created_at", "desc")
          .paginate(page, 10);
      }

      let ujian;
      if (status == "sudah-selesai") {
        ujian = jadwalUjian
          .toJSON()
          .data.filter((d) => d.jadwalUjian !== null && d.jadwalUjian.ujian);
      } else {
        ujian = jadwalUjian
          .toJSON()
          .filter((d) => d.jadwalUjian !== null && d.jadwalUjian.ujian);
      }

      if (ujian.length == 0) {
        return response.notFound({
          message: messageNotFound,
        });
      }
      if (status == "sudah-selesai") {
        return response.ok({
          jadwalUjian: ujian,
          total: ujian.length,
          perPage: jadwalUjian.toJSON().perPage,
          page: jadwalUjian.toJSON().page,
          lastPage: jadwalUjian.toJSON().lastPage,
          pembayaran: pembayaran.toJSON().filter((item) => {
            if (!item.rombelPembayaran.pembayaran) {
              return false;
            }
            if (
              item.ditangguhkan &&
              moment(item.ditangguhkan).toDate() > moment().toDate()
            ) {
              return false;
            } else {
              return true;
            }
          }),
        });
      } else {
        return response.ok({
          jadwalUjian: ujian,
          pembayaran: pembayaran.toJSON().filter((item) => {
            if (!item.rombelPembayaran.pembayaran) {
              return false;
            }
            if (
              item.ditangguhkan &&
              moment(item.ditangguhkan).toDate() > moment().toDate()
            ) {
              return false;
            } else {
              return true;
            }
          }),
        });
      }
    }
  }

  async detailJadwalUjian({
    response,
    request,
    auth,
    params: { jadwal_ujian_id },
  }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { tk_jadwal_ujian_id } = request.get();

    const jadwalUjian = await MJadwalUjian.query()
      .with("rombelUjian", (builder) => {
        builder.with("rombel");
      })
      .with("ujian")
      .where({ id: jadwal_ujian_id })
      .first();

    let pesertaUjianData = [];
    let detailRombel;

    if (tk_jadwal_ujian_id) {
      const tkJadwalUjian = await TkJadwalUjian.query()
        .where({ id: tk_jadwal_ujian_id })
        .pluck("m_rombel_id");

      const anggotaRombel = await MAnggotaRombel.query()
        .where({ m_rombel_id: tkJadwalUjian[0] })
        .andWhere({ dihapus: 0 })
        .pluck("m_user_id");

      detailRombel = await MRombel.query()
        .where({ id: tkJadwalUjian[0] })
        .first();

      pesertaUjianData = await User.query()
        .with("pesertaUjian", (builder) => {
          builder
            .where({ tk_jadwal_ujian_id: tk_jadwal_ujian_id })
            .andWhere({ dihapus: 0 });
        })
        .whereIn("id", anggotaRombel)
        .fetch();
    }

    return response.ok({
      jadwalUjian,
      pesertaUjian: pesertaUjianData,
      rombel: detailRombel,
    });
  }

  async downloadJadwalUjian({ response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { tk_jadwal_ujian_id, m_jadwal_ujian_id } = request.post();
    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const jadwalUjian = await TkJadwalUjian.query()
      .with("peserta", (builder) => {
        builder.with("user"),
          (builder) => {
            builder.select("id", "nama");
          };
      })
      .with("rombel")
      .with("jadwalUjian", (builder) => {
        builder.with("ujian");
      })
      .where({ id: tk_jadwal_ujian_id })
      .first();

    const tkJadwalUjian = await TkJadwalUjian.query()
      .where({ id: tk_jadwal_ujian_id })
      .pluck("m_rombel_id");

    const anggotaRombel = await MAnggotaRombel.query()
      .where({ m_rombel_id: tkJadwalUjian[0] })
      .andWhere({ dihapus: 0 })
      .pluck("m_user_id");

    const pesertaUjianData = await User.query()
      .whereIn("id", anggotaRombel)
      .fetch();

    const workbook = new Excel.Workbook();

    await Promise.all(
      [0].map(async (_, idx) => {
        // Create workbook & add worksheet
        const worksheet = workbook.addWorksheet(
          `${jadwalUjian.toJSON().rombel.nama}`
        );

        await Promise.all(
          pesertaUjianData
            .toJSON()
            .sort((a, b) => ("" + a.nama).localeCompare(b.nama))
            .map(async (d) => {
              await Promise.all(
                jadwalUjian
                  .toJSON()
                  .peserta.sort((a, b) =>
                    ("" + a.user.nama).localeCompare(b.user.nama)
                  )
                  .map(async (e) => {
                    if (d.id == e.m_user_id) {
                      const pesertaUjian = await TkPesertaUjian.query()
                        .with("jawabanSiswa", (builder) => {
                          builder.with("soal");
                        })
                        .with("user")
                        .where({ id: e.id })
                        .first();

                      let metaHasil = {
                        nilaiPg: 0,
                        nilaiEsai: 0,
                        nilaiTotal: 0,
                        benar: 0,
                      };
                      let analisisBenar = {};
                      let analisisTotal = {};

                      await Promise.all(
                        pesertaUjian.toJSON().jawabanSiswa.map(async (d) => {
                          if (d.soal.bentuk == "pg") {
                            if (d.jawaban_pg == d.soal.kj_pg) {
                              metaHasil.nilaiPg =
                                metaHasil.nilaiPg + d.soal.nilai_soal;
                              metaHasil.benar = metaHasil.benar + 1;
                              analisisBenar[d.soal.kd] = analisisBenar[
                                d.soal.kd
                              ]
                                ? analisisBenar[d.soal.kd] + 1
                                : 1;
                            }
                            analisisTotal[d.soal.kd] = analisisTotal[d.soal.kd]
                              ? analisisTotal[d.soal.kd] + 1
                              : 1;
                          } else if (d.soal.bentuk == "esai") {
                            if (JSON.parse(d.jawaban_rubrik_esai)) {
                              if (JSON.parse(d.jawaban_rubrik_esai).length) {
                                JSON.parse(d.jawaban_rubrik_esai).map((e) => {
                                  if (e.benar) {
                                    metaHasil.nilaiEsai =
                                      metaHasil.nilaiEsai + e.poin;
                                  }
                                });

                                if (
                                  d.jawaban_rubrik_esai.indexOf("true") != -1
                                ) {
                                  metaHasil.benar = metaHasil.benar + 1;
                                }
                              }
                            }
                          }
                        })
                      );

                      metaHasil.nilaiTotal =
                        metaHasil.nilaiPg + metaHasil.nilaiEsai;

                      // add column headers
                      worksheet.getRow(10).values = [
                        "Nama",
                        "Nilai PG",
                        "Nilai Esai",
                        "Nilai Total",
                      ];

                      worksheet.columns = [
                        { key: "user" },
                        { key: "nilai_pg" },
                        { key: "nilai_esai" },
                        { key: "nilai_total" },
                      ];

                      // Add row using key mapping to columns
                      const row = worksheet.addRow({
                        user: d.nama,
                        nilai_pg: metaHasil.nilaiPg,
                        nilai_esai: metaHasil.nilaiEsai,
                        nilai_total: metaHasil.nilaiTotal,
                      });
                    }
                  })
              );
            })
        );

        worksheet.getCell("A1").value = "Ujian";
        worksheet.getCell("B1").value =
          jadwalUjian.toJSON().jadwalUjian.ujian.nama;
        worksheet.getCell("D1").value = "Tanggal";
        worksheet.getCell("E1").value = `${
          jadwalUjian.toJSON().jadwalUjian.tanggalUjian
        } ${jadwalUjian.toJSON().jadwalUjian.waktuUjian}`;
        worksheet.getCell("D2").value = "KKM";
        worksheet.getCell("E2").value = jadwalUjian.toJSON().jadwalUjian.kkm;
        worksheet.getCell("A2").value = "Durasi";
        worksheet.getCell("B2").value = `${
          jadwalUjian.toJSON().jadwalUjian.durasi
        } menit`;

        // worksheet.getCell("A4").value = "RPP";
        // worksheet.getCell("A5").value = d.rpp.toString();

        // worksheet.getCell("A7").value = "Deskripsi";
        // worksheet.getCell("A8").value = d.deskripsi;

        // worksheet.columns.forEach(function (column, i) {
        //   let maxLength = 0;
        //   column["eachCell"]({ includeEmpty: true }, function (cell) {
        //     let columnLength = cell.value ? cell.value.toString().length : 10;

        //     if (cell.value == "alpa") {
        //       // red
        //       cell.fill = {
        //         type: "pattern",
        //         pattern: "solid",
        //         fgColor: { argb: "F9D5D4" },
        //         bgColor: { argb: "F9D5D4" },
        //       };

        //       cell.font = {
        //         color: { argb: "FC544B" },
        //       };
        //     }

        //     if (cell.value == "sakit") {
        //       // yellow
        //       cell.fill = {
        //         type: "pattern",
        //         pattern: "solid",
        //         fgColor: { argb: "FCE8D2" },
        //         bgColor: { argb: "FCE8D2" },
        //       };

        //       cell.font = {
        //         color: { argb: "F9AC50" },
        //       };
        //     }

        //     if (cell.value == "izin") {
        //       // green
        //       cell.fill = {
        //         type: "pattern",
        //         pattern: "solid",
        //         fgColor: { argb: "E0FCE4" },
        //         bgColor: { argb: "E0FCE4" },
        //       };

        //       cell.font = {
        //         color: { argb: "63ED7A" },
        //       };
        //     }

        //     if (cell.value == "hadir") {
        //       // green
        //       cell.fill = {
        //         type: "pattern",
        //         pattern: "solid",
        //         fgColor: { argb: "2680EB" },
        //         bgColor: { argb: "2680EB" },
        //       };

        //       cell.font = {
        //         color: { argb: "FFFFFF" },
        //       };
        //     }

        //     if (columnLength > maxLength) {
        //       maxLength = columnLength;
        //     }
        //   });

        //   column.width = maxLength < 15 ? 15 : maxLength > 30 ? 30 : 15;
        // });
        // worksheet.autoFilter = {
        //   from: 'A11',
        //   to: 'D99',
        // }
      })
    );

    let namaFile = `/uploads/rekap-nilai-${new Date().getTime()}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async postJadwalUjian({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      jumlah_pg,
      jumlah_esai,
      kkm,
      waktu_dibuka,
      jumlah_soal_akm,
      durasi,
      gmeet,
      diacak,
      rombel_id,
      m_ujian_id,
    } = request.post();

    const pembuatUjian = await MUjian.query().where({ id: m_ujian_id }).first();

    const jadwalUjian = await MJadwalUjian.create({
      jumlah_pg,
      jumlah_esai,
      jumlah_soal_akm,
      m_ujian_id,
      kkm,
      waktu_dibuka,
      waktu_ditutup: moment(waktu_dibuka)
        .add(durasi, "minutes")
        .format("YYYY-MM-DD HH:mm:ss"),
      durasi,
      gmeet,
      diacak,
      m_user_id: pembuatUjian.m_user_id,
      dihapus: 0,
    });

    let tkJadwalUjianData = [];

    if (rombel_id.length) {
      await Promise.all(
        rombel_id.map(async (rombel) => {
          tkJadwalUjianData.push({
            m_rombel_id: rombel,
            dihapus: 0,
            m_jadwal_ujian_id: jadwalUjian.id,
          });
        })
      );

      await TkJadwalUjian.createMany(tkJadwalUjianData);
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putJadwalUjian({
    response,
    request,
    auth,
    params: { jadwal_ujian_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      jumlah_pg,
      jumlah_esai,
      jumlah_soal_akm,
      kkm,
      waktu_dibuka,
      durasi,
      gmeet,
      diacak,
      rombel_id,
    } = request.post();

    const jadwalUjian = await MJadwalUjian.query()
      .where({ id: jadwal_ujian_id })
      .update({
        jumlah_pg,
        jumlah_esai,
        jumlah_soal_akm,
        kkm,
        waktu_dibuka,
        waktu_ditutup: moment(waktu_dibuka)
          .add(durasi, "minutes")
          .format("YYYY-MM-DD HH:mm:ss"),
        durasi,
        gmeet,
        diacak,
      });

    if (!jadwalUjian) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    let tkJadwalUjianData = [];

    if (rombel_id.length) {
      await Promise.all(
        rombel_id.map(async (rombel) => {
          const check = await TkJadwalUjian.query()
            .where({ m_rombel_id: rombel })
            .andWhere({ m_jadwal_ujian_id: jadwal_ujian_id })
            .first();

          if (!check) {
            tkJadwalUjianData.push({
              m_rombel_id: rombel,
              dihapus: 0,
              m_jadwal_ujian_id: jadwal_ujian_id,
            });
          }
        })
      );

      const tkJadwalUjian = await TkJadwalUjian.createMany(tkJadwalUjianData);
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteJadwalUjian({
    response,
    request,
    auth,
    params: { jadwal_ujian_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const jadwalUjian = await MJadwalUjian.query()
      .where({ id: jadwal_ujian_id })
      .update({
        dihapus: 1,
      });

    const tkJadwalUjian = await TkJadwalUjian.query()
      .where({ m_jadwal_ujian_id: jadwal_ujian_id })
      .update({
        dihapus: 1,
      });

    if (!jadwalUjian || !tkJadwalUjian) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async detailPesertaUjian({
    response,
    request,
    auth,
    params: { peserta_ujian_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { jawaban_siswa_id, siswa } = request.get();

    let pesertaUjian;

    if (user.role == "guru" || siswa || user.role == "admin") {
      pesertaUjian = await TkPesertaUjian.query()
        .with("jadwalUjian", (builder) => {
          builder.with("jadwalUjian", (builder) => {
            builder.with("ujian");
          });
        })
        .with("jawabanSiswa", (builder) => {
          builder.with("soal");
        })
        .with("user")
        .where({ id: peserta_ujian_id })
        .first();

      let semuaPeserta = await TkJadwalUjian.query()
        .with("rombel", (builder) => {
          builder.select("id", "nama");
        })
        .with("peserta", (builder) => {
          builder
            .with("user", (builder) => {
              builder.select("id", "nama");
            })
            .select("id", "m_user_id", "tk_jadwal_ujian_id")
            .whereNotNull("waktu_selesai")
            .orderBy("m_user_id", "asc");
        })
        .where({
          m_jadwal_ujian_id:
            pesertaUjian.toJSON().jadwalUjian.m_jadwal_ujian_id,
        })
        .fetch();

      let metaHasil = { nilaiPg: 0, nilaiEsai: 0, nilaiTotal: 0, benar: 0 };
      let analisisBenar = {};
      let analisisTotal = {};

      await Promise.all(
        pesertaUjian.toJSON().jawabanSiswa.map(async (d) => {
          if (d.soal.bentuk == "pg") {
            if (d.jawaban_pg == d.soal.kj_pg) {
              metaHasil.nilaiPg = metaHasil.nilaiPg + d.soal.nilai_soal;
              metaHasil.benar = metaHasil.benar + 1;
              analisisBenar[d.soal.kd] = analisisBenar[d.soal.kd]
                ? analisisBenar[d.soal.kd] + 1
                : 1;
            }
            analisisTotal[d.soal.kd] = analisisTotal[d.soal.kd]
              ? analisisTotal[d.soal.kd] + 1
              : 1;
          } else if (d.soal.bentuk == "esai") {
            if (JSON.parse(d.jawaban_rubrik_esai)) {
              if (JSON.parse(d.jawaban_rubrik_esai).length) {
                JSON.parse(d.jawaban_rubrik_esai).map((e) => {
                  if (e.benar) {
                    metaHasil.nilaiEsai = metaHasil.nilaiEsai + e.poin;
                  }
                });

                if (d.jawaban_rubrik_esai.indexOf("true") != -1) {
                  metaHasil.benar = metaHasil.benar + 1;
                }
              }
            }
          }
        })
      );

      metaHasil.nilaiTotal = metaHasil.nilaiPg + metaHasil.nilaiEsai;

      analisisBenar = Object.entries(analisisBenar);
      analisisTotal = Object.entries(analisisTotal);

      let analisisData = [];
      let idTmp;

      analisisTotal.map((d) => {
        analisisBenar.map((e) => {
          if (d[0] == e[0]) {
            idTmp = e[0];
            analisisData.push({
              kd: d[0],
              nilai: (e[1] / d[1]) * 100,
              total: d[1],
            });
          }
        });

        if (idTmp != d[0]) {
          analisisData.push({
            kd: d[0],
            nilai: 0 * 100,
            total: d[1],
          });
        }
      });

      return response.ok({
        peserta_ujian: pesertaUjian,
        metaHasil,
        analisisData: analisisData,
        semuaPeserta: semuaPeserta,
      });
    } else {
      pesertaUjian = await TkPesertaUjian.query()
        .with("jadwalUjian", (builder) => {
          builder.with("jadwalUjian", (builder) => {
            builder.with("ujian");
          });
        })
        .withCount("jawabanSiswa as totalSoal")
        .withCount("jawabanSiswa as totalDijawab", (builder) => {
          builder.where({ dijawab: 1 });
        })
        .with("user")
        .where({ id: peserta_ujian_id })
        .first();

      const soal_ids = await TkJawabanUjianSiswa.query()
        .where({ tk_peserta_ujian_id: peserta_ujian_id })
        .select("id", "ragu", "dijawab")
        .fetch();

      let soal_siswa;

      if (jawaban_siswa_id) {
        soal_siswa = await TkJawabanUjianSiswa.query()
          .with("soal", (builder) => {
            builder.select(
              "id",
              "kd",
              "kd_konten_materi",
              "level_kognitif",
              "bentuk_soal",
              "akm_konten_materi",
              "akm_konteks_materi",
              "akm_proses_kognitif",
              "pertanyaan",
              "jawaban_a",
              "jawaban_b",
              "jawaban_c",
              "jawaban_d",
              "jawaban_e",
              "opsi_a_uraian",
              "opsi_b_uraian",
              "pilihan_menjodohkan",
              "soal_menjodohkan",
              "bentuk",
              "dihapus",
              "m_user_id",
              "audio"
            );
          })
          .where({ id: jawaban_siswa_id })
          .first();
      }

      return response.ok({
        peserta_ujian: pesertaUjian,
        soal_ids: soal_ids,
        soal_siswa: soal_siswa,
      });
    }
  }

  async postPesertaUjian({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { tk_jadwal_ujian_id, ujian_id } = request.post();
    const waktu_mulai = moment().format("YYYY-MM-DD HH:mm:ss");

    const ujian = await MUjian.query().where({ id: ujian_id }).first();

    const jadwalUjian = await TkJadwalUjian.query()
      .with("jadwalUjian")
      .where({ id: tk_jadwal_ujian_id })
      .first();

    if (jadwalUjian.toJSON().jadwalUjian.waktu_dibuka > waktu_mulai) {
      return response.forbidden({
        message: messageForbidden,
      });
    }

    let diacak = "id ASC";

    if (jadwalUjian.toJSON().jadwalUjian.diacak) {
      diacak = "RAND()";
    }

    if (ujian.tipe == "literasi" || ujian.tipe == "numerasi") {
      const soalIds = await TkSoalUjian.query()
        .where({ dihapus: 0 })
        .andWhere({ m_ujian_id: ujian_id })
        .pluck("m_soal_ujian_id");

      const soalMasterIds = await MSoalUjian.query()
        .where({ dihapus: 0 })
        .whereIn("id", soalIds)
        .limit(jadwalUjian.toJSON().jadwalUjian.jumlah_soal_akm)
        .ids();

      const soalAKM = await TkSoalUjian.query()
        .with("soal", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .whereIn("m_soal_ujian_id", soalMasterIds)
        .orderByRaw(`${diacak}`)
        .limit(jadwalUjian.toJSON().jadwalUjian.jumlah_soal_akm)
        .fetch();

      const soalData = [];

      const checkIfExist = await TkPesertaUjian.query()
        .where({ m_user_id: user.id })
        .andWhere({ tk_jadwal_ujian_id: tk_jadwal_ujian_id })
        .first();

      if (checkIfExist) {
        return response.ok({
          peserta_ujian: checkIfExist,
        });
      }

      const pesertaUjian = await TkPesertaUjian.create({
        waktu_mulai,
        dinilai: 0,
        selesai: 0,
        dihapus: 0,
        m_user_id: user.id,
        tk_jadwal_ujian_id: tk_jadwal_ujian_id,
      });

      await Promise.all(
        soalAKM.toJSON().map(async (d) => {
          if (d.soal.bentuk == "uraian") {
            soalData.push({
              durasi: 0,
              ragu: 0,
              dijawab: 0,
              dinilai: 1,
              m_soal_ujian_id: d.soal.id,
              tk_peserta_ujian_id: pesertaUjian.id,
            });
          } else if (d.soal.bentuk == "pg_kompleks") {
            soalData.push({
              durasi: 0,
              ragu: 0,
              dijawab: 0,
              dinilai: 1,
              m_soal_ujian_id: d.soal.id,
              tk_peserta_ujian_id: pesertaUjian.id,
            });
          } else if (d.soal.bentuk == "menjodohkan") {
            soalData.push({
              durasi: 0,
              ragu: 0,
              dijawab: 0,
              dinilai: 1,
              m_soal_ujian_id: d.soal.id,
              tk_peserta_ujian_id: pesertaUjian.id,
            });
          } else if (d.soal.bentuk == "esai") {
            soalData.push({
              durasi: 0,
              ragu: 0,
              dijawab: 0,
              m_soal_ujian_id: d.soal.id,
              jawaban_rubrik_esai: d.soal.rubrik_kj,
              tk_peserta_ujian_id: pesertaUjian.id,
            });
          } else if (d.soal.bentuk == "pg") {
            soalData.push({
              durasi: 0,
              ragu: 0,
              dijawab: 0,
              dinilai: 1,
              m_soal_ujian_id: d.soal.id,
              tk_peserta_ujian_id: pesertaUjian.id,
            });
          }
        })
      );

      await TkJawabanUjianSiswa.createMany(soalData);

      const res = await jadwalUjianReference.add({
        tk_jadwal_ujian_id: tk_jadwal_ujian_id,
        user_id: pesertaUjian.m_user_id,
        progress: 0,
        waktu_mulai: waktu_mulai,
      });

      await TkPesertaUjian.query().where({ id: pesertaUjian.id }).update({
        doc_id: res.id,
      });

      return response.ok({
        peserta_ujian: pesertaUjian,
      });
    } else {
      const soalPGIds = await TkSoalUjian.query()
        .where({ dihapus: 0 })
        .andWhere({ m_ujian_id: ujian_id })
        .pluck("m_soal_ujian_id");

      const soalMasterPGIds = await MSoalUjian.query()
        .where({ bentuk: "pg" })
        .andWhere({ dihapus: 0 })
        .whereIn("id", soalPGIds)
        .limit(jadwalUjian.toJSON().jadwalUjian.jumlah_pg)
        .ids();

      const soalPG = await TkSoalUjian.query()
        .where({ m_ujian_id: ujian_id })
        .whereIn("m_soal_ujian_id", soalMasterPGIds)
        .orderByRaw(`${diacak}`)
        .limit(jadwalUjian.toJSON().jadwalUjian.jumlah_pg)
        .fetch();

      const soalEsaiIds = await TkSoalUjian.query()
        .where({ dihapus: 0 })
        .andWhere({ m_ujian_id: ujian_id })
        .pluck("m_soal_ujian_id");

      const soalMasterEsaiIds = await MSoalUjian.query()
        .where({ bentuk: "esai" })
        .andWhere({ dihapus: 0 })
        .whereIn("id", soalEsaiIds)
        .limit(jadwalUjian.toJSON().jadwalUjian.jumlah_esai)
        .ids();

      const soalEsai = await TkSoalUjian.query()
        .with("soal", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .where({ m_ujian_id: ujian_id })
        .whereIn("m_soal_ujian_id", soalMasterEsaiIds)
        .orderByRaw(`${diacak}`)
        .limit(jadwalUjian.toJSON().jadwalUjian.jumlah_esai)
        .fetch();

      const soalData = [];

      const checkIfExist = await TkPesertaUjian.query()
        .where({ m_user_id: user.id })
        .andWhere({ tk_jadwal_ujian_id: tk_jadwal_ujian_id })
        .first();

      if (checkIfExist) {
        return response.ok({
          peserta_ujian: checkIfExist,
        });
      }

      const trx = await Database.beginTransaction();
      const pesertaUjian = await TkPesertaUjian.create(
        {
          waktu_mulai,
          dinilai: 0,
          selesai: 0,
          dihapus: 0,
          m_user_id: user.id,
          tk_jadwal_ujian_id: tk_jadwal_ujian_id,
        },
        trx
      );

      await Promise.all(
        soalPG.toJSON().map(async (d) => {
          soalData.push({
            durasi: 0,
            ragu: 0,
            dijawab: 0,
            dinilai: 1,
            m_soal_ujian_id: d.m_soal_ujian_id,
            tk_peserta_ujian_id: pesertaUjian.id,
          });
        })
      );

      await Promise.all(
        soalEsai.toJSON().map(async (d) => {
          soalData.push({
            durasi: 0,
            ragu: 0,
            dijawab: 0,
            m_soal_ujian_id: d.soal.id,
            jawaban_rubrik_esai: d.soal.rubrik_kj,
            tk_peserta_ujian_id: pesertaUjian.id,
          });
        })
      );

      await TkJawabanUjianSiswa.createMany(soalData, trx);
      await trx.commit();

      const res = await jadwalUjianReference.add({
        tk_jadwal_ujian_id: tk_jadwal_ujian_id,
        user_id: pesertaUjian.m_user_id,
        progress: 0,
        waktu_mulai: waktu_mulai,
      });

      await TkPesertaUjian.query().where({ id: pesertaUjian.id }).update({
        doc_id: res.id,
      });

      return response.ok({
        peserta_ujian: pesertaUjian,
      });
    }
  }

  async putPesertaUjian({
    response,
    request,
    auth,
    params: { peserta_ujian_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const waktu_selesai = moment().format("YYYY-MM-DD HH:mm:ss");

    const pesertaUjian = await TkPesertaUjian.query()
      .where({ id: peserta_ujian_id })
      .update({
        waktu_selesai,
        selesai: 1,
      });

    if (!pesertaUjian) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    const pesertaUjianData = await TkPesertaUjian.query()
      .with("jawabanSiswa", (builder) => {
        builder.with("soal");
      })
      .with("user")
      .where({ id: peserta_ujian_id })
      .first();

    await jadwalUjianReference.doc(`${pesertaUjianData.doc_id}`).set(
      {
        waktu_selesai: waktu_selesai,
      },
      { merge: true }
    );

    let metaHasil = {
      nilaiPg: 0,
      nilaiEsai: 0,
      nilaiTotal: 0,
      benar: 0,
    };
    let analisisBenar = {};
    let analisisTotal = {};

    await Promise.all(
      pesertaUjianData.toJSON().jawabanSiswa.map(async (d) => {
        if (d.soal.bentuk == "pg") {
          if (d.jawaban_pg == d.soal.kj_pg) {
            metaHasil.nilaiPg = metaHasil.nilaiPg + d.soal.nilai_soal;
            metaHasil.benar = metaHasil.benar + 1;
            analisisBenar[d.soal.kd] = analisisBenar[d.soal.kd]
              ? analisisBenar[d.soal.kd] + 1
              : 1;
          }
          analisisTotal[d.soal.kd] = analisisTotal[d.soal.kd]
            ? analisisTotal[d.soal.kd] + 1
            : 1;
        } else if (d.soal.bentuk == "esai") {
          if (JSON.parse(d.jawaban_rubrik_esai)) {
            if (JSON.parse(d.jawaban_rubrik_esai).length) {
              JSON.parse(d.jawaban_rubrik_esai).map((e) => {
                if (e.benar) {
                  metaHasil.nilaiEsai = metaHasil.nilaiEsai + e.poin;
                }
              });

              if (d.jawaban_rubrik_esai.indexOf("true") != -1) {
                metaHasil.benar = metaHasil.benar + 1;
              }
            }
          }
        }
      })
    );

    metaHasil.nilaiTotal = metaHasil.nilaiPg + metaHasil.nilaiEsai;

    await TkPesertaUjian.query().where({ id: peserta_ujian_id }).update({
      nilai_pg: metaHasil.nilaiPg,
      nilai_esai: metaHasil.nilaiEsai,
      nilai: metaHasil.nilaiTotal,
    });

    // await WhatsAppService.sendMessage(
    //   user.whatsapp,
    //   `Halo, jawaban ujianmu sudah masuk. Tunggu gurumu memeriksanya ya!`
    // );

    return response.ok({
      message: "Jawaban berhasil direkam",
    });
  }

  async updateNilai({ response, request, auth, params: { peserta_ujian_id } }) {
    const pesertaUjianData = await TkPesertaUjian.query()
      .with("jawabanSiswa", (builder) => {
        builder.with("soal");
      })
      .with("user")
      .where({ id: peserta_ujian_id })
      .first();

    let metaHasil = {
      nilaiPg: 0,
      nilaiEsai: 0,
      nilaiTotal: 0,
      benar: 0,
    };
    let analisisBenar = {};
    let analisisTotal = {};

    await Promise.all(
      pesertaUjianData.toJSON().jawabanSiswa.map(async (d) => {
        if (d.soal.bentuk == "pg") {
          if (d.jawaban_pg == d.soal.kj_pg) {
            metaHasil.nilaiPg = metaHasil.nilaiPg + d.soal.nilai_soal;
            metaHasil.benar = metaHasil.benar + 1;
            analisisBenar[d.soal.kd] = analisisBenar[d.soal.kd]
              ? analisisBenar[d.soal.kd] + 1
              : 1;
          }
          analisisTotal[d.soal.kd] = analisisTotal[d.soal.kd]
            ? analisisTotal[d.soal.kd] + 1
            : 1;
        } else if (d.soal.bentuk == "esai") {
          if (JSON.parse(d.jawaban_rubrik_esai)) {
            if (JSON.parse(d.jawaban_rubrik_esai).length) {
              JSON.parse(d.jawaban_rubrik_esai).map((e) => {
                if (e.benar) {
                  metaHasil.nilaiEsai = metaHasil.nilaiEsai + e.poin;
                }
              });

              if (d.jawaban_rubrik_esai.indexOf("true") != -1) {
                metaHasil.benar = metaHasil.benar + 1;
              }
            }
          }
        }
      })
    );

    metaHasil.nilaiTotal = metaHasil.nilaiPg + metaHasil.nilaiEsai;
    await TkPesertaUjian.query().where({ id: peserta_ujian_id }).update({
      nilai_pg: metaHasil.nilaiPg,
      nilai_esai: metaHasil.nilaiEsai,
      nilai: metaHasil.nilaiTotal,
    });

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async putJawabanUjianSiswa({
    response,
    request,
    auth,
    params: { jawaban_ujian_siswa_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let {
      jawaban_pg,
      jawaban_esai,
      durasi,
      ragu,
      jawaban_rubrik_esai,
      jawaban_opsi_uraian,
      jawaban_uraian,
      jawaban_pg_kompleks,
      jawaban_menjodohkan,
      jawaban_foto,
    } = request.post();
    jawaban_esai = jawaban_esai ? htmlEscaper.escape(jawaban_esai) : "";
    jawaban_pg_kompleks = jawaban_pg_kompleks
      ? jawaban_pg_kompleks.toString()
      : null;
    jawaban_foto = jawaban_foto ? jawaban_foto.toString() : null;
    jawaban_menjodohkan = jawaban_menjodohkan
      ? JSON.stringify(jawaban_menjodohkan)
      : null;

    if (user.role == "guru" || user.role == "admin") {
      await TkJawabanUjianSiswa.query()
        .where({ id: jawaban_ujian_siswa_id })
        .update({
          jawaban_rubrik_esai: JSON.stringify(jawaban_rubrik_esai),
          dinilai: 1,
        });

      const jawaban = await TkJawabanUjianSiswa.query()
        .where({ id: jawaban_ujian_siswa_id })
        .first();

      const pesertaUjian = await TkPesertaUjian.query()
        .with("jawabanSiswa", (builder) => {
          builder.with("soal");
        })
        .with("user")
        .where({ id: jawaban.tk_peserta_ujian_id })
        .first();

      // return pesertaUjian;

      let metaHasil = {
        nilaiPg: 0,
        nilaiEsai: 0,
        nilaiTotal: 0,
        benar: 0,
      };

      await Promise.all(
        pesertaUjian.toJSON().jawabanSiswa.map(async (d) => {
          if (d.soal.bentuk == "esai") {
            if (JSON.parse(d.jawaban_rubrik_esai)) {
              if (JSON.parse(d.jawaban_rubrik_esai).length) {
                JSON.parse(d.jawaban_rubrik_esai).map((e) => {
                  if (e.benar) {
                    metaHasil.nilaiEsai = metaHasil.nilaiEsai + e.poin;
                  }
                });

                if (d.jawaban_rubrik_esai.indexOf("true") != -1) {
                  metaHasil.benar = metaHasil.benar + 1;
                }
              }
            }
          }
        })
      );

      await TkPesertaUjian.query()
        .where({ id: jawaban.tk_peserta_ujian_id })
        .update({
          nilai_esai: metaHasil.nilaiEsai,
          nilai: pesertaUjian.nilai_pg + metaHasil.nilaiEsai,
        });

      return response.ok({
        message: messagePutSuccess,
      });
    } else if (user.role == "siswa") {
      let jawabanUjianSiswa;

      if (jawaban_opsi_uraian) {
        jawabanUjianSiswa = await TkJawabanUjianSiswa.query()
          .where({ id: jawaban_ujian_siswa_id })
          .update({
            jawaban_opsi_uraian,
            jawaban_uraian,
            durasi,
            ragu,
            dijawab: 1,
            jawaban_foto,
          });
      } else if (jawaban_pg_kompleks) {
        jawabanUjianSiswa = await TkJawabanUjianSiswa.query()
          .where({ id: jawaban_ujian_siswa_id })
          .update({
            jawaban_pg_kompleks,
            durasi,
            ragu,
            dijawab: 1,
          });
      }
      if (jawaban_menjodohkan) {
        jawabanUjianSiswa = await TkJawabanUjianSiswa.query()
          .where({ id: jawaban_ujian_siswa_id })
          .update({
            jawaban_menjodohkan,
            durasi,
            ragu,
            dijawab: 1,
          });
      } else if (jawaban_esai) {
        jawabanUjianSiswa = await TkJawabanUjianSiswa.query()
          .where({ id: jawaban_ujian_siswa_id })
          .update({
            jawaban_esai,
            durasi,
            ragu,
            dijawab: 1,
            jawaban_foto,
          });
      } else if (jawaban_pg) {
        jawabanUjianSiswa = await TkJawabanUjianSiswa.query()
          .where({ id: jawaban_ujian_siswa_id })
          .update({
            jawaban_pg,
            durasi,
            ragu,
            dijawab: 1,
          });

        const nilaiSiswa = await TkJawabanUjianSiswa.query()
          .with("soal")
          .where({ id: jawaban_ujian_siswa_id })
          .first();

        if (jawaban_pg == nilaiSiswa.toJSON().soal.kj_pg) {
          const nilai = await TkPesertaUjian.query()
            .where({ id: nilaiSiswa.tk_peserta_ujian_id })
            .first();

          await TkPesertaUjian.query()
            .where({ id: nilaiSiswa.tk_peserta_ujian_id })
            .update({
              nilai: nilai ? nilai.nilai : 0 + nilaiSiswa.toJSON().soal.poin,
            });
        }
      } else {
        jawabanUjianSiswa = await TkJawabanUjianSiswa.query()
          .where({ id: jawaban_ujian_siswa_id })
          .update({
            ragu,
          });
      }

      if (!jawabanUjianSiswa) {
        return response.notFound({
          message: messageNotFound,
        });
      }

      const jawabanUjianSiswaData = await TkJawabanUjianSiswa.query()
        .with("pesertaUjian", (builder) => {
          builder.withCount("jawabanSiswa as totalDijawab", (builder) => {
            builder.where({ dijawab: 1 });
          });
        })
        .where({ id: jawaban_ujian_siswa_id })
        .first();

      // await jadwalUjianReference
      //   .doc(`${jawabanUjianSiswaData.toJSON().pesertaUjian.doc_id}`)
      //   .set(
      //     {
      //       tk_jadwal_ujian_id:
      //         jawabanUjianSiswaData.toJSON().pesertaUjian.tk_jadwal_ujian_id,
      //       user_id: jawabanUjianSiswaData.toJSON().pesertaUjian.m_user_id,
      //       progress:
      //         jawabanUjianSiswaData.toJSON().pesertaUjian.__meta__.totalDijawab,
      //     },
      //     { merge: true }
      //   );

      return response.ok({
        doc_id: jawabanUjianSiswaData.toJSON().pesertaUjian.doc_id,
        tk_jadwal_ujian_id:
          jawabanUjianSiswaData.toJSON().pesertaUjian.tk_jadwal_ujian_id,
        user_id: jawabanUjianSiswaData.toJSON().pesertaUjian.m_user_id,
        progress:
          jawabanUjianSiswaData.toJSON().pesertaUjian.__meta__.totalDijawab,
      });
    }
  }

  async getSlider({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const slider = await MSlider.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .orderBy("id", "desc")
      .fetch();

    return response.ok({
      slider: slider,
    });
  }

  async postSlider({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { banner, judul, deskripsi } = request.post();

    const rules = {
      judul: "required",
      banner: "required",
      deskripsi: "required",
    };
    const message = {
      "judul.required": "Judul harus diisi",
      "banner.required": "Banner harus diisi",
      "deskripsi.required": "Deskripsi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const slider = await MSlider.create({
      banner,
      judul,
      deskripsi,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putSlider({ response, request, auth, params: { slider_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { banner, judul, deskripsi } = request.post();

    const rules = {
      judul: "required",
      banner: "required",
      deskripsi: "required",
    };
    const message = {
      "judul.required": "Judul harus diisi",
      "banner.required": "Banner harus diisi",
      "deskripsi.required": "Deskripsi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const slider = await MSlider.query().where({ id: slider_id }).update({
      banner,
      judul,
      deskripsi,
    });

    if (!slider) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteSlider({ response, request, auth, params: { slider_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const slider = await MSlider.query().where({ id: slider_id }).update({
      dihapus: 1,
    });

    if (!slider) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getInformasiSekolah({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { section } = request.get();

    let informasiSekolah;

    if (section == "beranda") {
      informasiSekolah = await MInformasiSekolah.query()
        .select(
          "deskripsi_singkat",
          "visi",
          "misi",
          "background_section_mengapa",
          "jumlah_siswa",
          "jumlah_guru",
          "jumlah_kelas",
          "thumbnail_profil",
          "video_profil",
          "background_section_virtual_tour",
          "virtual_tour"
        )
        .where({ m_sekolah_id: sekolah.id })
        .first();
    } else if (section == "profil") {
      informasiSekolah = await MInformasiSekolah.query()
        .select(
          "banner_profil",
          "deskripsi_sekolah",
          "foto_tentang_sekolah",
          "pesan_kepsek",
          "foto_kepsek",
          "sejarah",
          "foto_sejarah",
          "foto_logo",
          "lirik_mars",
          "lagu_mars",
          "alamat",
          "gmaps",
          "email",
          "telp",
          "fax"
        )
        .where({ m_sekolah_id: sekolah.id })
        .first();
    } else if (section == "sarpras") {
      informasiSekolah = await MInformasiSekolah.query()
        .select("banner_sarpras")
        .where({ m_sekolah_id: sekolah.id })
        .first();
    } else if (section == "blog") {
      informasiSekolah = await MInformasiSekolah.query()
        .select("banner_blog")
        .where({ m_sekolah_id: sekolah.id })
        .first();
    }

    return response.ok({
      informasi_sekolah: informasiSekolah,
    });
  }

  async putInformasiSekolah({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const {
      deskripsi_singkat,
      visi,
      misi,
      background_section_mengapa,
      jumlah_siswa,
      jumlah_guru,
      jumlah_kelas,
      thumbnail_profil,
      video_profil,
      background_section_virtual_tour,
      virtual_tour,
      banner_profil,
      deskripsi_sekolah,
      foto_tentang_sekolah,
      pesan_kepsek,
      foto_kepsek,
      sejarah,
      foto_sejarah,
      foto_logo,
      lirik_mars,
      lagu_mars,
      alamat,
      gmaps,
      email,
      telp,
      fax,
      banner_sarpras,
      banner_blog,
    } = request.post();

    let updatePayload = {};
    // ini masih buffer
    if (deskripsi_singkat)
      updatePayload.deskripsi_singkat =
        Buffer(deskripsi_singkat).toString("base64");
    if (visi) updatePayload.visi = Buffer(visi).toString("base64");
    if (misi) updatePayload.misi = Buffer(misi).toString("base64");
    if (background_section_mengapa)
      updatePayload.background_section_mengapa = background_section_mengapa;
    if (jumlah_siswa) updatePayload.jumlah_siswa = jumlah_siswa;
    if (jumlah_guru) updatePayload.jumlah_guru = jumlah_guru;
    if (jumlah_kelas) updatePayload.jumlah_kelas = jumlah_kelas;
    if (thumbnail_profil) updatePayload.thumbnail_profil = thumbnail_profil;
    if (video_profil) updatePayload.video_profil = video_profil;
    if (background_section_virtual_tour)
      updatePayload.background_section_virtual_tour =
        background_section_virtual_tour;
    if (virtual_tour) updatePayload.virtual_tour = virtual_tour;
    if (banner_profil) updatePayload.banner_profil = banner_profil;
    if (deskripsi_sekolah)
      updatePayload.deskripsi_sekolah =
        Buffer(deskripsi_sekolah).toString("base64");
    if (foto_tentang_sekolah)
      updatePayload.foto_tentang_sekolah = foto_tentang_sekolah
        ? foto_tentang_sekolah.toString()
        : "";
    if (pesan_kepsek)
      updatePayload.pesan_kepsek = Buffer(pesan_kepsek).toString("base64");
    if (foto_kepsek) updatePayload.foto_kepsek = foto_kepsek;
    if (sejarah) updatePayload.sejarah = Buffer(sejarah).toString("base64");
    if (foto_sejarah) updatePayload.foto_sejarah = foto_sejarah;
    if (foto_logo) updatePayload.foto_logo = foto_logo;
    if (lirik_mars)
      updatePayload.lirik_mars = Buffer(lirik_mars).toString("base64");
    if (lagu_mars) updatePayload.lagu_mars = lagu_mars;
    if (alamat) updatePayload.alamat = alamat;
    if (gmaps) updatePayload.gmaps = gmaps;
    if (email) updatePayload.email = email;
    if (telp) updatePayload.telp = telp;
    if (fax) updatePayload.fax = fax;
    if (banner_sarpras) updatePayload.banner_sarpras = banner_sarpras;
    if (banner_blog) updatePayload.banner_blog = banner_blog;

    const check = await MInformasiSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    if (!check) {
      await MInformasiSekolah.create({
        m_sekolah_id: sekolah.id,
      });
    }

    const informasiSekolah = await MInformasiSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .update(updatePayload);

    if (!informasiSekolah) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getInformasiJurusan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const jurusan = await MJurusan.query()
      .with("informasi")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const { jurusan_id } = request.get();

    let informasiJurusan;
    let guruJurusan;
    let guru;

    if (jurusan_id) {
      informasiJurusan = await MInformasiJurusan.query()
        .with("jurusan")
        .where({ m_jurusan_id: jurusan_id })
        .first();

      guruJurusan = await MGuruJurusan.query()
        .with("user")
        .where({ m_jurusan_id: jurusan_id })
        .andWhere({ dihapus: 0 })
        .fetch();

      guru = await User.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ role: "guru" })
        .andWhere({ dihapus: 0 })
        .fetch();
    }

    return response.ok({
      jurusan: jurusan,
      informasi_jurusan: informasiJurusan,
      guru: guru,
      guruJurusan: guruJurusan,
    });
  }

  async putInformasiJurusan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { banner, sambutan, deskripsi, cover, galeri, m_jurusan_id } =
      request.post();

    const check = await MInformasiJurusan.query()
      .where({ m_jurusan_id: m_jurusan_id })
      .first();

    if (!check) {
      await MInformasiJurusan.create({
        m_jurusan_id: m_jurusan_id,
      });
    }

    const informasiJurusan = await MInformasiJurusan.query()
      .where({ m_jurusan_id: m_jurusan_id })
      .update({
        banner,
        sambutan,
        deskripsi,
        cover,
        galeri: galeri ? galeri.toString() : null,
      });

    if (!informasiJurusan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getKegiatan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const kegiatan = await MKegiatan.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const { kegiatan_id } = request.get();

    let informasiKegiatan;

    if (kegiatan_id) {
      informasiKegiatan = await MKegiatan.query()
        .with("galeri", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .where({ id: kegiatan_id })
        .first();
    }

    return response.ok({
      kegiatan: kegiatan,
      informasi_kegiatan: informasiKegiatan,
    });
  }

  async postKegiatan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { nama, banner } = request.post();

    const rules = {
      nama: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const kegiatan = await MKegiatan.create({
      dihapus: 0,
      nama,
      banner,
      m_sekolah_id: sekolah.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putKegiatan({ response, request, auth, params: { kegiatan_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { nama, banner } = request.post();

    const rules = {
      nama: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const kegiatan = await MKegiatan.query().where({ id: kegiatan_id }).update({
      nama,
      banner,
    });

    if (!kegiatan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteKegiatan({ response, request, auth, params: { kegiatan_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const kegiatan = await MKegiatan.query().where({ id: kegiatan_id }).update({
      dihapus: 1,
    });

    if (!kegiatan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getGelombangPPDB({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (!ta) {
      return response.notFound({
        message: "Aktifkan tahun ajaran yg tersedia di menu kurikulum",
      });
    }

    let { is_public } = request.get();
    is_public = is_public ? is_public : false;

    const checkIds = await MGelombangPpdb.query()
      .where("dibuka", "<=", moment().format("YYYY-MM-DD"))
      .andWhere("ditutup", ">=", moment().format("YYYY-MM-DD"))
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .ids();

    let gelombangAktif;
    let pendaftarIds;
    let terdaftar;

    if (checkIds.length && is_public == false) {
      const user = await auth.getUser();

      gelombangAktif = await MPendaftarPpdb.query()
        .with("gelombang")
        .where({ dihapus: 0 })
        .andWhere({ m_user_id: user.id })
        .whereIn("m_gelombang_ppdb_id", checkIds)
        .first();

      pendaftarIds = await MPendaftarPpdb.query()
        .where({ dihapus: 0 })
        .andWhere({ m_user_id: user.id })
        .pluck("m_gelombang_ppdb_id");

      terdaftar = await MGelombangPpdb.query()
        .whereIn("id", pendaftarIds)
        .fetch();
    }

    const gelombang = await MGelombangPpdb.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const jumlahPeserta = await User.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ role: "ppdb" })
      .count("* as total");

    return response.ok({
      gelombang: gelombang,
      terdaftar: terdaftar,
      gelombangAktif: gelombangAktif,
      jumlahPeserta: jumlahPeserta[0].total,
    });
  }

  async detailGelombangPPDB({ response, params: { gelombang_ppdb_id } }) {
    const gelombang = await MGelombangPpdb.query()
      .with("pendaftar", (builder) => {
        builder.with("user");
      })
      .where({ id: gelombang_ppdb_id })
      .andWhere({ dihapus: 0 })
      .first();

    return response.ok({
      gelombang: gelombang,
    });
  }

  async postGelombangPPDB({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const ta = await this.getTAAktif(sekolah);

    const { nama, dibuka, ditutup, tes_akademik, biaya_pendaftaran } =
      request.post();

    const rules = {
      nama: "required",
      biaya_pendaftaran: "required",
      dibuka: "required",
      ditutup: "required",
      tes_akademik: "required",
    };
    const message = {
      "nama.required": "Nama Gelombang harus diisi",
      "biaya_pendaftaran.required": "Biaya Pendaftaran harus diisi",
      "dibuka.required": "Tanggal dibuka harus diisi",
      "ditutup.required": "Tanggal ditutup harus diisi",
      "tes_akademik.required": "Tes Akademik harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    await MGelombangPpdb.create({
      nama,
      dibuka,
      ditutup,
      dihapus: 0,
      tes_akademik,
      biaya_pendaftaran,
      m_sekolah_id: sekolah.id,
      m_ta_id: ta.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putGelombangPPDB({
    response,
    request,
    auth,
    params: { gelombang_ppdb_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { nama, dibuka, ditutup, tes_akademik, biaya_pendaftaran } =
      request.post();

    const rules = {
      nama: "required",
      biaya_pendaftaran: "required",
      dibuka: "required",
      ditutup: "required",
      tes_akademik: "required",
    };
    const message = {
      "nama.required": "Nama Gelombang harus diisi",
      "biaya_pendaftaran.required": "Biaya Pendaftaran harus diisi",
      "dibuka.required": "Tanggal dibuka harus diisi",
      "ditutup.required": "Tanggal ditutup harus diisi",
      "tes_akademik.required": "Tes Akademik harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const gelombang = await MGelombangPpdb.query()
      .where({ id: gelombang_ppdb_id })
      .update({
        nama,
        dibuka,
        ditutup,
        tes_akademik,
        biaya_pendaftaran,
      });

    if (!gelombang) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteGelombangPPDB({
    response,
    request,
    auth,
    params: { gelombang_ppdb_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const gelombang = await MGelombangPpdb.query()
      .where({ id: gelombang_ppdb_id })
      .update({
        dihapus: 1,
      });

    if (!gelombang) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async downloadPendaftarPPDB({ response, request, auth }) {
    // Create a document
    const doc = new PDFDocument({ size: "A4" });

    let namaFile = `/uploads/kartu-peserta-${new Date().getTime()}.pdf`;

    // Pipe its output somewhere, like to a file or HTTP response
    // See below for browser usage
    doc.pipe(fs.createWriteStream(`public${namaFile}`));

    // Embed a font, set the font size, and render some text
    // doc
    //   .font("fonts/PalatinoBold.ttf")
    //   .fontSize(25)
    //   .text("Some text with an embedded font!", 100, 100);

    doc.fontSize(25).text("Some text with an embedded font!", 100, 100);
    // ini masih buffer
    axios
      .get(
        "https://awsimages.detik.net.id/community/media/visual/2020/07/10/tes-psikologi.jpeg",
        { responseType: "arraybuffer" }
      )
      .then((response) => {
        const pngBuffer = Buffer.from(response.data);
        doc.image(pngBuffer);
      });

    // Add an image, constrain it to a given size, and center it vertically and horizontally
    // doc.image(image, {
    //   fit: [250, 300],
    //   align: "center",
    //   valign: "center",
    // });

    // Add another page
    doc
      .addPage()
      .fontSize(25)
      .text("Here is some vector graphics...", 100, 100);

    // Draw a triangle
    doc
      .save()
      .moveTo(100, 150)
      .lineTo(100, 250)
      .lineTo(200, 250)
      .fill("#FF3300");

    // Apply some transforms and render an SVG path with the 'even-odd' fill rule
    doc
      .scale(0.6)
      .translate(470, -380)
      .path("M 250,75 L 323,301 131,161 369,161 177,301 z")
      .fill("red", "even-odd")
      .restore();

    // Add some text with annotations
    doc
      .addPage()
      .fillColor("blue")
      .text("Here is a link!", 100, 100)
      .underline(100, 100, 160, 27, { color: "#0000FF" })
      .link(100, 100, 160, 27, "http://google.com/");

    // Finalize PDF file
    doc.end();

    return "sukses";
  }

  async detailPendaftarPPDB({
    response,
    request,
    auth,
    params: { pendaftar_ppdb_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const pendaftar = await MPendaftarPpdb.query()
      .with("user", (builder) => {
        builder.with("profil");
      })
      .with("gelombang")
      .where({ id: pendaftar_ppdb_id })
      .first();

    return response.ok({ pendaftar: pendaftar });
  }

  async postPendaftarPPDB({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { m_gelombang_ppdb_id } = request.post();

    const check = await MPendaftarPpdb.query()
      .where({ dihapus: 0 })
      .andWhere({ m_gelombang_ppdb_id: m_gelombang_ppdb_id })
      .andWhere({ m_user_id: user.id })
      .first();

    if (check) {
      return response.forbidden({
        message: "Kamu sudah terdaftar pada gelombang ini",
      });
    }

    await MPendaftarPpdb.create({
      m_gelombang_ppdb_id,
      m_user_id: user.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  //belum validasi
  async putPendaftarPPDB({ response, request, params: { pendaftar_ppdb_id } }) {
    const {
      bank,
      norek,
      nama_pemilik,
      nominal,
      bukti,
      m_jurusan_1_id,
      m_jurusan_2_id,
      m_jurusan_3_id,
      m_jurusan_4_id,
      m_jurusan_5_id,
    } = request.post();

    const check = await MPendaftarPpdb.query()
      .where({ id: pendaftar_ppdb_id })
      .update({
        bank,
        norek,
        nama_pemilik,
        nominal,
        bukti,
        m_jurusan_1_id,
        m_jurusan_2_id,
        m_jurusan_3_id,
        m_jurusan_4_id,
        m_jurusan_5_id,
      });

    if (!check) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async konfirmasiPendaftarPPDB({
    response,
    request,
    params: { pendaftar_ppdb_id },
  }) {
    const check = await MPendaftarPpdb.query()
      .where({ id: pendaftar_ppdb_id })
      .first();

    const gelombang = await MGelombangPpdb.query()
      .where({ id: check.m_gelombang_ppdb_id })
      .first();

    await MPendaftarPpdb.query().where({ id: pendaftar_ppdb_id }).update({
      diverifikasi: 1,
    });

    if (check.nominal == gelombang.biaya_pendaftaran) {
      return response.ok({
        message: `Pembayaran ${gelombang.nama} sudah lunas dengan nomor transaksi #${check.id}`,
      });
    } else if (check.nominal > gelombang.biaya_pendaftaran) {
      return response.ok({
        message: `Pembayaran ${gelombang.nama} kelebihan Rp${
          +check.nominal - +gelombang.biaya_pendaftaran
        } dengan nomor transaksi #${check.id}`,
      });
    } else if (check.nominal < gelombang.biaya_pendaftaran) {
      return response.ok({
        message: `Pembayaran ${gelombang.nama} kurang Rp${
          +gelombang.biaya_pendaftaran - +check.nominal
        } dengan nomor transaksi #${
          check.id
        }. Silahkan upload kekurangannya pada menu pembayaran`,
      });
    }
  }

  async getAlurPPDB({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (!ta) {
      return response.notFound({
        message: "Aktifkan tahun ajaran yg tersedia di menu kurikulum",
      });
    }

    const alur = await MAlurPPDB.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    return response.ok({
      alur: alur,
    });
  }

  async postAlurPPDB({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const ta = await this.getTAAktif(sekolah);

    const { judul, deskripsi } = request.post();

    const rules = {
      judul: "required",
      deskripsi: "required",
    };
    const message = {
      "judul.required": "Judul harus diisi",
      "deskripsi.required": "Deskripsi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    await MAlurPPDB.create({
      judul,
      deskripsi,
      dihapus: 0,
      m_sekolah_id: sekolah.id,
      m_ta_id: ta.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putAlurPPDB({ response, request, auth, params: { alur_ppdb_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { judul, deskripsi } = request.post();
    const rules = {
      judul: "required",
      deskripsi: "required",
    };
    const message = {
      "judul.required": "Judul harus diisi",
      "deskripsi.required": "Deskripsi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const alur = await MAlurPPDB.query().where({ id: alur_ppdb_id }).update({
      judul,
      deskripsi,
    });

    if (!alur) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteAlurPPDB({ response, request, auth, params: { alur_ppdb_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const alur = await MAlurPPDB.query().where({ id: alur_ppdb_id }).update({
      dihapus: 1,
    });

    if (!alur) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async detailKegiatanGaleri({
    response,
    request,
    auth,
    params: { kegiatan_galeri_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const kegiatanGaleri = await MKegiatanGaleri.query()
      .with("kegiatan")
      .where({ id: kegiatan_galeri_id })
      .first();

    if (!kegiatanGaleri) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      kegiatanGaleri: kegiatanGaleri,
    });
  }

  async postKegiatanGaleri({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { foto, nama, deskripsi, m_kegiatan_id } = request.post();
    const rules = {
      foto: "required",
      nama: "required",
      deskripsi: "required",
    };
    const message = {
      "foto.required": "Foto harus diisi",
      "nama.required": "Nama Kegiatan harus diisi",
      "deskripsi.required": "Deskripsi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }
    const kegiatan = await MKegiatanGaleri.create({
      foto,
      nama,
      deskripsi,
      dihapus: 0,
      m_kegiatan_id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putKegiatanGaleri({
    response,
    request,
    auth,
    params: { kegiatan_galeri_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { foto, nama, deskripsi } = request.post();
    const rules = {
      foto: "required",
      nama: "required",
      deskripsi: "required",
    };
    const message = {
      "foto.required": "Foto harus diisi",
      "nama.required": "Nama Kegiatan harus diisi",
      "deskripsi.required": "Deskripsi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const kegiatanGaleri = await MKegiatanGaleri.query()
      .where({ id: kegiatan_galeri_id })
      .update({
        foto,
        nama,
        deskripsi,
      });

    if (!kegiatanGaleri) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteKegiatanGaleri({
    response,
    request,
    auth,
    params: { kegiatan_galeri_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const kegiatanGaleri = await MKegiatanGaleri.query()
      .where({ id: kegiatan_galeri_id })
      .update({
        dihapus: 1,
      });

    if (!kegiatanGaleri) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async postGuruJurusan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { foto, jabatan, m_jurusan_id, m_user_id } = request.post();

    const rules = {
      foto: "required",
      m_user_id: "required",
      jabatan: "required",
    };
    const message = {
      "foto.required": "Foto harus diisi",
      "m_user_id.required": "Nama harus dipilih",
      "jabatan.required": "Jabatan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const guruJurusan = await MGuruJurusan.create({
      foto,
      jabatan,
      dihapus: 0,
      m_jurusan_id,
      m_user_id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putGuruJurusan({
    response,
    request,
    auth,
    params: { guru_jurusan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { foto, jabatan, m_jurusan_id, m_user_id } = request.post();
    const rules = {
      foto: "required",
      m_user_id: "required",
      jabatan: "required",
    };
    const message = {
      "foto.required": "Foto harus diisi",
      "m_user_id.required": "Nama harus dipilih",
      "jabatan.required": "Jabatan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const guruJurusan = await MGuruJurusan.query()
      .where({ id: guru_jurusan_id })
      .update({
        foto,
        jabatan,
        dihapus: 0,
        m_jurusan_id,
        m_user_id,
      });

    if (!guruJurusan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteGuruJurusan({
    response,
    request,
    auth,
    params: { guru_jurusan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const guruJurusan = await MGuruJurusan.query()
      .where({ id: guru_jurusan_id })
      .update({
        dihapus: 1,
      });

    if (!guruJurusan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getSarpras({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const sarpras = await MSarpras.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    return response.ok({
      sarpras: sarpras,
    });
  }

  async detailSarpras({ response, request, params: { sarpras_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const sarpras = await MSarpras.query().where({ id: sarpras_id }).first();

    return response.ok({
      sarpras: sarpras,
    });
  }

  async postSarpras({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { foto, nama, virtual_tour, deskripsi } = request.post();
    const rules = {
      foto: "required",
      nama: "required",
      virtual_tour: "required",
      deskripsi: "required",
    };
    const message = {
      "foto.required": "Foto harus diisi",
      "nama.required": "Nama harus diisi",
      "virtual_tour.required": "Link Virtual Tour harus diisi",
      "deskripsi.required": "Deskripsi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const sarpras = await MSarpras.create({
      foto,
      nama,
      virtual_tour,
      deskripsi,
      dihapus: 0,
      m_sekolah_id: sekolah.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putSarpras({ response, request, auth, params: { sarpras_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { foto, nama, virtual_tour, deskripsi } = request.post();

    const rules = {
      foto: "required",
      nama: "required",
      virtual_tour: "required",
      deskripsi: "required",
    };
    const message = {
      "foto.required": "Foto harus diisi",
      "nama.required": "Nama harus diisi",
      "virtual_tour.required": "Link Virtual Tour harus diisi",
      "deskripsi.required": "Deskripsi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const sarpras = await MSarpras.query().where({ id: sarpras_id }).update({
      foto,
      nama,
      virtual_tour,
      deskripsi,
    });

    if (!sarpras) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteSarpras({ response, request, auth, params: { sarpras_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const sarpras = await MSarpras.query().where({ id: sarpras_id }).update({
      dihapus: 1,
    });

    if (!sarpras) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getPerpus({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const ta = await this.getTAAktif(sekolah);

    const mataPelajaran = await MMataPelajaran.query()
      .select("id", "nama")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const { nav, search, tag, urutkan } = request.get();

    let perpus;

    if (tag) {
      const tagIds = await MPerpusTag.query().whereIn("nama", tag).ids();

      const perpusTags = await TkPerpusTag.query()
        .whereIn("m_perpus_tag_id", tagIds)
        .pluck("m_perpus_id");

      perpus = await MPerpus.query()
        .with("user")
        .with("buku")
        .with("sekolah")
        .with("tag", (builder) => {
          builder.with("tag");
        })
        .with("mapel", (builder) => {
          builder.with("mapel");
        })
        .withCount("aktivitasPerpus as total_baca", (builder) => {
          builder.where({ aktivitas: "baca" });
        })
        .withCount("aktivitasPerpus as total_download", (builder) => {
          builder.where({ aktivitas: "download" });
        })
        .withCount("aktivitasPerpus as total_rating", (builder) => {
          builder.where({ aktivitas: "rating" });
        })
        .withCount("komen as total_komen", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .whereIn("id", perpusTags)
        .andWhere({ dihapus: 0 })
        .orWhere("judul", "like", `%${decodeURIComponent(search)}%`)
        .orWhere("deskripsi", "like", `%${decodeURIComponent(search)}%`)
        .orWhere("penulis", "like", `%${decodeURIComponent(search)}%`)
        .orWhere("penerbit", "like", `%${decodeURIComponent(search)}%`)
        .orWhere("isbn", "like", `%${decodeURIComponent(search)}%`)
        .andWhere({ dihapus: 0 })
        .orderBy("id", "desc")
        .fetch();
    }

    if (search) {
      if (nav == "buku-saya") {
        perpus = await MPerpus.query()
          .with("user")
          .with("buku")
          .with("sekolah")
          .with("tag", (builder) => {
            builder.with("tag");
          })
          .with("mapel", (builder) => {
            builder.with("mapel");
          })
          .withCount("aktivitasPerpus as total_baca", (builder) => {
            builder.where({ aktivitas: "baca" });
          })
          .withCount("aktivitasPerpus as total_download", (builder) => {
            builder.where({ aktivitas: "download" });
          })
          .withCount("aktivitasPerpus as total_rating", (builder) => {
            builder.where({ aktivitas: "rating" });
          })
          .withCount("komen as total_komen", (builder) => {
            builder.where({ dihapus: 0 });
          })
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .andWhere({ m_user_id: user.id })
          .orWhere("judul", "like", `%${decodeURIComponent(search)}%`)
          .orWhere("deskripsi", "like", `%${decodeURIComponent(search)}%`)
          .orWhere("penulis", "like", `%${decodeURIComponent(search)}%`)
          .orWhere("penerbit", "like", `%${decodeURIComponent(search)}%`)
          .orWhere("isbn", "like", `%${decodeURIComponent(search)}%`)
          .andWhere({ dihapus: 0 })
          .orderBy("id", "desc")
          .fetch();
      } else if (nav == "buku-sekolah") {
        perpus = await MPerpus.query()
          .with("user")
          .with("buku")
          .with("sekolah")
          .with("tag", (builder) => {
            builder.with("tag");
          })
          .with("mapel", (builder) => {
            builder.with("mapel");
          })
          .withCount("aktivitasPerpus as total_baca", (builder) => {
            builder.where({ aktivitas: "baca" });
          })
          .withCount("aktivitasPerpus as total_download", (builder) => {
            builder.where({ aktivitas: "download" });
          })
          .withCount("aktivitasPerpus as total_rating", (builder) => {
            builder.where({ aktivitas: "rating" });
          })
          .withCount("komen as total_komen", (builder) => {
            builder.where({ dihapus: 0 });
          })
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .orWhere("judul", "like", `%${decodeURIComponent(search)}%`)
          .orWhere("deskripsi", "like", `%${decodeURIComponent(search)}%`)
          .orWhere("penulis", "like", `%${decodeURIComponent(search)}%`)
          .orWhere("penerbit", "like", `%${decodeURIComponent(search)}%`)
          .orWhere("isbn", "like", `%${decodeURIComponent(search)}%`)
          .andWhere({ dihapus: 0 })
          .orderBy("id", "desc")
          .fetch();
      } else {
        perpus = await MPerpus.query()
          .with("user")
          .with("buku")
          .with("sekolah")
          .with("tag", (builder) => {
            builder.with("tag");
          })
          .with("mapel", (builder) => {
            builder.with("mapel");
          })
          .withCount("aktivitasPerpus as total_baca", (builder) => {
            builder.where({ aktivitas: "baca" });
          })
          .withCount("aktivitasPerpus as total_download", (builder) => {
            builder.where({ aktivitas: "download" });
          })
          .withCount("aktivitasPerpus as total_rating", (builder) => {
            builder.where({ aktivitas: "rating" });
          })
          .withCount("komen as total_komen", (builder) => {
            builder.where({ dihapus: 0 });
          })
          .where({ dihapus: 0 })
          .orWhere("judul", "like", `%${decodeURIComponent(search)}%`)
          .orWhere("deskripsi", "like", `%${decodeURIComponent(search)}%`)
          .orWhere("penulis", "like", `%${decodeURIComponent(search)}%`)
          .orWhere("penerbit", "like", `%${decodeURIComponent(search)}%`)
          .orWhere("isbn", "like", `%${decodeURIComponent(search)}%`)
          .andWhere({ dihapus: 0 })
          .orderBy("id", "desc")
          .fetch();
      }
    } else if (nav == "buku-saya") {
      perpus = await MPerpus.query()
        .with("user")
        .with("buku")
        .with("sekolah")
        .with("tag", (builder) => {
          builder.with("tag");
        })
        .with("mapel", (builder) => {
          builder.with("mapel");
        })
        .withCount("aktivitasPerpus as total_baca", (builder) => {
          builder.where({ aktivitas: "baca" });
        })
        .withCount("aktivitasPerpus as total_download", (builder) => {
          builder.where({ aktivitas: "download" });
        })
        .withCount("aktivitasPerpus as total_rating", (builder) => {
          builder.where({ aktivitas: "rating" });
        })
        .withCount("komen as total_komen", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .andWhere({ m_user_id: user.id })
        .orderBy("id", "desc")
        .fetch();
    } else if (nav == "buku-sekolah") {
      perpus = await MPerpus.query()
        .with("user")
        .with("buku")
        .with("sekolah")
        .with("tag", (builder) => {
          builder.with("tag");
        })
        .with("mapel", (builder) => {
          builder.with("mapel");
        })
        .withCount("aktivitasPerpus as total_baca", (builder) => {
          builder.where({ aktivitas: "baca" });
        })
        .withCount("aktivitasPerpus as total_download", (builder) => {
          builder.where({ aktivitas: "download" });
        })
        .withCount("aktivitasPerpus as total_rating", (builder) => {
          builder.where({ aktivitas: "rating" });
        })
        .withCount("komen as total_komen", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ dihapus: 0 })
        .orderBy("id", "desc")
        .fetch();
    } else {
      perpus = await MPerpus.query()
        .with("user")
        .with("buku")
        .with("sekolah")
        .with("tag", (builder) => {
          builder.with("tag");
        })
        .with("mapel", (builder) => {
          builder.with("mapel");
        })
        .withCount("aktivitasPerpus as total_baca", (builder) => {
          builder.where({ aktivitas: "baca" });
        })
        .withCount("aktivitasPerpus as total_download", (builder) => {
          builder.where({ aktivitas: "download" });
        })
        .withCount("aktivitasPerpus as total_rating", (builder) => {
          builder.where({ aktivitas: "rating" });
        })
        .withCount("komen as total_komen", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .where({ dihapus: 0 })
        .orderBy("id", "desc")
        .fetch();
    }

    if (urutkan == "terbaru") {
    } else if (urutkan == "populer") {
    } else if (urutkan == "dibicarakan") {
    }

    const tagData = await MPerpusTag.query()
      .where({ dihapus: 0 })
      .limit(5)
      .fetch();

    const filter = [
      { label: "Terbaru", value: "terbaru" },
      { label: "Paling Populer", value: "populer" },
      { label: "Paling Dibicarakan", value: "dibicarakan" },
    ];

    return response.ok({
      perpus: perpus,
      mataPelajaran: mataPelajaran,
      tag: tagData,
      filter: filter,
    });
  }

  async detailPerpus({ response, request, auth, params: { perpus_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const ta = await this.getTAAktif(sekolah);

    const perpus = await MPerpus.query()
      .with("user")
      .with("buku")
      .with("sekolah")
      .with("tag", (builder) => {
        builder.with("tag");
      })
      .with("mapel", (builder) => {
        builder.with("mapel");
      })
      .withCount("aktivitasPerpus as total_baca", (builder) => {
        builder.where({ aktivitas: "baca" });
      })
      .withCount("aktivitasPerpus as total_download", (builder) => {
        builder.where({ aktivitas: "download" });
      })
      .withCount("aktivitasPerpus as total_rating", (builder) => {
        builder.where({ aktivitas: "rating" });
      })
      .with("komen", (builder) => {
        builder.with("user").where({ dihapus: 0 });
      })
      .where({ id: perpus_id })
      .orderBy("id", "desc")
      .first();

    const ratingPerpus = await TkPerpusAktivitas.query()
      .where({ m_perpus_id: perpus_id })
      .andWhere({ aktivitas: "rating" })
      .avg("rating as ratingPerpus");

    return response.ok({
      perpus: perpus,
      ratingPerpus: ratingPerpus[0].ratingPerpus,
    });
  }

  async postPerpus({ response, request, auth }) {
    const domain = request.headers().origin;
    const sekolah = await this.getSekolahByDomain(domain);
    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const user = await auth.getUser();
    const {
      judul,
      deskripsi,
      penulis,
      penerbit,
      tahun_terbit,
      isbn,
      draft,
      buku,
      // tk perpus mapel
      m_mata_pelajaran_id,
      // tk perpus tag
      tag,
      cover,
    } = request.post();
    const rules = {
      judul: "required",
      deskripsi: "required",
      penulis: "required",
      // penerbit: "optional",
      // tahun_terbit: "optional",
      // isbn: "optional",
      // m_mata_pelajaran_id: "optional",
      // tag: "optional",
      buku: "required",
      cover: "required",
    };
    const message = {
      "judul.required": "Judul harus diisi",
      "deskripsi.required": "Deskripsi harus diisi",
      "penulis.required": "Penulis harus diisi",
      "penerbit.required": "Penerbit harus diisi",
      "tahun_terbit.required": "Tahun Penerbit harus diisi",
      "isbn.required": "Nomor ISBN harus diisi",
      "m_mata_pelajaran_id.required": "Mata Pelajaran Terkait harus diisi",
      "tag.required": "Tag harus diisi",
      "buku.required": "Buku harus diisi",
      "cover.required": "Cover harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }
    // let bukuBuffer = fs.readFileSync(new URL(`file:///${buku}`));
    // const bukuData = await pdf(bukuBuffer, {
    //   //replaces all occurrences of whitespace with standard spaces (0x20). The default value is `false`.
    //   normalizeWhitespace: false,
    //   //do not attempt to combine same line TextItem's. The default value is `false`.
    //   disableCombineTextItems: false,
    // });
    let checkBuku = await MBuku.query()
      .where({ link: buku })
      // .where({ createdate: bukuData.metadata._metadata.createdate })
      // .andWhere({ metadatadate: bukuData.metadata._metadata.metadatadate })
      // .andWhere({ creatortool: bukuData.metadata._metadata.creatortool })
      // .andWhere({ instanceid: bukuData.metadata._metadata.instanceid })
      // .andWhere({
      //   originaldocumentid: bukuData.metadata._metadata.originaldocumentid,
      // })
      // .andWhere({ documentid: bukuData.metadata._metadata.documentid })
      // .andWhere({ renditionclass: bukuData.metadata._metadata.renditionclass })
      // .andWhere({ history: bukuData.metadata._metadata.history })
      // .andWhere({ derivedfrom: bukuData.metadata._metadata.derivedfrom })
      // .andWhere({ format: bukuData.metadata._metadata.format })
      // .andWhere({ producer: bukuData.metadata._metadata.producer })
      // .andWhere({ trapped: bukuData.metadata._metadata.trapped })
      .first();
    if (!checkBuku) {
      checkBuku = await MBuku.create({
        // createdate: bukuData.metadata._metadata.createdate,
        // metadatadate: bukuData.metadata._metadata.metadatadate,
        // creatortool: bukuData.metadata._metadata.creatortool,
        // instanceid: bukuData.metadata._metadata.instanceid,
        // originaldocumentid: bukuData.metadata._metadata.originaldocumentid,
        // documentid: bukuData.metadata._metadata.documentid,
        // renditionclass: bukuData.metadata._metadata.renditionclass,
        // history: bukuData.metadata._metadata.history,
        // derivedfrom: bukuData.metadata._metadata.derivedfrom,
        // format: bukuData.metadata._metadata.format,
        // producer: bukuData.metadata._metadata.producer,
        // trapped: bukuData.metadata._metadata.trapped,
        link: buku,
      });
    }
    // ini masih buffer
    const perpus = await MPerpus.create({
      judul,
      deskripsi: deskripsi ? Buffer(deskripsi).toString("base64") : "",
      penulis: penulis ? penulis.toString() : "",
      penerbit,
      tahun_terbit,
      isbn,
      cover,
      draft,
      m_user_id: user.id,
      m_buku_id: checkBuku.id,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    if (m_mata_pelajaran_id) {
      const materi = await MMateri.query()
        .where({ m_mata_pelajaran_id: m_mata_pelajaran_id })
        .fetch();

      await Promise.all(
        materi.toJSON().map(async (d) => {
          await TkPerpusMapel.create({
            m_perpus_id: perpus.id,
            m_mata_pelajaran_id: m_mata_pelajaran_id,
            m_jurusan_id: d.m_jurusan_id ? d.m_jurusan_id : null,
            dihapus: 0,
          });
        })
      );
    }

    if (tag.length) {
      await Promise.all(
        tag.map(async (d) => {
          let check = await MPerpusTag.query().where({ nama: d }).first();

          if (!check) {
            check = await MPerpusTag.create({
              nama: d,
              dihapus: 0,
              m_user_id: user.id,
              m_sekolah_id: sekolah.id,
            });
          }

          await TkPerpusTag.create({
            m_perpus_id: perpus.id,
            m_perpus_tag_id: check.id,
            dihapus: 0,
          });
        })
      );
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPerpus({ response, request, auth, params: { perpus_id } }) {
    const domain = request.headers().origin;
    const sekolah = await this.getSekolahByDomain(domain);
    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const user = await auth.getUser();
    const {
      judul,
      deskripsi,
      penulis,
      penerbit,
      tahun_terbit,
      isbn,
      draft,
      buku,
      // tk perpus mapel
      m_mata_pelajaran_id,
      // tk perpus tag
      tag,
      cover,
    } = request.post();
    const rules = {
      judul: "required",
      deskripsi: "required",
      penulis: "required",
      // penerbit: "optional",
      // tahun_terbit: "optional",
      // isbn: "optional",
      // m_mata_pelajaran_id: "optional",
      // tag: "optional",
      buku: "required",
      cover: "required",
    };
    const message = {
      "judul.required": "Judul harus diisi",
      "deskripsi.required": "Deskripsi harus diisi",
      "penulis.required": "Penulis harus diisi",
      "penerbit.required": "Penerbit harus diisi",
      "tahun_terbit.required": "Tahun Penerbit harus diisi",
      "isbn.required": "Nomor ISBN harus diisi",
      "m_mata_pelajaran_id.required": "Mata Pelajaran Terkait harus diisi",
      "tag.required": "Tag harus diisi",
      "buku.required": "Buku harus diisi",
      "cover.required": "Cover harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }
    // let bukuBuffer = fs.readFileSync(new URL(`file:///${buku}`));
    // const bukuData = await pdf(bukuBuffer, {
    //   //replaces all occurrences of whitespace with standard spaces (0x20). The default value is `false`.
    //   normalizeWhitespace: false,
    //   //do not attempt to combine same line TextItem's. The default value is `false`.
    //   disableCombineTextItems: false,
    // });
    let checkBuku = await MBuku.query()
      .where({ link: buku })
      // .where({ createdate: bukuData.metadata._metadata.createdate })
      // .andWhere({ metadatadate: bukuData.metadata._metadata.metadatadate })
      // .andWhere({ creatortool: bukuData.metadata._metadata.creatortool })
      // .andWhere({ instanceid: bukuData.metadata._metadata.instanceid })
      // .andWhere({
      //   originaldocumentid: bukuData.metadata._metadata.originaldocumentid,
      // })
      // .andWhere({ documentid: bukuData.metadata._metadata.documentid })
      // .andWhere({ renditionclass: bukuData.metadata._metadata.renditionclass })
      // .andWhere({ history: bukuData.metadata._metadata.history })
      // .andWhere({ derivedfrom: bukuData.metadata._metadata.derivedfrom })
      // .andWhere({ format: bukuData.metadata._metadata.format })
      // .andWhere({ producer: bukuData.metadata._metadata.producer })
      // .andWhere({ trapped: bukuData.metadata._metadata.trapped })
      .first();
    if (!checkBuku) {
      checkBuku = await MBuku.create({
        // createdate: bukuData.metadata._metadata.createdate,
        // metadatadate: bukuData.metadata._metadata.metadatadate,
        // creatortool: bukuData.metadata._metadata.creatortool,
        // instanceid: bukuData.metadata._metadata.instanceid,
        // originaldocumentid: bukuData.metadata._metadata.originaldocumentid,
        // documentid: bukuData.metadata._metadata.documentid,
        // renditionclass: bukuData.metadata._metadata.renditionclass,
        // history: bukuData.metadata._metadata.history,
        // derivedfrom: bukuData.metadata._metadata.derivedfrom,
        // format: bukuData.metadata._metadata.format,
        // producer: bukuData.metadata._metadata.producer,
        // trapped: bukuData.metadata._metadata.trapped,
        link: buku,
      });
    }
    // ini masih buffer
    const perpus = await MPerpus.query()
      .where({ id: perpus_id })
      .update({
        judul,
        deskripsi: deskripsi ? Buffer(deskripsi).toString("base64") : "",
        penulis: penulis ? penulis.toString() : "",
        penerbit,
        tahun_terbit,
        cover,
        isbn,
        draft,
        m_user_id: user.id,
        m_buku_id: checkBuku.id,
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });

    if (m_mata_pelajaran_id) {
      const materi = await MMateri.query()
        .where({ m_mata_pelajaran_id: m_mata_pelajaran_id })
        .fetch();

      await TkPerpusMapel.query().where({ m_perpus_id: perpus_id }).delete();

      await Promise.all(
        materi.toJSON().map(async (d) => {
          await TkPerpusMapel.create({
            m_perpus_id: perpus_id,
            m_mata_pelajaran_id: m_mata_pelajaran_id,
            m_jurusan_id: d.m_jurusan_id ? d.m_jurusan_id : null,
            dihapus: 0,
          });
        })
      );
    }

    if (tag.length) {
      await Promise.all(
        tag.map(async (d) => {
          let check = await MPerpusTag.query().where({ nama: d }).first();

          if (!check) {
            check = await MPerpusTag.create({
              nama: d,
              dihapus: 0,
              m_user_id: user.id,
              m_sekolah_id: sekolah.id,
            });
          }

          await TkPerpusTag.query().where({ m_perpus_id: perpus_id }).delete();

          await TkPerpusTag.create({
            m_perpus_id: perpus_id,
            m_perpus_tag_id: check.id,
            dihapus: 0,
          });
        })
      );
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePerpus({ response, request, auth, params: { perpus_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const perpus = await MPerpus.query().where({ id: perpus_id }).update({
      dihapus: 1,
    });

    if (!perpus) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getRpp({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const { tipe } = request.get();

    let mataPelajaran;

    if (user.role == "guru") {
      mataPelajaran = await MMataPelajaran.query()
        .where({ dihapus: 0 })
        .andWhere({ m_user_id: user.id })
        .andWhere({ m_ta_id: ta.id })
        .fetch();
    } else if (user.role == "admin") {
      mataPelajaran = await MMataPelajaran.query()
        .where({ dihapus: 0 })
        .andWhere({ m_ta_id: ta.id })
        .andWhere({ m_sekolah_id: sekolah.id })
        .fetch();
    }

    let query = MRpp.query()
      .with("mataPelajaran")
      .with("user")
      .with("sekolah")
      .where({ dihapus: 0 })
      .andWhere({ m_user_id: user.id });
    if (!tipe) {
      query.whereNull("tipe");
    } else {
      query.where({ tipe: tipe });
    }

    const rpp = await query.fetch();

    let tingkatData = [];

    if (sekolah.tingkat == "SMK" || sekolah.tingkat == "SMA") {
      tingkatData = ["X", "XI", "XII", "XIII"];
    } else if (sekolah.tingkat == "SMP") {
      tingkatData = ["VII", "VIII", "IX"];
    } else if (sekolah.tingkat == "SD") {
      tingkatData = ["I", "II", "III", "IV", "V", "VI"];
    } else if (sekolah.tingkat == "SLB") {
      tingkatData = [
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX",
        "X",
        "XI",
        "XII",
      ];
    }

    return response.ok({
      rpp: rpp,
      mataPelajaran: mataPelajaran,
      tingkat: tingkatData,
    });
  }

  async detailRpp({ response, request, auth, params: { rpp_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    const user = await auth.getUser();

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const rpp = await MRpp.query()
      .with("mataPelajaran")
      .with("user")
      .with("sekolah")
      .where({ dihapus: 0 })
      .andWhere({ m_user_id: user.id })
      .andWhere({ id: rpp_id })
      .first();

    return response.ok({
      rpp,
    });
  }

  async postRpp({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      judul,
      moda,
      deskripsi,
      lampiran,
      tingkat,
      m_mata_pelajaran_id,
      tipe,
    } = request.post();
    const rules = {
      judul: "required",
      moda: "required",
      deskripsi: "required",
      tingkat: "required",
      lampiran: "required",
    };
    const message = {
      "judul.required": "Judul RPP harus diisi",
      "moda.required": "Moda RPP harus dipilih",
      "deskripsi.required": "Deskripsi harus diisi",
      "tingkat.required": "Tingkat/Kelas harus diisi",
      "lampiran.required": "Lampiran RPP harus diisi",
    };
    if (!tipe) {
      const validation = await validate(request.all(), rules, message);
      if (validation.fails()) {
        return response.unprocessableEntity(validation.messages());
      }
    }

    await MRpp.create({
      judul,
      moda,
      deskripsi,
      lampiran,
      tingkat,
      tipe,
      m_mata_pelajaran_id,
      m_user_id: user.id,
      m_ta_id: ta.id,
      m_sekolah_id: sekolah.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putRpp({ response, request, auth, params: { rpp_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      judul,
      moda,
      deskripsi,
      lampiran,
      tingkat,
      m_mata_pelajaran_id,
      tipe,
    } = request.post();

    const rules = {
      judul: "required",
      moda: "required",
      deskripsi: "required",
      tingkat: "required",
      lampiran: "required",
    };
    const message = {
      "judul.required": "Judul RPP harus diisi",
      "moda.required": "Moda RPP harus dipilih",
      "deskripsi.required": "Deskripsi harus diisi",
      "tingkat.required": "Tingkat/Kelas harus diisi",
      "lampiran.required": "Lampiran RPP harus diisi",
    };
    if (!tipe) {
      const validation = await validate(request.all(), rules, message);
      if (validation.fails()) {
        return response.unprocessableEntity(validation.messages());
      }
    }

    const rpp = await MRpp.query().where({ id: rpp_id }).update({
      judul,
      moda,
      deskripsi,
      lampiran,
      tingkat,
      m_mata_pelajaran_id,
    });

    if (!rpp) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteRpp({ response, request, auth, params: { rpp_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const rpp = await MRpp.query().where({ id: rpp_id }).update({
      dihapus: 1,
    });

    if (!rpp) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postPerpusAktivitas({ response, request, auth }) {
    const domain = request.headers().origin;
    const sekolah = await this.getSekolahByDomain(domain);
    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { aktivitas, waktu_mulai, waktu_selesai, m_perpus_id, rating } =
      request.post();

    const check = await TkPerpusAktivitas.query()
      .where({ m_user_id: user.id })
      .andWhere({ m_perpus_id: m_perpus_id })
      .andWhere({ aktivitas: aktivitas })
      .first();

    if (!check) {
      await TkPerpusAktivitas.create({
        dihapus: 0,
        m_user_id: user.id,
        aktivitas,
        waktu_mulai,
        waktu_selesai,
        m_perpus_id,
        rating,
      });
    } else {
      await TkPerpusAktivitas.query().where({ id: check.id }).update({
        waktu_selesai,
        rating,
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async postPerpusKomen({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let { m_perpus_id, komen } = request.post();

    const rules = {
      komen: "required",
    };
    const message = {
      "komen.required": "komen harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const perpusKomen = await MPerpusKomen.create({
      dihapus: 0,
      m_perpus_id: m_perpus_id,
      komen: komen,
      m_user_id: user.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async deletePerpusKomen({
    response,
    request,
    auth,
    params: { perpus_komen_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const perpusKomen = await MPerpusKomen.query()
      .where({ id: perpus_komen_id })
      .update({
        dihapus: 1,
      });

    if (!perpusKomen) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getRekSekolah({ response, request, auth }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { search } = request.get();

    const query = MRekSekolah.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id });

    if (search) {
      query.where("jenis", "like", `%${search}%`);
    }

    const rekSekolah = await query.fetch();
    const totalSaldo = rekSekolah
      .toJSON()
      .map((d) => d.saldo)
      .reduce((a, b) => a + b, 0);
    const totalPemasukkan = rekSekolah
      .toJSON()
      .map((d) => d.pemasukan)
      .reduce((a, b) => a + b, 0);
    const totalPengeluaran = rekSekolah
      .toJSON()
      .map((d) => d.pengeluaran)
      .reduce((a, b) => a + b, 0);

    return response.ok({
      rekSekolah: rekSekolah,
      totalSaldo,
      totalPemasukkan,
      totalPengeluaran,
    });
  }

  // Validasi sampai sini
  async postRekSekolah({ response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { bank, norek, nama, saldo, jenis } = request.post();

    const rekSekolah = await MRekSekolah.create({
      bank,
      norek,
      nama,
      saldo,
      jenis,
      dihapus: 0,
      m_sekolah_id: sekolah.id,
    });

    if (!rekSekolah) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putRekSekolah({ response, request, params: { rek_sekolah_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { bank, norek, nama, saldo, jenis } = request.post();

    const rekSekolah = await MRekSekolah.query()
      .where({ id: rek_sekolah_id })
      .andWhere({ m_sekolah_id: sekolah.id })
      .update({
        jenis,
        bank,
        norek,
        nama,
        saldo,
      });

    if (!rekSekolah) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }
  async deleteRekSekolah({ response, request, params: { rek_sekolah_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const rekSekolah = await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ id: rek_sekolah_id })
      .update({
        dihapus: 1,
      });

    if (!rekSekolah) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getPembayaran({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    let { tipe, search } = request.get();

    tipe = tipe ? tipe : "spp";

    let pembayaran;

    if (search) {
      pembayaran = await MPembayaran.query()
        .with("rombel", (builder) => {
          builder
            .with("rombel")
            .withCount("siswa as totalLunas", (builder) => {
              builder.where({ status: "lunas" });
            })
            .withCount("siswa as total");
        })
        .where({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .andWhere({ jenis: tipe })
        .andWhere("nama", "like", `%${search}%`)
        .fetch();
    } else {
      pembayaran = await MPembayaran.query()
        .with("rombel", (builder) => {
          builder
            .with("rombel")
            .withCount("siswa as totalLunas", (builder) => {
              builder.where({ status: "lunas" });
            })
            .withCount("siswa as total");
        })
        .where({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .andWhere({ jenis: tipe })
        .fetch();
    }

    const totalPelunasan = pembayaran.toJSON().map((item) => {
      return {
        id: item.id,
        total: item.rombel.reduce((a, b) => a + b.__meta__.total, 0),
        totalLunas: item.rombel.reduce((a, b) => a + b.__meta__.totalLunas, 0),
      };
    });

    const rombel = await MRombel.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .fetch();

    let jenisData = [
      { label: "SPP", value: "spp" },
      { label: "Ujian", value: "ujian" },
      { label: "Lainnya", values: "lainnya" },
    ];

    let tipeUjian = [
      { value: "pts1", label: "Penilaian Tengah Semester 1" },
      { value: "pts2", label: "Penilaian Tengah Semester 2" },
      { value: "pas1", label: "Penilaian Akhir Semester 1" },
      { value: "pas2", label: "Penilaian Akhir Semester 2" },
      { value: "us", label: "Ujian Sekolah" },
    ];

    const pembayaranKategori = await MPembayaranKategori.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    return response.ok({
      pembayaran: pembayaran,
      jenisData: jenisData,
      rombel: rombel,
      tipeUjian: tipeUjian,
      pembayaran_kategori: pembayaranKategori,
      totalPelunasan,
    });
  }

  async detailPembayaran({
    response,
    request,
    auth,
    params: { pembayaran_id },
  }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    let { rombel_id, search, nav } = request.get();

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const pembayaran = await MPembayaran.query()
      .with("rombel", (builder) => {
        builder.with("rombel");
      })
      .where({ id: pembayaran_id })
      .first();

    let siswa;

    let userIds;

    if (search) {
      userIds = await User.query()
        .where({ dihapus: 0 })
        .andWhere("nama", "like", `%${search}%`)
        .ids();
    }

    siswa = MPembayaranSiswa.query()
      .with("user")
      .with("riwayat", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .with("rombelPembayaran", (builder) => {
        builder.with("pembayaran");
      })
      .where({ dihapus: 0 });
    if (rombel_id) {
      siswa.andWhere({ tk_pembayaran_rombel_id: rombel_id });
      if (search) {
        siswa.whereIn("m_user_id", userIds);
      }
    } else {
      siswa.andWhere({
        tk_pembayaran_rombel_id: pembayaran.toJSON().rombel[0].id,
      });
      if (search) {
        siswa.whereIn("m_user_id", userIds);
      }
    }
    if (nav == "belum-lunas") {
      siswa.where({ status: "belum lunas" });
    }

    siswa = await siswa.fetch();

    return response.ok({
      pembayaran,
      siswa,
    });
  }

  async postPembayaran({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let {
      nama,
      jenis,
      bulan,
      tipe_ujian,
      nominal,
      tanggal_dibuat,
      rombel_id,
      tag,
      m_rek_sekolah_id,
    } = request.post();
    if (bulan) {
      const rules = {
        nama: "required",
        bulan: "required",
        nominal: "required",
        tanggal_dibuat: "required",
        rombel_id: "required",
        m_rek_sekolah_id: "required",
      };
      const message = {
        "nama.required": "Nama harus diisi",
        "bulan.required": "Bulan harus dipilih",
        "nominal.required": "Nominal harus diisi",
        "tanggal_dibuat.required": "Tanggal dibuat harus diisi",
        "rombel_id.required": "Bagikan harus dipilih",
        "m_rek_sekolah_id.required": "Rekening harus dipilih",
      };
      const validation = await validate(request.all(), rules, message);
      if (validation.fails()) {
        return response.unprocessableEntity(validation.messages());
      }
    } else if (tipe_ujian) {
      const rules = {
        nama: "required",
        tipe_ujian: "required",
        nominal: "required",
        tanggal_dibuat: "required",
        rombel_id: "required",
        m_rek_sekolah_id: "required",
      };
      const message = {
        "nama.required": "Nama harus diisi",
        "tipe_ujian.required": "Tipe ujian harus dipilih",
        "nominal.required": "Nominal harus diisi",
        "tanggal_dibuat.required": "Tanggal dibuat harus diisi",
        "rombel_id.required": "Bagikan harus dipilih",
        "m_rek_sekolah_id.required": "Rekening harus dipilih",
      };
      const validation = await validate(request.all(), rules, message);
      if (validation.fails()) {
        return response.unprocessableEntity(validation.messages());
      }
    }

    rombel_id = rombel_id.length ? rombel_id : [];

    const pembayaran = await MPembayaran.create({
      nama,
      jenis,
      bulan,
      tipe_ujian: jenis == "lainnya" ? JSON.stringify(tag) : tipe_ujian,
      nominal,
      tanggal_dibuat,
      m_rek_sekolah_id,
      dihapus: 0,
      m_sekolah_id: sekolah.id,
    });

    //   // email Service
    //   const userIds = await MAnggotaRombel.query()
    //   .with("user")
    //   .where({ m_rombel_id: rombel_id })
    //   .fetch();

    //  const result = await Promise.all(
    //     userIds.toJSON().map(async (d) => {
    //       if(d.user.email != null){
    //         const gmail = await Mail.send(`emails.spp`,d,(message)=>{
    //           message
    //           .to("raihanvans@gmail.com")
    //           .from("no-reply@smarteschool.id")
    //           .subject("Pembayaran SPP")
    //           .text(`${d.user.nama} `)
    //         })

    //         if (gmail) {
    //           return response.ok({
    //             message: messageEmailSuccess,
    //           });
    //         }
    //         // return d.user.nama;
    //       }
    //     })
    //   );

    //  if (gmail) {
    //    return response.ok({
    //      message: messageEmailSuccess,
    //    });
    //  }

    if (rombel_id.length) {
      await Promise.all(
        rombel_id.map(async (d) => {
          const check = await TkPembayaranRombel.query()
            .where({ dihapus: 0 })
            .andWhere({ m_pembayaran_id: pembayaran.id })
            .andWhere({ m_rombel_id: d })
            .andWhere({ m_sekolah_id: sekolah.id })
            .first();

          if (!check) {
            const tkPembayaran = await TkPembayaranRombel.create({
              dihapus: 0,
              m_pembayaran_id: pembayaran.id,
              m_rombel_id: d,
              m_sekolah_id: sekolah.id,
            });

            // const userIds = await MAnggotaRombel.query()
            //   .where({ m_rombel_id: d })
            //   .pluck("m_user_id");

            const userIds = await MAnggotaRombel.query()
              .with("user", (builder) => {
                builder
                  .select("id", "email", "nama", "whatsapp")
                  .where({ dihapus: 0 });
              })
              .where({ m_rombel_id: d })
              .andWhere({ dihapus: 0 })
              .fetch();

            await Promise.all(
              userIds
                .toJSON()
                .filter((e) => e.user)
                .map(async (e) => {
                  const bayarSiswa = await MPembayaranSiswa.create({
                    status: "belum lunas",
                    dihapus: 0,
                    m_user_id: e.m_user_id,
                    tk_pembayaran_rombel_id: tkPembayaran.id,
                    m_sekolah_id: sekolah.id,
                  });
                  // NOTIFIKASI WHATSAPP
                  try {
                    // await WhatsAppService.sendMessage(
                    //   `${e.user.whatsapp}`,
                    //   `Halo ${e.user.nama}, ${nama} telah keluar, segera lunasi pembayaran. Tekan tautan link berikut untuk melakukan pembayaran ${domain}/smartschool/tagihan/${bayarSiswa.id}`
                    // );
                  } catch (error) {
                    console.log(error);
                  }

                  // if (e.user.email != null) {
                  // try {
                  //   const gmail = Mail.send(
                  //     `emails.spp`,
                  //     pembayaran.toJSON(),
                  //     (message) => {
                  //       message
                  //         .to(`${e.user.email}`)
                  //         .from("no-reply@smarteschool.id")
                  //         .subject("Pembayaran SPP");
                  //     }
                  //   );
                  // } catch (error) {
                  //   // console.log(error);
                  // }
                  // }
                })
            );
          }
        })
      );
    }

    // return result;

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPembayaran({ response, request, auth, params: { pembayaran_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let {
      nama,
      jenis,
      bulan,
      tipe_ujian,
      nominal,
      rombel_id,
      tanggal_dibuat,
      tag,
      m_rek_sekolah_id,
    } = request.post();

    if (bulan) {
      const rules = {
        nama: "required",
        bulan: "required",
        nominal: "required",
        tanggal_dibuat: "required",
        rombel_id: "required",
        m_rek_sekolah_id: "required",
      };
      const message = {
        "nama.required": "Nama harus diisi",
        "bulan.required": "Bulan harus dipilih",
        "nominal.required": "Nominal harus diisi",
        "tanggal_dibuat.required": "Tanggal dibuat harus diisi",
        "rombel_id.required": "Bagikan harus dipilih",
        "m_rek_sekolah_id.required": "Rekening harus dipilih",
      };
      const validation = await validate(request.all(), rules, message);
      if (validation.fails()) {
        return response.unprocessableEntity(validation.messages());
      }
    } else if (tipe_ujian) {
      const rules = {
        nama: "required",
        tipe_ujian: "required",
        nominal: "required",
        tanggal_dibuat: "required",
        rombel_id: "required",
        m_rek_sekolah_id: "required",
      };
      const message = {
        "nama.required": "Nama harus diisi",
        "tipe_ujian.required": "Tipe ujian harus dipilih",
        "nominal.required": "Nominal harus diisi",
        "tanggal_dibuat.required": "Tanggal dibuat harus diisi",
        "rombel_id.required": "Bagikan harus dipilih",
        "m_rek_sekolah_id.required": "Rekening harus dipilih",
      };
      const validation = await validate(request.all(), rules, message);
      if (validation.fails()) {
        return response.unprocessableEntity(validation.messages());
      }
    }

    rombel_id = rombel_id.length ? rombel_id : [];

    const pembayaran = await MPembayaran.query()
      .where({ id: pembayaran_id })
      .first();
    await MPembayaran.query()
      .where({ id: pembayaran_id })
      .update({
        nama,
        jenis,
        bulan,
        tipe_ujian: jenis == "lainnya" ? JSON.stringify(tag) : tipe_ujian,
        tanggal_dibuat,
        nominal,
        m_rek_sekolah_id,
      });

    if (!pembayaran) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    const rombelIds = await TkPembayaranRombel.query()
      .where({ dihapus: 0 })
      .andWhere({ m_pembayaran_id: pembayaran.id })
      .andWhere({ m_sekolah_id: sekolah.id })
      .pluck("m_rombel_id");

    rombelIds
      .filter((item) => !rombel_id.includes(item))
      .map(async (item) => {
        await TkPembayaranRombel.query()
          .where({ m_rombel_id: item })
          .where({ dihapus: 0 })
          .andWhere({ m_pembayaran_id: pembayaran.id })
          .andWhere({ m_sekolah_id: sekolah.id })
          .delete();
      });
    if (rombel_id.length) {
      await Promise.all(
        rombel_id.map(async (d) => {
          const check = await TkPembayaranRombel.query()
            .where({ dihapus: 0 })
            .andWhere({ m_pembayaran_id: pembayaran.id })
            .andWhere({ m_rombel_id: d })
            .andWhere({ m_sekolah_id: sekolah.id })
            .first();

          if (!check) {
            const tkPembayaran = await TkPembayaranRombel.create({
              dihapus: 0,
              m_pembayaran_id: pembayaran.id,
              m_rombel_id: d,
              m_sekolah_id: sekolah.id,
            });

            const userIds = await MAnggotaRombel.query()
              .with("user", (builder) => {
                builder.select("id", "email").where({ dihapus: 0 });
              })
              .where({ m_rombel_id: d })
              .andWhere({ dihapus: 0 })
              .fetch();

            await Promise.all(
              userIds
                .toJSON()
                .filter((e) => e.user)
                .map(async (e) => {
                  await MPembayaranSiswa.create({
                    status: "belum lunas",
                    dihapus: 0,
                    m_user_id: e.m_user_id,
                    tk_pembayaran_rombel_id: tkPembayaran.id,
                    m_sekolah_id: sekolah.id,
                  });
                  // if (e.user.email != null) {
                  //   try {
                  //     const gmail = Mail.send(
                  //       `emails.spp`,
                  //       pembayaran.toJSON(),
                  //       (message) => {
                  //         message
                  //           .to(`${e.user.email}`)
                  //           .from("no-reply@smarteschool.id")
                  //           .subject("Pembayaran SPP");
                  //       }
                  //     );
                  //   } catch (error) {
                  //     // console.log(error);
                  //   }
                  // }
                })
            );
          }
        })
      );
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePembayaran({
    response,
    request,
    auth,
    params: { pembayaran_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const pembayaran = await MPembayaran.query()
      .where({ id: pembayaran_id })
      .update({
        dihapus: 1,
      });

    if (!pembayaran) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postPembayaranKategori({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { kategori } = request.post();
    const rules = {
      kategori: "required",
    };
    const message = {
      "kategori.required": "Kategori harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    await MPembayaranKategori.create({
      kategori,
      dihapus: 0,
      m_sekolah_id: sekolah.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async deletePembayaranKategori({
    response,
    request,
    auth,
    params: { pembayaran_kategori_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const pembayaranKategori = await MPembayaranKategori.query()
      .where({ id: pembayaran_kategori_id })
      .update({
        dihapus: 1,
      });

    if (!pembayaranKategori) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getPembayaranSiswa({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let { status } = request.get();

    status = status ? status : "belum lunas";

    const user = await auth.getUser();

    const rekSekolah = await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    const pembayaran = await MPembayaranSiswa.query()
      .with("rombelPembayaran", (builder) => {
        builder.with("pembayaran", (builder) => {
          builder.where({ dihapus: 0 });
        });
      })
      .with("riwayat", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .withCount("riwayat as totalJumlah", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_user_id: user.id })
      .andWhere({ status: status })
      .fetch();

    return response.ok({
      pembayaran: pembayaran
        .toJSON()
        .filter((item) => item.rombelPembayaran.pembayaran),
      rek_sekolah: rekSekolah,
    });
  }

  async detailPembayaranSiswa({
    response,
    request,
    auth,
    params: { pembayaran_siswa_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const rekSekolah = await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    const pembayaran = await MPembayaranSiswa.query()
      .with("rombelPembayaran", (builder) => {
        builder.with("pembayaran");
      })
      .with("user")
      .with("riwayat", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .withCount("riwayat as totalJumlah", (builder) => {
        builder.where({ dihapus: 0 });
      })
      // .where({ dihapus: 0 })
      // .andWhere({ m_user_id: user.id })
      .where({ id: pembayaran_siswa_id })
      .first();

    const kontak = await MKontak.query()
      .where({
        m_sekolah_id: sekolah.id,
      })
      .first();

    return response.ok({
      pembayaran: pembayaran,
      rek_sekolah: rekSekolah,
      kontak,
    });
  }

  async postRiwayatPembayaranSiswa({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let {
      bank,
      norek,
      nama_pemilik,
      nominal,
      bukti,
      m_pembayaran_siswa_id,
      ditangguhkan,
    } = request.post();

    if (ditangguhkan) {
      await MPembayaranSiswa.query()
        .where({ id: m_pembayaran_siswa_id })
        .update({
          ditangguhkan: moment().add(7, "days").format("YYYY-MM-DD HH:mm:ss"),
        });
      return response.ok({ message: messagePostSuccess });
    }

    const rules = {
      bank: "required",
      norek: "required",
      nama_pemilik: "required",
      nominal: "required",
      bukti: "required",
    };
    const message = {
      "bank.required": "Bank harus diisi",
      "norek.required": "Norek harus diisi",
      "nama_pemilik.required": "Nama pemilik harus diisi",
      "nominal.required": "Nominal harus diisi",
      "bukti.required": "Bukti harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const pembayaran = await MRiwayatPembayaranSiswa.create({
      bank,
      norek,
      nama_pemilik,
      nominal: +nominal,
      bukti,
      dikonfirmasi: 0,
      m_pembayaran_siswa_id: +m_pembayaran_siswa_id,
      dihapus: 0,
    });

    return response.ok(pembayaran);
  }

  async putRiwayatPembayaranSiswa({
    response,
    request,
    params: { riwayat_pembayaran_siswa_id },
    auth,
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (user.role != "admin" && user.m_sekolah_id != sekolah.id) {
      return response.forbidden({ message: messageForbidden });
    }

    let { dikonfirmasi } = request.post();

    const pembayaran = await MRiwayatPembayaranSiswa.query()
      .where({ id: riwayat_pembayaran_siswa_id })
      .update({
        dikonfirmasi,
      });

    // NOTIFIKASI WHATSAPP
    // try {
    //   await WhatsAppService.sendMessage(
    //     6281316119411,
    //     `Halo ${e.user.nama}, Pembayaran kamu telah dikonfirmasi. Tekan tautan link berikut untuk melihat pembayaran ${domain}/smartschool/tagihan/${riwayat_pembayaran_siswa_id}`
    //   );
    // } catch (error) {
    //   console.log(error);
    // }

    const pembayaranSiswa = await MRiwayatPembayaranSiswa.query()
      .where({ id: riwayat_pembayaran_siswa_id })
      .first();

    const riwayat = await MPembayaranSiswa.query()
      .where({ id: pembayaranSiswa.m_pembayaran_siswa_id })
      .with("riwayat")
      .with("user", (x) => {
        x.select("id", "nama");
      })
      .with("rombelPembayaran", (builder) => {
        builder.with("pembayaran");
      })
      .first();

    const totalDibayar = riwayat
      .toJSON()
      .riwayat.reduce((a, b) => a + b.nominal, 0);
    const totalTagihan = riwayat.toJSON().rombelPembayaran?.pembayaran?.nominal;
    if (totalDibayar < totalTagihan) {
      await MPembayaranSiswa.query()
        .where({ id: pembayaranSiswa.m_pembayaran_siswa_id })
        .update({
          status: "belum lunas",
        });
    } else {
      if (!riwayat.toJSON().riwayat.some((item) => !item.dikonfirmasi)) {
        await MPembayaranSiswa.query()
          .where({ id: pembayaranSiswa.m_pembayaran_siswa_id })
          .update({
            status: "lunas",
          });
      }
    }

    const mutasi = await MMutasi.create({
      tipe: "kredit",
      nama: `Pembayaran ${riwayat.toJSON().rombelPembayaran.pembayaran.nama} ${
        riwayat.toJSON().rombelPembayaran.pembayaran.jenis == "spp"
          ? riwayat.toJSON().rombelPembayaran.pembayaran.bulan
          : ""
      }-${riwayat.toJSON().user.nama}`,
      kategori: `pembayaran ${
        riwayat.toJSON().rombelPembayaran.pembayaran.jenis
      }`,
      nominal: pembayaranSiswa.nominal,
      dihapus: 0,
      m_rek_sekolah_id:
        riwayat.toJSON().rombelPembayaran.pembayaran.m_rek_sekolah_id,
      m_sekolah_id: sekolah.id,
      waktu_dibuat: pembayaranSiswa.updated_at,
    });

    const rekSekolah = await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({
        id: riwayat.toJSON().rombelPembayaran.pembayaran.m_rek_sekolah_id,
      })
      .first();

    if (rekSekolah) {
      await MRekSekolah.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({
          id: riwayat.toJSON().rombelPembayaran.pembayaran.m_rek_sekolah_id,
        })
        .update({
          pemasukan:
            parseInt(rekSekolah.pemasukan) + parseInt(pembayaranSiswa.nominal),
        });
    }

    return response.ok(pembayaran);
  }

  async deleteRiwayatPembayaranSiswa({
    response,
    request,
    params: { riwayat_pembayaran_siswa_id },
    auth,
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (user.role != "admin" && user.m_sekolah_id != sekolah.id) {
      return response.forbidden({ message: messageForbidden });
    }

    const pembayaranSiswa = await MRiwayatPembayaranSiswa.query()
      .where({ id: riwayat_pembayaran_siswa_id })
      .first();

    const riwayat = await MPembayaranSiswa.query()
      .where({ id: pembayaranSiswa.m_pembayaran_siswa_id })
      .with("riwayat")
      .with("user", (x) => {
        x.select("id", "nama");
      })
      .with("rombelPembayaran", (builder) => {
        builder.with("pembayaran");
      })
      .first();

    if (pembayaranSiswa.dikonfirmasi) {
      const totalDibayar =
        riwayat.toJSON().riwayat.reduce((a, b) => a + b.nominal, 0) -
        pembayaranSiswa.nominal;
      const totalTagihan =
        riwayat.toJSON().rombelPembayaran?.pembayaran?.nominal;
      if (totalDibayar < totalTagihan) {
        await MPembayaranSiswa.query()
          .where({ id: pembayaranSiswa.m_pembayaran_siswa_id })
          .update({
            status: "belum lunas",
          });
      } else {
        if (!riwayat.toJSON().riwayat.some((item) => !item.dikonfirmasi)) {
          await MPembayaranSiswa.query()
            .where({ id: pembayaranSiswa.m_pembayaran_siswa_id })
            .update({
              status: "lunas",
            });
        }
      }

      const mutasi = await MMutasi.create({
        tipe: "debit",
        nama: `Pembayaran ${
          riwayat.toJSON().rombelPembayaran.pembayaran.nama
        } ${
          riwayat.toJSON().rombelPembayaran.pembayaran.jenis == "spp"
            ? riwayat.toJSON().rombelPembayaran.pembayaran.bulan
            : ""
        }-${riwayat.toJSON().user.nama}`,
        kategori: `pembayaran ${
          riwayat.toJSON().rombelPembayaran.pembayaran.jenis
        }`,
        nominal: pembayaranSiswa.nominal,
        dihapus: 0,
        m_sekolah_id: sekolah.id,
        m_rek_sekolah_id:
          riwayat.toJSON().rombelPembayaran.pembayaran.m_rek_sekolah_id,
        waktu_dibuat: pembayaranSiswa.updated_at,
      });

      const rekSekolah = await MRekSekolah.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({
          id: riwayat.toJSON().rombelPembayaran.pembayaran.m_rek_sekolah_id,
        })
        .first();

      if (rekSekolah) {
        await MRekSekolah.query()
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({
            id: riwayat.toJSON().rombelPembayaran.pembayaran.m_rek_sekolah_id,
          })
          .update({
            pengeluaran:
              parseInt(rekSekolah.pengeluaran) +
              parseInt(pembayaranSiswa.nominal),
          });
      }
    }

    const deleteRiwayat = await MRiwayatPembayaranSiswa.query()
      .where({ id: riwayat_pembayaran_siswa_id })
      .delete();
    if (deleteRiwayat > 0) {
      return response.ok({ message: messageDeleteSuccess });
    } else {
      return response.notFound({ message: messageNotFound });
    }
  }

  async putLunasPembayaranSiswa({
    response,
    request,
    params: {
      riwayat_pembayaran_siswa_id,
      user_id,
      m_pembayaran_siswa_id,
      m_pembayaran_id,
    },
    auth,
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (user.role != "admin" && user.m_sekolah_id != sekolah.id) {
      return response.forbidden({ message: messageForbidden });
    }

    const pembayaranUtama = await MPembayaran.query()
      .where({ id: m_pembayaran_id })
      .first();

    await MPembayaranSiswa.query().where({ id: m_pembayaran_siswa_id }).update({
      status: "lunas",
    });

    const pembayaran = await MRiwayatPembayaranSiswa.create({
      bank,
      norek,
      nama_pemilik,
      nominal: pembayaranUtama.nominal,
      bukti,
      dikonfirmasi: 1,
      m_pembayaran_siswa_id: +m_pembayaran_siswa_id,
      dihapus: 0,
    });

    const mutasi = await MMutasi.create({
      tipe: "kredit",
      nama: `Pembayaran ${pembayaranUtama.nama} ${
        pembayaranUtama.jenis == "spp" ? pembayaranUtama.bulan : ""
      }-${riwayat.toJSON().user.nama}`,
      kategori: `pembayaran ${pembayaranUtama.jenis}`,
      nominal: pembayaranUtama.nominal,
      dihapus: 0,
      m_sekolah_id: sekolah.id,
      waktu_dibuat: pembayaran.created_at,
    });

    const rekSekolah = await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .update({ pemasukan: rekSekolah.pemasukan + pembayaranSiswa.nominal });

    return response.ok(pembayaran);
  }

  async getKontak({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const kontak = await MKontak.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    return response.ok({
      kontak: kontak,
    });
  }

  async putKontak({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const { tu, keuangan, kurikulum, kesiswaan, sarpras, humas } =
      request.post();

    const check = await MKontak.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    if (!check) {
      await MKontak.create({
        m_sekolah_id: sekolah.id,
      });
    }

    const kontak = await MKontak.query()
      .where({ m_sekolah_id: sekolah.id })
      .update({
        tu,
        keuangan,
        kurikulum,
        kesiswaan,
        sarpras,
        humas,
      });

    if (!kontak) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getMutasi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let {
      search,
      dari_tanggal,
      sampai_tanggal,
      tipe,
      page,
      filter_grafik,
      kategori: filterKategori,
      tipe_akun,
    } = request.get();
    page = page ? parseInt(page) : 1;

    let grafikData = MMutasi.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id });

    if (!filter_grafik || filter_grafik == "bulan") {
      grafikData.whereBetween("waktu_dibuat", [
        moment().startOf("month").format("YYYY-MM-DD 00:00:00"),
        moment().endOf("month").format("YYYY-MM-DD 23:59:59"),
      ]);
    }
    if (filter_grafik == "minggu") {
      grafikData.whereBetween("waktu_dibuat", [
        moment().startOf("week").format("YYYY-MM-DD 00:00:00"),
        moment().endOf("week").format("YYYY-MM-DD 23:59:59"),
      ]);
    }
    if (filter_grafik == "tahun") {
      grafikData.whereBetween("waktu_dibuat", [
        moment().startOf("year").format("YYYY-MM-DD 00:00:00"),
        moment().endOf("year").format("YYYY-MM-DD 23:59:59"),
      ]);
    }
    grafikData = await grafikData.fetch();

    let sarpras;

    sarpras = MMutasi.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id });

    if (tipe) {
      sarpras.andWhere({ tipe: tipe });
    }
    if (filterKategori) {
      sarpras.andWhere({ kategori: filterKategori });
    }
    if (tipe_akun) {
      sarpras.andWhere({ m_rek_sekolah_id: tipe_akun });
    }
    if (dari_tanggal && sampai_tanggal) {
      sarpras.whereBetween("waktu_dibuat", [dari_tanggal, sampai_tanggal]);
    }
    if (search) {
      sarpras.andWhere("nama", "like", `%${search}%`);
    }

    sarpras = await sarpras.orderBy("created_at", "desc").paginate(page, 25);

    const kategori = await MMutasi.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .distinct("kategori")
      .pluck("kategori");

    return response.ok({
      sarpras: sarpras,
      grafik: grafikData,
      kategori,
    });
  }

  async postMutasi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { tipe, nama, kategori, nominal, waktu_dibuat } = request.post();

    const rules = {
      nama: "required",
      tipe: "required",
      kategori: "required",
      nominal: "required",
    };
    const message = {
      "tipe.required": "Tipe harus dipilih",
      "nama.required": "Nama harus diisi",
      "kategori.required": "Kategori harus diisi",
      "nominal.required": "Nominal harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const mutasi = await MMutasi.create({
      tipe,
      nama,
      kategori,
      nominal,
      dihapus: 0,
      m_sekolah_id: sekolah.id,
      waktu_dibuat,
    });

    const rekSekolah = await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    if (rekSekolah) {
      let pemasukan, pengeluaran;
      if (tipe == "debit") {
        pemasukan = rekSekolah.pemasukan;
        pengeluaran = rekSekolah.pengeluaran + nominal;
      } else {
        pemasukan = rekSekolah.pemasukan + nominal;
        pengeluaran = rekSekolah.pengeluaran;
      }

      await MRekSekolah.query().where({ m_sekolah_id: sekolah.id }).update({
        pemasukan,
        pengeluaran,
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async postMutasiV1({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { tipe, nama, rek_sekolah_id, kategori, nominal, waktu_dibuat } =
      request.post();

    const rules = {
      nama: "required",
      tipe: "required",
      kategori: "required",
      nominal: "required",
      rek_sekolah_id: "required",
    };
    const message = {
      "tipe.required": "Tipe harus dipilih",
      "nama.required": "Nama harus diisi",
      "kategori.required": "Kategori harus diisi",
      "nominal.required": "Nominal harus diisi",
      rek_sekolah_id: "Rekening harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const mutasi = await MMutasi.create({
      tipe,
      nama,
      kategori,
      nominal,
      dihapus: 0,
      m_rek_sekolah_id: rek_sekolah_id,
      m_sekolah_id: sekolah.id,
      waktu_dibuat,
    });

    const rekSekolah = await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ id: rek_sekolah_id })
      .first();

    if (rekSekolah) {
      let pemasukan, pengeluaran;
      if (tipe == "debit") {
        pemasukan = rekSekolah.pemasukan;
        pengeluaran = rekSekolah.pengeluaran + nominal;
      } else {
        pemasukan = rekSekolah.pemasukan + nominal;
        pengeluaran = rekSekolah.pengeluaran;
      }

      await MRekSekolah.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ id: rek_sekolah_id })
        .update({
          pemasukan,
          pengeluaran,
        });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putMutasiV1({ response, request, auth, params: { mutasi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const beforeUpdate = await MMutasi.query().where({ id: mutasi_id }).first();

    const { tipe, rek_sekolah_id, nama, kategori, nominal, waktu_dibuat } =
      request.post();
    const rules = {
      nama: "required",
      tipe: "required",
      kategori: "required",
      nominal: "required",
      rek_sekolah_id: "required",
    };
    const message = {
      "tipe.required": "Tipe harus dipilih",
      "nama.required": "Nama harus diisi",
      "kategori.required": "Kategori harus diisi",
      "nominal.required": "Nominal harus diisi",
      "rek_sekolah_id.required": "Rekening harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const mutasi = await MMutasi.query().where({ id: mutasi_id }).update({
      tipe,
      nama,
      kategori,
      nominal,
      waktu_dibuat,
      m_rek_sekolah_id: rek_sekolah_id,
    });

    const rekSekolah = await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ id: rek_sekolah_id })
      .first();

    if (rekSekolah) {
      let pemasukan, pengeluaran;
      if (tipe != beforeUpdate.tipe) {
        if (tipe == "kredit") {
          if (rek_sekolah_id != beforeUpdate.m_rek_sekolah_id || !beforeUpdate.m_rek_sekolah_id) {
            pengeluaran = parseInt(rekSekolah.pengeluaran);
          } else {
            pengeluaran =
              parseInt(rekSekolah.pengeluaran) - parseInt(beforeUpdate.nominal);
          }
          pemasukan = parseInt(rekSekolah.pemasukan) + parseInt(nominal);
        } else {
          if (rek_sekolah_id != beforeUpdate.m_rek_sekolah_id || !beforeUpdate.m_rek_sekolah_id) {
            pemasukan = parseInt(rekSekolah.pemasukan);
          } else {
            pemasukan =
              parseInt(rekSekolah.pemasukan) - parseInt(beforeUpdate.nominal);
          }
          pengeluaran = parseInt(rekSekolah.pengeluaran) + parseInt(nominal);
        }
      } else {
        if (tipe == "kredit") {
          if (rek_sekolah_id != beforeUpdate.m_rek_sekolah_id || !beforeUpdate.m_rek_sekolah_id) {
            pemasukan = parseInt(rekSekolah.pemasukan) + parseInt(nominal);
          } else {
            pemasukan =
              parseInt(rekSekolah.pemasukan) -
              parseInt(beforeUpdate.nominal) +
              parseInt(nominal);
          }
          pengeluaran = parseInt(rekSekolah.pengeluaran);
        } else {
          if (rek_sekolah_id != beforeUpdate.m_rek_sekolah_id || !beforeUpdate.m_rek_sekolah_id) {
            pengeluaran = parseInt(rekSekolah.pengeluaran) + parseInt(nominal);
          } else {
            pengeluaran =
              parseInt(rekSekolah.pengeluaran) -
              parseInt(beforeUpdate.nominal) +
              parseInt(nominal);
          }
          pemasukan = parseInt(rekSekolah.pemasukan);
        }
      }

      await MRekSekolah.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ id: rek_sekolah_id })
        .update({
          pemasukan,
          pengeluaran,
        });

      const rekBeforeUpdate = await MRekSekolah.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ id: beforeUpdate.m_rek_sekolah_id })
        .first();

      if (rek_sekolah_id != beforeUpdate.m_rek_sekolah_id) {
        let masuk, keluar;
        if (beforeUpdate.tipe == "kredit") {
          masuk = rekBeforeUpdate.pemasukan - beforeUpdate.nominal;
          keluar = rekBeforeUpdate.pengeluaran;
        } else {
          masuk = rekBeforeUpdate.pemasukan;
          keluar = rekBeforeUpdate.pengeluaran - beforeUpdate.nominal;
        }
        await MRekSekolah.query()
          .where({ id: beforeUpdate.m_rek_sekolah_id })
          .update({
            pemasukan: masuk,
            pengeluaran: keluar,
          });
      }
    }

    if (!mutasi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteMutasiV1({ response, request, auth, params: { mutasi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const beforeUpdate = await MMutasi.query().where({ id: mutasi_id }).first();
    const rekSekolah = await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_rek_sekolah_id: beforeUpdate.m_rek_sekolah_id })
      .first();

    if (rekSekolah) {
      let pemasukan, pengeluaran;
      if (beforeUpdate.tipe == "kredit") {
        // Kredit == pemasukan
        pemasukan = rekSekolah.pemasukan - beforeUpdate.nominal;
        if (pemasukan < 0) {
          pemasukan = 0;
        }
        pengeluaran = rekSekolah.pengeluaran;
      } else {
        // debit == pengeluaran
        pengeluaran = rekSekolah.pengeluaran - beforeUpdate.nominal;
        if (pengeluaran < 0) {
          pengeluaran = 0;
        }
        pemasukan = rekSekolah.pemasukan;
      }

      await MRekSekolah.query().where({ m_sekolah_id: sekolah.id }).update({
        pemasukan,
        pengeluaran,
      });
    }

    const mutasi = await MMutasi.query().where({ id: mutasi_id }).update({
      dihapus: 1,
    });

    if (!mutasi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async putMutasi({ response, request, auth, params: { mutasi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const beforeUpdate = await MMutasi.query().where({ id: mutasi_id }).first();

    const { tipe, nama, kategori, nominal, waktu_dibuat } = request.post();
    const rules = {
      nama: "required",
      tipe: "required",
      kategori: "required",
      nominal: "required",
    };
    const message = {
      "tipe.required": "Tipe harus dipilih",
      "nama.required": "Nama harus diisi",
      "kategori.required": "Kategori harus diisi",
      "nominal.required": "Nominal harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const mutasi = await MMutasi.query().where({ id: mutasi_id }).update({
      tipe,
      nama,
      kategori,
      nominal,
      waktu_dibuat,
    });

    const rekSekolah = await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    if (rekSekolah) {
      let pemasukan, pengeluaran;
      if (tipe != beforeUpdate.tipe) {
        if (tipe == "kredit") {
          pemasukan = rekSekolah.pemasukan + nominal;
          pengeluaran = rekSekolah.pengeluaran - beforeUpdate.nominal;
        } else {
          pengeluaran = rekSekolah.pengeluaran + nominal;
          pemasukan = rekSekolah.pemasukan - beforeUpdate.nominal;
        }
      } else {
        if (tipe == "kredit") {
          pemasukan = rekSekolah.pemasukan - beforeUpdate.nominal + nominal;
          pengeluaran = rekSekolah.pengeluaran;
        } else {
          pengeluaran = rekSekolah.pengeluaran - beforeUpdate.nominal + nominal;
          pemasukan = rekSekolah.pemasukan;
        }
      }

      await MRekSekolah.query().where({ m_sekolah_id: sekolah.id }).update({
        pemasukan,
        pengeluaran,
      });
    }

    if (!mutasi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteMutasi({ response, request, auth, params: { mutasi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const beforeUpdate = await MMutasi.query().where({ id: mutasi_id }).first();
    const rekSekolah = await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    if (rekSekolah) {
      let pemasukan, pengeluaran;
      if (beforeUpdate.tipe == "kredit") {
        // Kredit == pemasukan
        pemasukan = rekSekolah.pemasukan - beforeUpdate.nominal;
        if (pemasukan < 0) {
          pemasukan = 0;
        }
        pengeluaran = rekSekolah.pengeluaran;
      } else {
        // debit == pengeluaran
        pengeluaran = rekSekolah.pengeluaran - beforeUpdate.nominal;
        if (pengeluaran < 0) {
          pengeluaran = 0;
        }
        pemasukan = rekSekolah.pemasukan;
      }

      await MRekSekolah.query().where({ m_sekolah_id: sekolah.id }).update({
        pemasukan,
        pengeluaran,
      });
    }

    const mutasi = await MMutasi.query().where({ id: mutasi_id }).update({
      dihapus: 1,
    });

    if (!mutasi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getIndustri({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // get industri
  }

  async postIndustri({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let {
      nama,
      klasifikasi,
      jumlah_karyawan,
      tautan,
      galeri,
      deskripsi,
      tahun_kerjasama,
    } = request.post();

    const rules = {
      nama: "required",
      klasifikasi: "required",
      jumlah_karyawan: "required",
      tautan: "required",
      galeri: "required",
      deskripsi: "required",
      tahun_kerjasama: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "klasifikasi.required": "Klasifikasi harus diisi",
      "jumlah_karyawan.required": "Jumlah karyawan harus diisi",
      "tautan.required": "Tautan harus diisi",
      "galeri.required": "Galeri harus diisi",
      "deskripsi.required": "Deskripsi harus diisi",
      "tahun_kerjasama.required": "Tahun kerjasama harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }
    galeri = galeri ? galeri.toJSON() : null;
    deskripsi = deskripsi ? htmlEscaper.unescape(deskripsi) : null;
    tautan = tautan ? JSON.stringify(tautan) : null;

    await MIndustri.create({
      nama,
      klasifikasi,
      jumlah_karyawan,
      tautan,
      galeri,
      deskripsi,
      tahun_kerjasama,
      dihapus: 0,
      m_sekolah_id: sekolah.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putIndustri({ response, request, auth, params: { industri_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let {
      nama,
      klasifikasi,
      jumlah_karyawan,
      tautan,
      galeri,
      deskripsi,
      tahun_kerjasama,
    } = request.post();

    const rules = {
      nama: "required",
      klasifikasi: "required",
      jumlah_karyawan: "required",
      tautan: "required",
      galeri: "required",
      deskripsi: "required",
      tahun_kerjasama: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "klasifikasi.required": "Klasifikasi harus diisi",
      "jumlah_karyawan.required": "Jumlah karyawan harus diisi",
      "tautan.required": "Tautan harus diisi",
      "galeri.required": "Galeri harus diisi",
      "deskripsi.required": "Deskripsi harus diisi",
      "tahun_kerjasama.required": "Tahun kerjasama harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }
    galeri = galeri ? galeri.toJSON() : null;
    deskripsi = deskripsi ? htmlEscaper.unescape(deskripsi) : null;
    tautan = tautan ? JSON.stringify(tautan) : null;

    const industri = await MIndustri.query().where({ id: industri_id }).update({
      nama,
      klasifikasi,
      jumlah_karyawan,
      tautan,
      galeri,
      deskripsi,
      tahun_kerjasama,
    });

    if (!industri) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteIndustri({ response, request, auth, params: { industri_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const industri = await MIndustri.query().where({ id: industri_id }).update({
      dihapus: 1,
    });

    if (!industri) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getProyek({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();
    const { search, searchall, page } = request.get();

    let proyek;
    let proyekall;

    if (search) {
      // ===== service cari proyek ====

      proyek = MProyek.query()
        .withCount("anggota", (builder) => {
          builder.where({ status: "menerima" });
        })
        .with("anggota", (builder) => {
          builder
            .with("user", (builder) => {
              builder
                .select("id", "m_sekolah_id")
                .with("sekolah", (builder) => {
                  builder.select("id", "nama", "logo_ss");
                });
            })
            .where({ status: "menerima" });
        })
        .where({ dihapus: 0 })
        .andWhere("nama", "like", `%${search}%`);
    } else {
      // ===== service proyek saya ====

      // cek proyek yg diterima
      const terimaProyekIds = await MAnggotaProyek.query()
        .where({ dihapus: 0 })
        .andWhere({ m_user_id: user.id })
        .andWhere({ status: "menerima" })
        .pluck("m_proyek_id");

      // ambil data dari proyek yg diterima
      proyek = MProyek.query()
        .withCount("anggota", (builder) => {
          builder.where({ status: "menerima" });
        })
        .with("anggota", (builder) => {
          builder
            .with("user", (builder) => {
              builder
                .select("id", "m_sekolah_id")
                .with("sekolah", (builder) => {
                  builder.select("id", "nama", "logo_ss");
                });
            })
            .where({ status: "menerima" });
        })
        .where({ dihapus: 0 })
        .andWhere({ m_sekolah_id: sekolah.id })
        .whereIn("id", terimaProyekIds);
    }

    proyekall = MProyek.query()
      .withCount("anggota", (builder) => {
        builder.where({ status: "menerima" });
      })
      .with("anggota", (builder) => {
        builder
          .with("user", (builder) => {
            builder.select("id", "m_sekolah_id").with("sekolah", (builder) => {
              builder.select("id", "nama", "logo_ss");
            });
          })
          .where({ status: "menerima" });
      })
      .where({ dihapus: 0 });

    if (searchall) {
      proyekall.andWhere("nama", "like", `%${searchall}%`);
    }

    // ===== service cari partner ====
    const cariPartner = await MAnggotaProyek.query()
      .where({ dihapus: 0 })
      .pluck("m_user_id");

    const userPartner = await User.query()
      .where({ dihapus: 0 })
      .andWhere("nama", "like", `%${search}%`)
      .whereIn("id", cariPartner)
      .fetch();

    // ===== List Undangan =====
    const undangan = await MAnggotaProyek.query()
      .with("proyek", (builder) => {
        builder
          .withCount("anggota", (builder) => {
            builder.where({ status: "menerima" });
          })
          .with("anggota", (builder) => {
            builder
              .with("user", (builder) => {
                builder
                  .select("id", "m_sekolah_id")
                  .with("sekolah", (builder) => {
                    builder.select("id", "nama", "logo_ss");
                  });
              })
              .where({ status: "menerima" });
          });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_user_id: user.id })
      .andWhere({ status: "undangan" })
      .fetch();

    return response.ok({
      proyek: await proyek.paginate(parseInt(page), 18),
      userPartner: userPartner,
      undangan: undangan,
      proyekall: await proyekall.paginate(parseInt(page), 18),
    });
  }

  async detailProyek({ response, request, auth, params: { proyek_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const proyek = await MProyek.query()
      .with("status")
      .with("user")
      .with("sekolah")
      .with("forum", (builder) => {
        builder.where({ dihapus: 0 }).orderBy("created_at", "desc");
      })
      .with("anggota", (builder) => {
        builder
          .with("user", (builder) => {
            builder.with("sekolah");
          })
          .with("role")
          .where({ dihapus: 0 });
      })
      .where({ id: proyek_id })
      .first();

    // const forumKomen = await MProyekForumKomen.query()
    //   .where({ dihapus: 0 })
    //   .andWhere({ m_proyek_forum: MProyekForum.id })
    //   .fetch();

    return response.ok({
      message: messagePostSuccess,
      proyek,
      // forumKomen,
    });
  }

  async getUser({ response, request, auth }) {
    const {
      page,
      name,
      user_id,
      role = [],
      notRole = [],
      sekolah_id,
    } = request.get();

    let user = User.query()
      .with("sekolah")
      .with("profil")
      .where({ dihapus: 0 })
      .andWhereNot({ role: "admin" });

    if (
      (!notRole.includes("siswa") && role.includes("siswa")) ||
      (role.length == 0 && notRole.length == 0)
    ) {
      user.with("anggotaRombel", (builder) => {
        builder.with("rombel", (builder) => {
          builder.with("jurusan");
        });
      });
    } else {
      if (role) {
        user.whereIn("role", role);
      }
      if (notRole) {
        user.whereNotIn("role", notRole);
      }
    }
    if (name) {
      user.where("nama", "like", `%${name}%`);
    }
    if (user_id) {
      user.where({ id: user_id });
    }
    if (sekolah_id) {
      user.where({ m_sekolah_id: sekolah_id });
    }

    if (user_id) {
      user = await user.first();
    } else if (sekolah_id) {
      user = await user.limit(50).fetch();
    } else {
      user = await user.paginate(page, 18);
    }

    return response.ok({
      user: user,
    });
  }

  async detailUser({ response, request, auth, params: { user_id } }) {
    const role = await auth.getUser();
    if (role.role != "admin") {
      return response.json({
        message: messageForbidden,
      });
    }
    const user = await User.query()
      .where({ dihapus: 0 })
      .where({ id: user_id })
      .first();

    return response.ok({
      user: user,
    });
  }

  async getKategoriPekerjaan({
    response,
    request,
    auth,
    params: { proyek_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let { user_id, prioritas, status, batas_waktu } = request.get();

    let kategori;

    if (batas_waktu) {
      kategori = await MKategoriPekerjaan.query()
        .with("pekerjaan", (builder) => {
          builder
            .with("ditugaskan", (builder) => {
              builder.with("user").where({ dihapus: 0 });
            })
            .where({ dihapus: 0 })
            .andWhere({ batas_waktu: batas_waktu });
        })
        .where({ m_proyek_id: proyek_id })
        .andWhere({ dihapus: 0 })
        .orderBy("urutan", "asc")
        .fetch();
    } else if (prioritas) {
      kategori = await MKategoriPekerjaan.query()
        .with("pekerjaan", (builder) => {
          builder
            .with("ditugaskan", (builder) => {
              builder.with("user").where({ dihapus: 0 });
            })
            .where({ dihapus: 0 })
            .andWhere({ prioritas: prioritas });
        })
        .where({ m_proyek_id: proyek_id })
        .andWhere({ dihapus: 0 })
        .orderBy("urutan", "asc")
        .fetch();
    } else {
      kategori = await MKategoriPekerjaan.query()
        .with("pekerjaan", (builder) => {
          builder
            .with("ditugaskan", (builder) => {
              builder.with("user").where({ dihapus: 0 });
            })
            .where({ dihapus: 0 });
        })
        .where({ m_proyek_id: proyek_id })
        .andWhere({ dihapus: 0 })
        .orderBy("urutan", "asc")
        .fetch();
    }

    return response.ok({
      kategori: kategori,
    });
  }

  async postProyek({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, privasi, deskripsi, banner, m_status_proyek_id } =
      request.post();

    const rules = {
      nama: "required",
      privasi: "required",
      deskripsi: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "privasi.required": "Privasi harus dipilih",
      "deskripsi.required": "Deskripsi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const proyek = await MProyek.create({
      nama,
      privasi,
      deskripsi,
      banner,
      m_status_proyek_id,
      m_user_id: user.id,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    const anggota = await MAnggotaProyek.create({
      m_proyek_id: proyek.id,
      m_user_id: user.id,
      status: "menerima",
      dihapus: 0,
    });
    await anggota.role().create({
      role: "Pemilik",
      dihapus: 0,
    });

    const kategori = await MKategoriPekerjaan.createMany([
      {
        nama: "Daftar Pekerjaan",
        warna: "#2680eb",
        m_proyek_id: proyek.id,
        dihapus: 0,
        urutan: 1,
      },
      {
        nama: "Sedang Dikerjakan",
        warna: "#f9ac50",
        m_proyek_id: proyek.id,
        dihapus: 0,
        urutan: 2,
      },
      {
        nama: "Selesai",
        warna: "#62ed7a",
        m_proyek_id: proyek.id,
        dihapus: 0,
        urutan: 3,
      },
    ]);

    return response.ok({
      proyek,
      kategori,
      message: messagePostSuccess,
    });
  }

  async putProyek({ response, request, auth, params: { proyek_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, privasi, deskripsi, banner, m_status_proyek_id } =
      request.post();

    const rules = {
      nama: "required",
      privasi: "required",
      deskripsi: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "privasi.required": "Privasi harus dipilih",
      "deskripsi.required": "Deskripsi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const proyek = await MProyek.query()
      .where({ id: proyek_id })
      .andWhere({ m_user_id: user.id })
      .update({
        nama,
        privasi,
        deskripsi,
        banner,
        m_status_proyek_id,
        m_user_id: user.id,
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });

    if (!proyek) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteProyek({ response, request, auth, params: { proyek_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const proyek = await MProyek.query()
      .where({ id: proyek_id })
      .andWhere({ m_user_id: user.id })
      .update({
        dihapus: 1,
      });

    if (!proyek) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postKategoriPekerjaan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let { nama, warna, m_proyek_id } = request.post();
    const rules = {
      nama: "required",
      warna: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "warna.required": "Warna harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    warna = warna
      ? warna
      : `#${Math.floor(Math.random() * 16777215).toString(16)}`;

    const maxUrutan = await MKategoriPekerjaan.query().getMax("urutan");

    const kategori = await MKategoriPekerjaan.create({
      nama,
      warna,
      urutan: maxUrutan,
      m_proyek_id,
      dihapus: 0,
    });

    return response.ok({
      kategori,
      message: messagePostSuccess,
    });
  }

  async putKategoriPekerjaan({
    response,
    request,
    auth,
    params: { kategori_pekerjaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, warna, m_proyek_id } = request.post();
    const rules = {
      nama: "required",
      warna: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "warna.required": "Warna harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const kategoriPekerjaan = await MKategoriPekerjaan.query()
      .where({ id: kategori_pekerjaan_id })
      .update({
        nama,
        warna,
        m_proyek_id,
        dihapus: 0,
      });

    if (!kategoriPekerjaan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteKategoriPekerjaan({
    response,
    request,
    auth,
    params: { kategori_pekerjaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const kategoriPekerjaan = await MKategoriPekerjaan.query()
      .where({ id: kategori_pekerjaan_id })
      .update({
        dihapus: 1,
      });

    if (!kategoriPekerjaan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  // ===================== Forum Proyek Service ===========================
  async postProyekForum({ response, request, auth, params: { proyek_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { deskripsi, lampiran, m_user_id } = request.post();
    const rules = {
      deskripsi: "required",
    };
    const message = {
      "deskripsi.required": "Deskripsi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const forum = await MProyekForum.create({
      deskripsi,
      lampiran: lampiran ? lampiran : "",
      m_proyek_id: parseInt(proyek_id),
      m_user_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
      forum,
    });
  }

  async putProyekForum({
    response,
    request,
    auth,
    params: { proyek_id },
    params: { proyekForum_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { deskripsi, lampiran, m_proyek_id } = request.post();
    const rules = {
      deskripsi: "required",
    };
    const message = {
      "deskripsi.required": "Deskripsi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const proyekForum = await MProyekForum.query()
      .where({ id: proyekForum_id })
      .andWhere({ m_user_id: user.id })
      .update({
        deskripsi,
        lampiran,
        m_proyek_id,
        dihapus: 0,
      });

    if (!proyekForum) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteProyekForum({
    response,
    request,
    auth,
    params: { proyek_id },
    params: { proyekForum_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const proyekForum = await MProyekForum.query()
      .where({ id: proyekForum_id })
      .andWhere({ m_proyek_id: proyek_id })
      .update({
        dihapus: 1,
      });

    if (!proyekForum) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  // ===================== Proyek Pekerjaan Service ===========================
  async postPekerjaanProyek({
    response,
    request,
    auth,
    params: { kategori_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { judul, prioritas, status, batas_waktu, deskripsi, urutan } =
      request.post();

    const maxUrutan =
      (await MPekerjaanProyek.query()
        .where({ m_kategori_pekerjaan_id: kategori_id })
        .getMax("urutan")) + 1;

    const pekerjaan = await MPekerjaanProyek.create({
      judul,
      prioritas,
      status,
      batas_waktu,
      deskripsi,
      m_kategori_pekerjaan_id: kategori_id,
      urutan: maxUrutan,
      dihapus: 0,
    });

    return response.ok({
      pekerjaan,
      message: messagePostSuccess,
    });
  }

  async putPekerjaanProyek({
    response,
    request,
    auth,
    params: { pekerjaan_proyek_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      judul,
      prioritas,
      status,
      batas_waktu,
      deskripsi,
      m_kategori_pekerjaan_id,
      urutan,
    } = request.post();

    const pekerjaanProyek = await MPekerjaanProyek.query()
      .where({ id: pekerjaan_proyek_id })
      // .andWhere({ m_user_id: user.id }) // Kolom m_user_id tidak ada di table pekerjaan proyek
      .update({
        judul,
        prioritas,
        status,
        batas_waktu,
        deskripsi,
        m_kategori_pekerjaan_id,
        urutan,
        dihapus: 0,
      });

    if (!pekerjaanProyek) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePekerjaanProyek({
    response,
    request,
    auth,
    params: { pekerjaan_proyek_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const pekerjaanProyek = await MPekerjaanProyek.query()
      .where({ id: pekerjaan_proyek_id })
      .update({
        dihapus: 1,
      });

    if (!pekerjaanProyek) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  // ===================== Anggota Proyek Service =========================

  // async getAnggotaProyek({ response, request, auth }) {
  //   const domain = request.headers().origin;

  //   const sekolah = await this.getSekolahByDomain(domain);

  //   if (sekolah == "404") {
  //     return response.notFound({ message: "Sekolah belum terdaftar" });
  //   }

  //   const { proyek_id } = request.get();

  //   const anggota = await MAnggotaProyek.query()
  //     .where({ dihapus: 0 })
  //     .andWhere({ status: "menerima" })
  //     .andWhere({ m_proyek_id: proyek_id })
  //     .fetch();

  //   return response.ok({
  //     anggota,
  //   });
  // }

  // ============ Invite Anggota kedalam Proyek =================
  async postAnggotaProyek({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { anggota_proyek_id, proyek_id, user_id, status } = request.post();

    const validation = await validate(
      request.post(),
      rulesAnggotaPost,
      pesanSudahDitambahkan
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const isAdmin = await MAnggotaProyekRole.query()
      .where({ m_anggota_proyek_id: anggota_proyek_id })
      .andWhere({ dihapus: 0 })
      .orWhere({ role: "Admin" })
      .orWhere({ role: "Pemilik" })
      .fetch();

    if (!isAdmin) {
      return response.forbidden({ message: messageForbidden });
    }

    await Promise.all(
      user_id.map(async (d, idx) => {
        await MAnggotaProyek.create({
          m_proyek_id: proyek_id,
          m_user_id: d,
          status: status,
          dihapus: 0,
        });
      })
    );

    return response.ok({
      message: messagePostSuccess,
    });
  }

  // ================ Update status Anggota Proyek ======================
  async putAnggotaProyek({
    response,
    request,
    auth,
    params: { anggota_proyek_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { status, role = "Anggota" } = request.post();

    const anggota = await MAnggotaProyek.query()
      .where({ id: anggota_proyek_id })
      .andWhere({ dihapus: 0 })
      .update({
        status,
      });

    if (status == "menerima") {
      const update = await MAnggotaProyekRole.query()
        .where({
          m_anggota_proyek_id: anggota_proyek_id,
        })
        .update({
          role: role,
          dihapus: 0,
        });
      if (!update) {
        await MAnggotaProyekRole.create({
          m_anggota_proyek_id: anggota_proyek_id,
          role: role,
          dihapus: 0,
        });
      }
    }

    if (!anggota) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteAnggotaProyek({
    response,
    request,
    auth,
    params: { anggota_proyek_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { delete_anggota } = request.post();

    // Cek Role, selain admin tidak boleh delete anggota
    // const isAdmin = await MAnggotaProyekRole.query()
    //   .where({ m_anggota_proyek_id: anggota_proyek_id })
    //   .andWhere({ role: "Admin" })
    //   .fetch();

    // if (!isAdmin) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const hapusAnggota = await MAnggotaProyek.query()
      .where({ id: anggota_proyek_id })
      .delete();

    if (!hapusAnggota) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  // =========== Rekap Nilai Service ==============

  async detailRekap({ response, request, auth, params: { materi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nav } = request.get();

    const pelajaran = await MMateri.query()
      .with("mataPelajaran")
      .where({ id: materi_id })
      .first();

    const sikapsosial = await MSikapSosial.query().fetch();

    // const tugas = await MTugas.query().where({ m_user_id: user.id }).fetch();

    const rekap = await MMateri.query()
      .with("jurusan")
      .with("mataPelajaran")
      .with("rekap", (builder) => {
        builder
          .with("rekaprombel", (builder) => {
            builder.withCount("rekapnilai as total", (builder) => {
              builder.where(
                "nilai",
                "<",
                `${pelajaran.toJSON().mataPelajaran.kkm}`
              );
            });
          })
          .where({ dihapus: 0 });
      })
      .where({ id: materi_id })
      // .andWhere({ dihapus: 0 })
      .first();

    const materirombel = await TkMateriRombel.query()
      .with("rombel", (builder) => {
        builder.with("anggotaRombel", (builder) => {
          builder.where({ dihapus: 0 }).with("user", (builder) => {
            builder
              .with("rekapSikap", (builder) => {
                builder.where({
                  m_mata_pelajaran_id: pelajaran.toJSON().mataPelajaran.id,
                });
              })
              .select("id", "nama");
          });
        });
      })
      .where({ m_materi_id: materi_id })
      .fetch();

    const janganUlangRombel = [];
    const rombel = materirombel.toJSON().filter((d) => {
      if (!janganUlangRombel.includes(d.m_rombel_id)) {
        janganUlangRombel.push(d.m_rombel_id);
        return true;
      } else {
        return false;
      }
    });

    const checkPredikat = await MPredikatNilai.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .first();

    if (!checkPredikat) {
      await MPredikatNilai.create({
        predikat: "A",
        bb_pengetahuan: "86",
        ba_pengetahuan: "100",
        bb_keterampilan: "86",
        ba_keterampilan: "100",
        sikap: "Sangat Baik",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
      await MPredikatNilai.create({
        predikat: "B",
        bb_pengetahuan: "71",
        ba_pengetahuan: "85",
        bb_keterampilan: "71",
        ba_keterampilan: "85",
        sikap: "Baik",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
      await MPredikatNilai.create({
        predikat: "C",
        bb_pengetahuan: "56",
        ba_pengetahuan: "70",
        bb_keterampilan: "56",
        ba_keterampilan: "70",
        sikap: "Cukup",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
      await MPredikatNilai.create({
        predikat: "D",
        bb_pengetahuan: "0",
        ba_pengetahuan: "55",
        bb_keterampilan: "0",
        ba_keterampilan: "55",
        sikap: "Kurang",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
    }

    const checkTemplate = await MTemplateDeskripsi.query()
      .where({ m_mata_pelajaran_id: rekap.m_mata_pelajaran_id })
      .first();

    const predikat = await MPredikatNilai.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();
    if (!checkTemplate) {
      await Promise.all(
        predikat.toJSON().map(async (d) => {
          if (d.predikat == "A") {
            await MTemplateDeskripsi.create({
              tipe: "Pengetahuan",
              m_predikat_nilai_id: d.id,
              m_mata_pelajaran_id: rekap.m_mata_pelajaran_id,
              prolog:
                "Peserta didik dinyatakan telah mengetahui, memahami, mengimplementasikan dan menganalisis pengetahuan dengan sangat baik mengenai",
              epilog: "Perlu ditingkatkan mengenai",
            });
            await MTemplateDeskripsi.create({
              tipe: "Keterampilan",
              m_predikat_nilai_id: d.id,
              m_mata_pelajaran_id: rekap.m_mata_pelajaran_id,
              prolog:
                "Peserta didik dinyatakan telah dapat mengetahui, menerapkan, menganalisis, dan mengeveluasi keterampilan dengan sangat baik mengenai",
              epilog: "Perlu ditingkatkan mengenai",
            });
          } else if (d.predikat == "B") {
            await MTemplateDeskripsi.create({
              tipe: "Pengetahuan",
              m_predikat_nilai_id: d.id,
              m_mata_pelajaran_id: rekap.m_mata_pelajaran_id,
              prolog:
                "Peserta didik dinyatakan telah mengetahui, memahami, mengimplementasikan dan menganalisis pengetahuan dengan baik mengenai",
              epilog: "Perlu ditingkatkan mengenai",
            });
            await MTemplateDeskripsi.create({
              tipe: "Keterampilan",
              m_predikat_nilai_id: d.id,
              m_mata_pelajaran_id: rekap.m_mata_pelajaran_id,
              prolog:
                "Peserta didik dinyatakan telah dapat mengetahui, menerapkan, menganalisis, dan mengeveluasi keterampilan dengan baik mengenai",
              epilog: "Perlu ditingkatkan mengenai",
            });
          } else if (d.predikat == "C") {
            await MTemplateDeskripsi.create({
              tipe: "Pengetahuan",
              m_predikat_nilai_id: d.id,
              m_mata_pelajaran_id: rekap.m_mata_pelajaran_id,
              prolog:
                "Peserta didik dinyatakan telah mengetahui, memahami, mengimplementasikan dan menganalisis pengetahuan dengan cukup mengenai",
              epilog: "Perlu ditingkatkan mengenai",
            });
            await MTemplateDeskripsi.create({
              tipe: "Keterampilan",
              m_predikat_nilai_id: d.id,
              m_mata_pelajaran_id: rekap.m_mata_pelajaran_id,
              prolog:
                "Peserta didik dinyatakan telah dapat mengetahui, menerapkan, menganalisis, dan mengeveluasi keterampilan dengan cukup mengenai",
              epilog: "Perlu ditingkatkan mengenai",
            });
          } else if (d.predikat == "D") {
            await MTemplateDeskripsi.create({
              tipe: "Pengetahuan",
              m_predikat_nilai_id: d.id,
              m_mata_pelajaran_id: rekap.m_mata_pelajaran_id,
              prolog:
                "Peserta didik dinyatakan telah mengetahui, memahami, mengimplementasikan dan menganalisis pengetahuan dengan kurang mengenai",
              epilog: "Perlu ditingkatkan mengenai",
            });
            await MTemplateDeskripsi.create({
              tipe: "Keterampilan",
              m_predikat_nilai_id: d.id,
              m_mata_pelajaran_id: rekap.m_mata_pelajaran_id,
              prolog:
                "Peserta didik dinyatakan telah dapat mengetahui, menerapkan, menganalisis, dan mengeveluasi keterampilan dengan kurang mengenai",
              epilog: "Perlu ditingkatkan mengenai",
            });
          } else {
            await MTemplateDeskripsi.create({
              tipe: "Pengetahuan",
              m_predikat_nilai_id: d.id,
              m_mata_pelajaran_id: rekap.m_mata_pelajaran_id,
              prolog:
                "Peserta didik dinyatakan telah mengetahui, memahami, mengimplementasikan dan menganalisis pengetahuan dengan kurang mengenai",
              epilog: "Perlu ditingkatkan mengenai",
            });
            await MTemplateDeskripsi.create({
              tipe: "Keterampilan",
              m_predikat_nilai_id: d.id,
              m_mata_pelajaran_id: rekap.m_mata_pelajaran_id,
              prolog:
                "Peserta didik dinyatakan telah dapat mengetahui, menerapkan, menganalisis, dan mengeveluasi keterampilan dengan kurang mengenai",
              epilog: "Perlu ditingkatkan mengenai",
            });
          }
        })
      );

      await MTemplateDeskripsi.create({
        tipe: "Sikap",
        m_mata_pelajaran_id: rekap.m_mata_pelajaran_id,
        prolog: "Peserta didik dinyatakan telah menunjukkan sikap - sikap",
        epilog: "Perlu ditingkatkan mengenai",
      });
    }

    const dataTemplatePengetahuan = await MTemplateDeskripsi.query()
      .with("predikat")
      .where({ m_mata_pelajaran_id: rekap.m_mata_pelajaran_id })
      .andWhere({ tipe: "Pengetahuan" })
      .fetch();

    const dataTemplateKeterampilan = await MTemplateDeskripsi.query()
      .with("predikat")
      .where({ m_mata_pelajaran_id: rekap.m_mata_pelajaran_id })
      .andWhere({ tipe: "Keterampilan" })
      .fetch();

    const dataTemplateSikap = await MTemplateDeskripsi.query()
      .with("predikat")
      .where({ m_mata_pelajaran_id: rekap.m_mata_pelajaran_id })
      .andWhere({ tipe: "Sikap" })
      .fetch();

    return response.ok({
      rekap,
      materirombel: rombel,
      dataTemplatePengetahuan,
      dataTemplateKeterampilan,
      dataTemplateSikap,
      sikapsosial,
      // tugas,
      predikat,
    });
  }

  async putTemplateDeskripsi({
    response,
    request,
    auth,
    params: { template_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { prolog, epilog } = request.post();

    const rules = {
      prolog: "required",
      epilog: "required",
    };
    const message = {
      "prolog.required": "Prolog harus diisi",
      "epilog.required": "Epilog harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const template = await MTemplateDeskripsi.query()
      .where({ id: template_id })
      .update({
        prolog,
        epilog,
      });

    if (!template) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async postSikapRombel({
    response,
    request,
    auth,
    params: { user_id, mata_pelajaran_id },
    params: { rombel_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // const user = await auth.getUser();

    const {
      m_sikap_ditunjukkan_id,
      m_sikap_ditingkatkan_id,
      m_predikat_nilai_id,
    } = request.post();
    const rules = {
      m_sikap_ditingkatkan_id: "required",
      m_sikap_ditunjukkan_id: "required",
      m_predikat_nilai_id: "required",
    };
    const message = {
      "m_sikap_ditingkatkan_id.required":
        "Pilih salah satu sikap yang ditingkatkan",
      "m_sikap_ditunjukkan_id.required":
        "Pilih salah satu sikap yang ditunjukkan",
      "m_predikat_nilai_id.required": "Pilih salah satu predikat",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const sikap = await MSikapRombel.query()
      .where({ m_user_id: user_id })
      .andWhere({ m_rombel_id: rombel_id })
      .andWhere({ m_mata_pelajaran_id: mata_pelajaran_id })
      .first();

    if (!sikap) {
      await MSikapRombel.create({
        m_user_id: user_id,
        m_rombel_id: rombel_id,
        m_sikap_ditunjukkan_id: m_sikap_ditunjukkan_id
          ? m_sikap_ditunjukkan_id.length
            ? m_sikap_ditunjukkan_id.toString()
            : null
          : null,
        m_sikap_ditingkatkan_id: m_sikap_ditingkatkan_id
          ? m_sikap_ditingkatkan_id.length
            ? m_sikap_ditingkatkan_id.toString()
            : null
          : null,
        m_predikat_nilai_id,
        m_mata_pelajaran_id: mata_pelajaran_id,
        status: 1,
        dihapus: 0,
      });
      return response.ok({
        message: messagePostSuccess,
      });
    } else {
      await MSikapRombel.query()
        .where({ id: sikap.id })
        .update({
          m_sikap_ditunjukkan_id: m_sikap_ditunjukkan_id
            ? m_sikap_ditunjukkan_id.length
              ? m_sikap_ditunjukkan_id.toString()
              : null
            : null,
          m_sikap_ditingkatkan_id: m_sikap_ditingkatkan_id
            ? m_sikap_ditingkatkan_id.length
              ? m_sikap_ditingkatkan_id.toString()
              : null
            : null,
          m_predikat_nilai_id,
          m_mata_pelajaran_id: mata_pelajaran_id,
        });
    }
    return response.ok({
      message: messagePutSuccess,
    });
  }
  async postRaporSikapSosial({ response, request, auth, params: { user_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }
    const checkSikap = await MSikapSiswa.query()
      .where({ m_user_id: user_id })
      .andWhere({ dihapus: 0 })
      .andWhere({ m_ta_id: ta.id })
      .first();

    const {
      m_sikap_sosial_ditunjukkan_id,
      m_sikap_sosial_ditingkatkan_id,
      tipe,
    } = request.post();
    const rules = {
      m_sikap_sosial_ditingkatkan_id: "required",
      m_sikap_sosial_ditunjukkan_id: "required",
    };
    const message = {
      "m_sikap_sosial_ditingkatkan_id.required":
        "Pilih salah satu sikap yang ditingkatkan",
      "m_sikap_sosial_ditunjukkan_id.required":
        "Pilih salah satu sikap yang ditunjukkan",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }
    let sikap;

    if (checkSikap) {
      sikap = await MSikapSiswa.query()
        .where({ m_user_id: user_id })
        .update({
          tipe,
          m_sikap_sosial_ditunjukkan_id: m_sikap_sosial_ditunjukkan_id
            ? m_sikap_sosial_ditunjukkan_id.length
              ? m_sikap_sosial_ditunjukkan_id.toString()
              : null
            : null,
          m_sikap_sosial_ditingkatkan_id: m_sikap_sosial_ditingkatkan_id
            ? m_sikap_sosial_ditingkatkan_id.length
              ? m_sikap_sosial_ditingkatkan_id.toString()
              : null
            : null,
        });
    } else {
      sikap = await MSikapSiswa.create({
        m_user_id: user_id,
        tipe,
        m_sikap_sosial_ditunjukkan_id: m_sikap_sosial_ditunjukkan_id
          ? m_sikap_sosial_ditunjukkan_id.length
            ? m_sikap_sosial_ditunjukkan_id.toString()
            : null
          : null,
        m_sikap_sosial_ditingkatkan_id: m_sikap_sosial_ditingkatkan_id
          ? m_sikap_sosial_ditingkatkan_id.length
            ? m_sikap_sosial_ditingkatkan_id.toString()
            : null
          : null,
        m_ta_id: ta.id,
        status: 1,
        dihapus: 0,
      });
    }
    if (!sikap) {
      return response.ok({
        message: messagePostSuccess,
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async postRaporSikapSpiritual({
    response,
    request,
    auth,
    params: { user_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }
    const checkSikap = await MSikapSiswa.query()
      .where({ m_user_id: user_id })
      .andWhere({ dihapus: 0 })
      .andWhere({ m_ta_id: ta.id })
      .first();

    const {
      m_sikap_spiritual_ditingkatkan_id,
      m_sikap_spiritual_ditunjukkan_id,
      tipe,
    } = request.post();
    const rules = {
      m_sikap_spiritual_ditingkatkan_id: "required",
      m_sikap_spiritual_ditunjukkan_id: "required",
    };
    const message = {
      "m_sikap_spiritual_ditingkatkan_id.required":
        "Pilih salah satu sikap yang ditingkatkan",
      "m_sikap_spiritual_ditunjukkan_id.required":
        "Pilih salah satu sikap yang ditunjukkan",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    let sikap;

    if (checkSikap) {
      sikap = await MSikapSiswa.query()
        .where({ m_user_id: user_id })
        .update({
          tipe,
          m_sikap_spiritual_ditunjukkan_id: m_sikap_spiritual_ditunjukkan_id
            ? m_sikap_spiritual_ditunjukkan_id.length
              ? m_sikap_spiritual_ditunjukkan_id.toString()
              : null
            : null,
          m_sikap_spiritual_ditingkatkan_id: m_sikap_spiritual_ditingkatkan_id
            ? m_sikap_spiritual_ditingkatkan_id.length
              ? m_sikap_spiritual_ditingkatkan_id.toString()
              : null
            : null,
        });
    } else {
      sikap = await MSikapSiswa.create({
        m_user_id: user_id,
        tipe,
        m_sikap_spiritual_ditunjukkan_id: m_sikap_spiritual_ditunjukkan_id
          ? m_sikap_spiritual_ditunjukkan_id.length
            ? m_sikap_spiritual_ditunjukkan_id.toString()
            : null
          : null,
        m_sikap_spiritual_ditingkatkan_id: m_sikap_spiritual_ditingkatkan_id
          ? m_sikap_spiritual_ditingkatkan_id.length
            ? m_sikap_spiritual_ditingkatkan_id.toString()
            : null
          : null,
        status: 1,
        m_ta_id: ta.id,
        dihapus: 0,
      });
    }
    if (!sikap) {
      return response.ok({
        message: messagePostSuccess,
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async deleteRaporSikap({ response, request, auth, params: { user_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const sikap = await MSikapSiswa.query()
      .where({ m_user_id: user_id })
      .update({
        m_sikap_sosial_ditunjukkan_id: null,
        m_sikap_sosial_ditingkatkan_id: null,
      });

    if (!sikap) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async deleteRaporSikapSosial({
    response,
    request,
    auth,
    params: { user_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    // const user = await auth.getUser();

    const sikap = await MSikapSiswa.query()
      .where({ m_user_id: user_id })
      .update({
        m_sikap_sosial_ditunjukkan_id: null,
        m_sikap_sosial_ditingkatkan_id: null,
      });

    if (!sikap) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async deleteRaporSikapSpiritual({
    response,
    request,
    auth,
    params: { user_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    // const user = await auth.getUser();

    const sikap = await MSikapSiswa.query()
      .where({ m_user_id: user_id })
      .update({
        m_sikap_spiritual_ditunjukkan_id: null,
        m_sikap_spiritual_ditingkatkan_id: null,
      });

    if (!sikap) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  // ============ Detail Rekap Nilai ============

  async detailRekapNilai({
    response,
    request,
    auth,
    params: { rekap_id },
    // params: { rombel_id },
    params: { materi_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { rombel_id, tipe } = request.get();

    const pelajaran = await MMateri.query()
      .with("mataPelajaran")
      .where({ id: materi_id })
      .first();

    const materirombel = await TkMateriRombel.query()
      .with("rombel")
      .where({ m_materi_id: materi_id })
      .fetch();

    let rekap;
    let timelineTugas;
    let tugas;
    let ujian;
    if (rombel_id) {
      rekap = await MRekap.query()
        .with("rekaprombel", (builder) => {
          builder
            .where({ m_rombel_id: rombel_id })
            .with("rekapnilai", (builder) => {
              builder.with("user", (builder) => {
                builder.select("id", "nama");
              });
            })
            .withCount("rekapnilai as total", (builder) => {
              builder.where(
                "nilai",
                "<",
                `${pelajaran.toJSON().mataPelajaran.kkm}`
              );
            })
            .with("tugas", (builder) => {
              builder.where({ dihapus: 0 });
            })
            .where({ dihapus: 0 });
          // .andWhere({ m_rombel_id: rombel_id });
        })
        .with("materi", (builder) => {
          builder.with("mataPelajaran");
        })
        .where({ id: rekap_id })
        .andWhere({ dihapus: 0 })
        .first();
    } else {
      rekap = await MRekap.query()
        .with("rekaprombel", (builder) => {
          builder
            .with("rekapnilai", (builder) => {
              builder.with("user", (builder) => {
                builder.select("id", "nama");
              });
            })
            .withCount("rekapnilai as total", (builder) => {
              builder.where(
                "nilai",
                "<",
                `${pelajaran.toJSON().mataPelajaran.kkm}`
              );
            })
            .with("tugas", (builder) => {
              builder.where({ dihapus: 0 });
            })
            .where({ dihapus: 0 });
          // .andWhere({ m_rombel_id: rombel_id });
        })
        .with("materi", (builder) => {
          builder.with("mataPelajaran");
        })
        .where({ id: rekap_id })
        .andWhere({ dihapus: 0 })
        .first();
    }

    if (rombel_id) {
      const mapelIds = await MMataPelajaran.query()
        .where({ m_user_id: user.id })
        .where({ dihapus: 0 })
        .ids();
      timelineTugas = await MTimeline.query()
        .where({ m_user_id: user.id })
        .andWhere({ m_rombel_id: rombel_id })
        .with("tugas", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .fetch();
      tugas = timelineTugas
        .toJSON()
        .filter((t) => t.tugas != null)
        .map((t) => t.tugas);
      const ujianRombel = await TkJadwalUjian.query()
        .with("jadwalUjian", (builder) => {
          builder
            .with("ujian", (builder) => {
              builder
                .where({ dihapus: 0 })
                .whereIn("m_mata_pelajaran_id", mapelIds);
              if (rekap.teknik == "UTS") {
                builder.andWhere("tipe", "like", `%pts%`);
              } else if (rekap.teknik == "UAS") {
                builder.andWhere("tipe", "like", `%pas%`);
              } else if (rekap.teknik == "UH") {
                builder.andWhere("tipe", "like", `%ph%`);
              } else if (rekap.teknik == "US") {
                builder.andWhere("tipe", "like", `%us%`);
              }
            })
            .where({ dihapus: 0 });
        })
        .where({ dihapus: 0 })
        .whereIn("m_rombel_id", [rombel_id])
        .fetch();

      // return ujianRombel;

      ujian = ujianRombel
        .toJSON()
        .filter((d) => d.jadwalUjian && d.jadwalUjian.ujian);
    }
    // const tugas = await MTugas.query().where({ m_user_id: user.id }).fetch();

    return response.ok({
      materirombel,
      rekap,
      tugas,
      ujian,
    });
  }

  async detailRekapRombel({
    response,
    request,
    auth,
    // params: { rekap_id },
    params: { materi_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const materirombel = await TkMateriRombel.query()
      .with("rombel")
      .where({ m_materi_id: materi_id })
      .fetch();

    const tugasdata = await MTimeline.query()
      .select("id", "m_tugas_id", "m_rombel_id", "m_user_id")
      .with("listSiswaDinilai", (builder) => {
        builder
          .select("id", "nilai", "m_user_id", "m_timeline_id")
          .with("user", (builder) => {
            builder.select("id", "nama");
          })
          .whereNotNull("nilai");
      })
      .where({ m_tugas_id: 172 })
      .fetch();

    const datatugas = await MRombel.query()
      .with("anggotaRombel", (builder) => {
        builder.where({ dihapus: 0 }).with("user", (builder) => {
          builder.select("id", "nama").with("tugas", (builder) => {
            builder
              .select("id", "nilai", "m_user_id", "m_timeline_id")
              .with("user", (builder) => {
                builder.select("id", "nama");
              })
              .whereNotNull("nilai");
          });
        });
      })
      .where({ id: m_rombel_id })
      .fetch();

    // // const rekap = await Promise.all(
    // //   materirombel.toJSON().map(async (d) => {
    // const rekap = await MRekap.query()
    //   .with("rekaprombel", (builder) => {
    //     builder
    //       .with("rekapnilai", (builder) => {
    //         builder.with("user", (builder) => {
    //           builder.select("id", "nama");
    //         });
    //       })
    //       .withCount("rekapnilai as total", (builder) => {
    //         builder.where(
    //           "nilai",
    //           "<",
    //           `${pelajaran.toJSON().mataPelajaran.kkm}`
    //         );
    //       })
    //       .with("tugas")
    //       .where({ dihapus: 0 });
    //     // .andWhere({ m_rombel_id: rombel_id });
    //   })
    //   .with("materi", (builder) => {
    //     builder.with("mataPelajaran");
    //   })
    //   .where({ id: rekap_id })
    //   .andWhere({ dihapus: 0 })
    //   .first();
    // //   })
    // // );

    const tugas = await MTugas.query().where({ m_user_id: user.id }).fetch();

    return response.ok({
      datatugas,
      materirombel,
      // rekap,
      tugas,
      tugasdata,
    });
  }

  async postRekap({ response, request, auth, params: { materi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);
    const user = await auth.getUser();

    const { judul, teknik, tipe } = request.post();
    const rules = {
      judul: "required",
    };
    const message = {
      "judul.required": "Judul Tugas harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const rekap = await MRekap.create({
      judul,
      teknik,
      tipe,
      m_materi_id: materi_id,
      m_ta_id: ta.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  // ============ POST Rekap Tugas =================

  async postRekapRombel({
    response,
    request,
    auth,
    params: { rekapnilai_id, materi_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);
    const user = await auth.getUser();

    const {
      di_ss,
      judul,
      tanggal,
      m_tugas_id,
      m_rombel_id,
      m_rekap_id,
      tk_jadwal_ujian_id,
    } = request.post();

    let rekap;
    let tugasdata;
    if (m_tugas_id) {
      tugasdata = await MTimeline.query()
        .with("listSiswaDinilai", (builder) => {
          builder.with("user").whereNotNull("nilai");
        })
        .with("tugas")
        .where({ m_tugas_id: m_tugas_id })
        .first();

      rekap = await MRekapRombel.create({
        di_ss: 1,
        judul: tugasdata.toJSON().tugas.judul,
        tanggal: tugasdata.toJSON().tugas.tanggal_pembagian,
        m_tugas_id: m_tugas_id,
        m_rombel_id,
        m_rekap_id: rekapnilai_id,
        dihapus: 0,
      });
    } else if (tk_jadwal_ujian_id) {
      tugasdata = await TkJadwalUjian.query()
        .with("jadwalUjian", (builder) => {
          builder.with("ujian");
        })
        .where({ id: tk_jadwal_ujian_id })
        .first();

      rekap = await MRekapRombel.create({
        di_ss: 1,
        judul: tugasdata.toJSON().jadwalUjian.ujian.nama,
        tanggal: tugasdata.toJSON().jadwalUjian.waktu_dibuka,
        m_rombel_id,
        m_rekap_id: rekapnilai_id,
        dihapus: 0,
      });
    } else {
      const rules = {
        judul: "required",
        tanggal: "required",
      };
      const message = {
        "tugas.required": "Judul Tugas Harus Diisi",
        "tanggal.required": "Tanggal Tugas harus diisi",
      };
      const validation = await validate(request.all(), rules, message);
      if (validation.fails()) {
        return response.unprocessableEntity(validation.messages());
      }
      rekap = await MRekapRombel.create({
        di_ss: 0,
        judul,
        tanggal,
        m_tugas_id: null,
        m_rombel_id,
        m_rekap_id: rekapnilai_id,
        dihapus: 0,
      });
    }

    const data = await MRombel.query()
      .with("anggotaRombel", (builder) => {
        builder.where({ dihapus: 0 }).with("user", (builder) => {
          builder.select("id", "nama");
        });
      })
      .where({ id: m_rombel_id })
      .fetch();

    let all;
    if (m_tugas_id) {
      const timeline = await MTimeline.query()
        .where({ m_tugas_id: m_tugas_id })
        .andWhere({ m_rombel_id: m_rombel_id })
        .first();

      all = await Promise.all(
        data.toJSON().map(async (d) => {
          await Promise.all(
            d.anggotaRombel.map(async (e) => {
              const tktimeline = await TkTimeline.query()
                .where({ m_timeline_id: timeline.id })
                .andWhere({ m_user_id: e.m_user_id })
                .first();

              await TkRekapNilai.create({
                m_user_id: e.m_user_id,
                nilai:
                  tktimeline == null || tktimeline.nilai == null
                    ? 0
                    : tktimeline.nilai,
                m_rekap_rombel_id: `${rekap.id}`,
              });
              const check = await TkRekapNilai.query()
                .with("rekapRombel", (builder) => {
                  builder.with("rekap");
                })
                .where({ m_user_id: e.m_user_id })
                .andWhere({ m_rekap_rombel_id: rekap.id })
                .first();

              const materi = await MMateri.query()
                .where({ id: check.toJSON().rekapRombel.rekap.m_materi_id })
                .first();

              let rekapNilai = check;

              const checkData = await MUjianSiswa.query()
                .where({ m_user_id: e.m_user_id })
                .andWhere({ m_mata_pelajaran_id: materi.m_mata_pelajaran_id })
                .andWhere({ m_ta_id: ta.id })
                .first();

              const mapel = await MMataPelajaran.query()
                .with("user")
                .with("materi")
                .where({ id: materi.m_mata_pelajaran_id })
                .first();

              if (
                rekapNilai.toJSON().rekapRombel.rekap.tipe == "tugas" ||
                rekapNilai.toJSON().rekapRombel.rekap.tipe == "ujian"
              ) {
                const rekap = await TkRekapNilai.query()
                  .with("rekapRombel", (builder) => {
                    builder.with("rekap", (builder) => {
                      builder
                        .where({ tipe: "tugas" })
                        .andWhere({ m_ta_id: ta.id })
                        .andWhere({ dihapus: 0 })
                        .andWhere({ m_materi_id: materi.id });
                    });
                  })
                  .where({ m_user_id: e.m_user_id })
                  .fetch();

                const rekapUjian = await TkRekapNilai.query()
                  .with("rekapRombel", (builder) => {
                    builder.with("rekap", (builder) => {
                      builder
                        .where({ tipe: "ujian" })
                        .andWhere({ teknik: "UH" })
                        .andWhere({ m_ta_id: ta.id })
                        .andWhere({ dihapus: 0 })
                        .andWhere({ m_materi_id: materi.id });
                    });
                  })
                  .where({ m_user_id: e.m_user_id })
                  .fetch();

                const ujian = await MUjianSiswa.query()
                  .with("nilaiUAS", (builder) => {
                    builder.select("id", "nilai");
                  })
                  .with("nilaiUTS", (builder) => {
                    builder.select("id", "nilai");
                  })
                  .where({ m_user_id: e.m_user_id })
                  .andWhere({ m_mata_pelajaran_id: mapel.id })
                  .first();

                const result = await Promise.all(
                  rekap.toJSON().map(async (d) => {
                    if (d.rekapRombel.rekap == null) {
                      return;
                    }
                    return d;
                  })
                );

                const data = result.filter((d) => d != null);

                let jumlah1 = 0;

                result
                  .filter((d) => d != null)
                  .forEach((d) => {
                    jumlah1 += d.nilai;
                  });

                const rata = jumlah1 / data.length;

                const result1 = await Promise.all(
                  rekapUjian.toJSON().map(async (d) => {
                    if (d.rekapRombel.rekap == null) {
                      return;
                    }
                    return d;
                  })
                );

                const dataUjian = result1.filter((d) => d != null);

                let jumlah = 0;

                result1
                  .filter((d) => d != null)
                  .forEach((d) => {
                    jumlah += d.nilai;
                  });

                const rataUjian = jumlah / dataUjian.length;

                let nilaiAkhir;
                if (ujian) {
                  const listNilai = [
                    rataUjian,
                    rata,
                    ujian.toJSON().nilaiUAS
                      ? ujian.toJSON().nilaiUAS?.nilai
                      : null,
                    ujian.toJSON().nilaiUTS
                      ? ujian.toJSON().nilaiUTS?.nilai
                      : null,
                  ];
                  nilaiAkhir = listNilai.filter((nilai) => nilai).length
                    ? listNilai
                        .filter((nilai) => nilai)
                        .reduce((a, b) => a + b, 0) /
                      listNilai.filter((nilai) => nilai).length
                    : 0;
                  await MUjianSiswa.query().where({ id: ujian.id }).update({
                    nilai: nilaiAkhir,
                  });
                } else {
                  const listNilai = [rataUjian, rata];
                  nilaiAkhir = listNilai.filter((nilai) => nilai).length
                    ? listNilai
                        .filter((nilai) => nilai)
                        .reduce((a, b) => a + b, 0) /
                      listNilai.filter((nilai) => nilai).length
                    : 0;
                  await MUjianSiswa.create({
                    m_ta_id: ta.id,
                    m_user_id: e.m_user_id,
                    m_mata_pelajaran_id: mapel.id,
                    nilai: nilaiAkhir,
                  });
                }
              }
            })
          );
        })
      );
    } else if (tk_jadwal_ujian_id) {
      all = await Promise.all(
        data.toJSON().map(async (d) => {
          await Promise.all(
            d.anggotaRombel.map(async (e) => {
              const tkpeserta = await TkPesertaUjian.query()
                .where({ tk_jadwal_ujian_id })
                .andWhere({ m_user_id: e.m_user_id })
                .first();

              let metaHasil = {
                nilaiPg: 0,
                nilaiEsai: 0,
                nilaiTotal: 0,
                benar: 0,
              };
              let analisisBenar = {};
              let analisisTotal = {};
              if (tkpeserta) {
                const pesertaUjianData = await TkPesertaUjian.query()
                  .with("jawabanSiswa", (builder) => {
                    builder.with("soal");
                  })
                  .with("user")
                  .where({ tk_jadwal_ujian_id })
                  .andWhere({ m_user_id: e.m_user_id })
                  .first();

                await Promise.all(
                  pesertaUjianData.toJSON().jawabanSiswa.map(async (d) => {
                    if (d.soal.bentuk == "pg") {
                      if (d.jawaban_pg == d.soal.kj_pg) {
                        metaHasil.nilaiPg =
                          metaHasil.nilaiPg + d.soal.nilai_soal;
                        metaHasil.benar = metaHasil.benar + 1;
                        analisisBenar[d.soal.kd] = analisisBenar[d.soal.kd]
                          ? analisisBenar[d.soal.kd] + 1
                          : 1;
                      }
                      analisisTotal[d.soal.kd] = analisisTotal[d.soal.kd]
                        ? analisisTotal[d.soal.kd] + 1
                        : 1;
                    } else if (d.soal.bentuk == "esai") {
                      if (JSON.parse(d.jawaban_rubrik_esai)) {
                        if (JSON.parse(d.jawaban_rubrik_esai).length) {
                          JSON.parse(d.jawaban_rubrik_esai).map((e) => {
                            if (e.benar) {
                              metaHasil.nilaiEsai =
                                metaHasil.nilaiEsai + e.poin;
                            }
                          });

                          if (d.jawaban_rubrik_esai.indexOf("true") != -1) {
                            metaHasil.benar = metaHasil.benar + 1;
                          }
                        }
                      }
                    }
                  })
                );

                metaHasil.nilaiTotal = metaHasil.nilaiPg + metaHasil.nilaiEsai;
                await TkPesertaUjian.query()
                  .where({ tk_jadwal_ujian_id })
                  .andWhere({ m_user_id: e.m_user_id })
                  .update({
                    nilai_pg: metaHasil.nilaiPg,
                    nilai_esai: metaHasil.nilaiEsai,
                    nilai: metaHasil.nilaiTotal,
                  });
              }
              await TkRekapNilai.create({
                m_user_id: e.m_user_id,
                nilai:
                  tkpeserta == null || tkpeserta.nilai == null
                    ? 0
                    : tkpeserta.nilai || metaHasil.nilaiTotal,
                m_rekap_rombel_id: `${rekap.id}`,
              });

              const check = await TkRekapNilai.query()
                .with("rekapRombel", (builder) => {
                  builder.with("rekap");
                })
                .where({ m_user_id: e.m_user_id })
                .andWhere({ m_rekap_rombel_id: rekap.id })
                .first();

              const materi = await MMateri.query()
                .where({ id: check.toJSON().rekapRombel.rekap.m_materi_id })
                .first();

              let rekapNilai = check;

              const checkData = await MUjianSiswa.query()
                .where({ m_user_id: e.m_user_id })
                .andWhere({ m_mata_pelajaran_id: materi.m_mata_pelajaran_id })
                .andWhere({ m_ta_id: ta.id })
                .first();

              const mapel = await MMataPelajaran.query()
                .with("user")
                .with("materi")
                .where({ id: materi.m_mata_pelajaran_id })
                .first();

              if (
                rekapNilai.toJSON().rekapRombel.rekap.tipe == "tugas" ||
                rekapNilai.toJSON().rekapRombel.rekap.tipe == "ujian"
              ) {
                const rekap = await TkRekapNilai.query()
                  .with("rekapRombel", (builder) => {
                    builder.with("rekap", (builder) => {
                      builder
                        .where({ tipe: "tugas" })
                        .andWhere({ m_ta_id: ta.id })
                        .andWhere({ dihapus: 0 })
                        .andWhere({ m_materi_id: materi.id });
                    });
                  })
                  .where({ m_user_id: e.m_user_id })
                  .fetch();

                const rekapUjian = await TkRekapNilai.query()
                  .with("rekapRombel", (builder) => {
                    builder.with("rekap", (builder) => {
                      builder
                        .where({ tipe: "ujian" })
                        .andWhere({ m_ta_id: ta.id })
                        .andWhere({ dihapus: 0 })
                        .andWhere({ m_materi_id: materi.id });
                    });
                  })
                  .where({ m_user_id: e.m_user_id })
                  .fetch();

                const ujian = await MUjianSiswa.query()
                  .with("nilaiUAS", (builder) => {
                    builder.select("id", "nilai");
                  })
                  .with("nilaiUTS", (builder) => {
                    builder.select("id", "nilai");
                  })
                  .where({ m_user_id: e.m_user_id })
                  .andWhere({ m_mata_pelajaran_id: mapel.id })
                  .first();

                const result = await Promise.all(
                  rekap.toJSON().map(async (d) => {
                    if (d.rekapRombel.rekap == null) {
                      return;
                    }
                    return d;
                  })
                );

                const data = result.filter((d) => d != null);

                let jumlah1 = 0;

                result
                  .filter((d) => d != null)
                  .forEach((d) => {
                    jumlah1 += d.nilai;
                  });

                const rata = jumlah1 / data.length;

                const result1 = await Promise.all(
                  rekapUjian.toJSON().map(async (d) => {
                    if (d.rekapRombel.rekap == null) {
                      return;
                    }
                    return d;
                  })
                );

                const dataUjian = result1.filter((d) => d != null);

                let jumlah = 0;

                result1
                  .filter((d) => d != null)
                  .forEach((d) => {
                    jumlah += d.nilai;
                  });

                const rataUjian = jumlah / dataUjian.length;

                if (check.toJSON().rekapRombel.rekap.teknik == "UTS") {
                  if (checkData) {
                    try {
                      await MUjianSiswa.query()
                        .where({ m_user_id: e.m_user_id })
                        .andWhere({
                          m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                        })
                        .andWhere({ m_ta_id: ta.id })
                        .update({
                          uts_id: rekapNilai.id,
                        });
                    } catch (err) {
                      return;
                    }
                  } else {
                    await MUjianSiswa.create({
                      m_user_id: e.m_user_id,
                      m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                      uts_id: rekapNilai.id,
                      m_ta_id: ta.id,
                    });
                  }
                } else if (check.toJSON().rekapRombel.rekap.teknik == "UAS") {
                  if (checkData) {
                    await MUjianSiswa.query()
                      .where({ m_user_id: e.m_user_id })
                      .andWhere({
                        m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                      })
                      .update({
                        uas_id: rekapNilai.id,
                      });
                  } else {
                    await MUjianSiswa.create({
                      m_user_id: e.m_user_id,
                      m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                      uas_id: rekapNilai.id,
                      m_ta_id: ta.id,
                    });
                  }
                } else if (check.toJSON().rekapRombel.rekap.teknik == "US") {
                  if (checkData) {
                    await MUjianSiswa.query()
                      .where({ m_user_id: e.m_user_id })
                      .andWhere({
                        m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                      })
                      .update({
                        us_id: rekapNilai.id,
                      });
                  } else {
                    await MUjianSiswa.create({
                      m_user_id: e.m_user_id,
                      m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                      us_id: rekapNilai.id,
                      m_ta_id: ta.id,
                    });
                  }
                }

                let nilaiAkhir;
                if (ujian) {
                  const listNilai = [
                    rataUjian,
                    rata,
                    ujian.toJSON().nilaiUAS
                      ? ujian.toJSON().nilaiUAS?.nilai
                      : null,
                    ujian.toJSON().nilaiUTS
                      ? ujian.toJSON().nilaiUTS?.nilai
                      : null,
                  ];
                  nilaiAkhir = listNilai.filter((nilai) => nilai).length
                    ? listNilai
                        .filter((nilai) => nilai)
                        .reduce((a, b) => a + b, 0) /
                      listNilai.filter((nilai) => nilai).length
                    : 0;
                  await MUjianSiswa.query().where({ id: ujian.id }).update({
                    nilai: nilaiAkhir,
                  });
                } else {
                  const listNilai = [rataUjian, rata];
                  nilaiAkhir = listNilai.filter((nilai) => nilai).length
                    ? listNilai
                        .filter((nilai) => nilai)
                        .reduce((a, b) => a + b, 0) /
                      listNilai.filter((nilai) => nilai).length
                    : 0;
                  await MUjianSiswa.create({
                    m_ta_id: ta.id,
                    m_user_id: e.m_user_id,
                    m_mata_pelajaran_id: mapel.id,
                    nilai: nilaiAkhir,
                  });
                }
              }
            })
          );
        })
      );
    } else {
      all = await Promise.all(
        data.toJSON().map(async (d) => {
          await Promise.all(
            d.anggotaRombel.map(async (e) => {
              await TkRekapNilai.create({
                m_user_id: e.m_user_id,
                nilai: 0,
                m_rekap_rombel_id: `${rekap.id}`,
              });
              const check = await TkRekapNilai.query()
                .with("rekapRombel", (builder) => {
                  builder.with("rekap");
                })
                .where({ m_user_id: e.m_user_id })
                .andWhere({ m_rekap_rombel_id: rekap.id })
                .first();

              const materi = await MMateri.query()
                .where({ id: check.toJSON().rekapRombel.rekap.m_materi_id })
                .first();

              let rekapNilai = check;

              const checkData = await MUjianSiswa.query()
                .where({ m_user_id: e.m_user_id })
                .andWhere({ m_mata_pelajaran_id: materi.m_mata_pelajaran_id })
                .andWhere({ m_ta_id: ta.id })
                .first();

              if (check.toJSON().rekapRombel.rekap.teknik == "UTS") {
                if (checkData) {
                  try {
                    await MUjianSiswa.query()
                      .where({ m_user_id: e.m_user_id })
                      .andWhere({
                        m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                      })
                      .update({
                        uts_id: rekapNilai.id,
                      });
                  } catch (err) {
                    return;
                  }
                } else {
                  await MUjianSiswa.create({
                    m_user_id: e.m_user_id,
                    m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                    uts_id: rekapNilai.id,
                    m_ta_id: ta.id,
                  });
                }
              } else if (check.toJSON().rekapRombel.rekap.teknik == "UAS") {
                if (checkData) {
                  await MUjianSiswa.query()
                    .where({ m_user_id: e.m_user_id })
                    .andWhere({
                      m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                    })
                    .update({
                      uas_id: rekapNilai.id,
                    });
                } else {
                  await MUjianSiswa.create({
                    m_user_id: e.m_user_id,
                    m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                    uas_id: rekapNilai.id,
                    m_ta_id: ta.id,
                  });
                }
              } else if (check.toJSON().rekapRombel.rekap.teknik == "US") {
                if (checkData) {
                  await MUjianSiswa.query()
                    .where({ m_user_id: e.m_user_id })
                    .andWhere({
                      m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                    })
                    .update({
                      us_id: rekapNilai.id,
                    });
                } else {
                  await MUjianSiswa.create({
                    m_user_id: e.m_user_id,
                    m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                    us_id: rekapNilai.id,
                    m_ta_id: ta.id,
                  });
                }
              }

              const mapel = await MMataPelajaran.query()
                .with("user")
                .with("materi")
                .where({ id: materi.m_mata_pelajaran_id })
                .first();

              if (
                rekapNilai.toJSON().rekapRombel.rekap.tipe == "tugas" ||
                rekapNilai.toJSON().rekapRombel.rekap.tipe == "ujian"
              ) {
                const rekap = await TkRekapNilai.query()
                  .with("rekapRombel", (builder) => {
                    builder.with("rekap", (builder) => {
                      builder
                        .where({ tipe: "tugas" })
                        .andWhere({ m_ta_id: ta.id })
                        .andWhere({ dihapus: 0 })
                        .andWhere({ m_materi_id: materi.id });
                    });
                  })
                  .where({ m_user_id: e.m_user_id })
                  .fetch();

                const rekapUjian = await TkRekapNilai.query()
                  .with("rekapRombel", (builder) => {
                    builder.with("rekap", (builder) => {
                      builder
                        .where({ tipe: "ujian" })
                        .andWhere({ m_ta_id: ta.id })
                        .andWhere({ dihapus: 0 })
                        .andWhere({ m_materi_id: materi.id });
                    });
                  })
                  .where({ m_user_id: e.m_user_id })
                  .fetch();

                const ujian = await MUjianSiswa.query()
                  .with("nilaiUAS", (builder) => {
                    builder.select("id", "nilai");
                  })
                  .with("nilaiUTS", (builder) => {
                    builder.select("id", "nilai");
                  })
                  .where({ m_user_id: e.m_user_id })
                  .andWhere({ m_mata_pelajaran_id: mapel.id })
                  .first();

                const result = await Promise.all(
                  rekap.toJSON().map(async (d) => {
                    if (d.rekapRombel.rekap == null) {
                      return;
                    }
                    return d;
                  })
                );

                const data = result.filter((d) => d != null);

                let jumlah1 = 0;

                result
                  .filter((d) => d != null)
                  .forEach((d) => {
                    jumlah1 += d.nilai;
                  });

                const rata = jumlah1 / data.length;

                const result1 = await Promise.all(
                  rekapUjian.toJSON().map(async (d) => {
                    if (d.rekapRombel.rekap == null) {
                      return;
                    }
                    return d;
                  })
                );

                const dataUjian = result1.filter((d) => d != null);

                let jumlah = 0;

                result1
                  .filter((d) => d != null)
                  .forEach((d) => {
                    jumlah += d.nilai;
                  });

                const rataUjian = jumlah / dataUjian.length;

                let nilaiAkhir;
                if (ujian) {
                  const listNilai = [
                    rataUjian,
                    rata,
                    ujian.toJSON().nilaiUAS
                      ? ujian.toJSON().nilaiUAS?.nilai
                      : null,
                    ujian.toJSON().nilaiUTS
                      ? ujian.toJSON().nilaiUTS?.nilai
                      : null,
                  ];
                  nilaiAkhir = listNilai.filter((nilai) => nilai).length
                    ? listNilai
                        .filter((nilai) => nilai)
                        .reduce((a, b) => a + b, 0) /
                      listNilai.filter((nilai) => nilai).length
                    : 0;
                  await MUjianSiswa.query().where({ id: ujian.id }).update({
                    nilai: nilaiAkhir,
                  });
                } else {
                  const listNilai = [rataUjian, rata];
                  nilaiAkhir = listNilai.filter((nilai) => nilai).length
                    ? listNilai
                        .filter((nilai) => nilai)
                        .reduce((a, b) => a + b, 0) /
                      listNilai.filter((nilai) => nilai).length
                    : 0;
                  await MUjianSiswa.create({
                    m_ta_id: ta.id,
                    m_user_id: e.m_user_id,
                    m_mata_pelajaran_id: mapel.id,
                    nilai: nilaiAkhir,
                  });
                }
              }
            })
          );
          // }
        })
      );
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putRekap({ response, request, auth, params: { rekap_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { judul, teknik } = request.post();
    const rules = {
      judul: "required",
    };
    const message = {
      "judul.required": "Judul harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const rekap = await MRekap.query().where({ id: rekap_id }).update({
      judul,
      teknik,
      dihapus: 0,
    });

    if (!rekap) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async putRekapRombel({
    response,
    request,
    auth,
    params: { rekaprombel_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { judul, tanggal, m_tugas_id, teknik } = request.post();

    let rekap;
    if (m_tugas_id) {
      const tugasData = await MTimeline.query()
        .with("listSiswaDinilai", (builder) => {
          builder.with("user").whereNotNull("nilai");
        })
        .with("tugas")
        .where({ m_tugas_id: m_tugas_id })
        .first();

      rekap = await MRekapRombel.query().where({ id: rekaprombel_id }).update({
        di_ss: 1,
        judul: tugasData.toJSON().tugas.judul,
        tanggal,
        m_tugas_id: m_tugas_id,
        dihapus: 0,
      });
    } else if (teknik) {
      const rules = {
        judul: "required",
        tanggal: "required",
      };
      const message = {
        "judul.required": "Judul Tugas harus diisi",
        "tanggal.required": "Tanggal Tugas harus diisi",
      };
      const validation = await validate(request.all(), rules, message);
      if (validation.fails()) {
        return response.unprocessableEntity(validation.messages());
      }
      rekap = await MRekapRombel.query().where({ id: rekaprombel_id }).update({
        di_ss: 0,
        judul,
        tanggal,
        m_tugas_id: null,
        dihapus: 0,
      });
    } else if (!m_tugas_id) {
      const rules = {
        judul: "required",
        tanggal: "required",
      };
      const message = {
        "judul.required": "Judul Tugas harus diisi",
        "tanggal.required": "Tanggal Tugas harus diisi",
      };
      const validation = await validate(request.all(), rules, message);
      if (validation.fails()) {
        return response.unprocessableEntity(validation.messages());
      }
      rekap = await MRekapRombel.query().where({ id: rekaprombel_id }).update({
        di_ss: 0,
        judul,
        tanggal,
        m_tugas_id: null,
        dihapus: 0,
      });
    }

    if (!rekap) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteRekap({ response, request, auth, params: { rekap_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const rekap = await MRekap.query().where({ id: rekap_id }).update({
      dihapus: 1,
    });

    if (!rekap) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async deleteRekapRombel({
    response,
    request,
    auth,
    params: { rekaprombel_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const rekap = await MRekapRombel.query()
      .where({ id: rekaprombel_id })
      .delete();

    if (!rekap) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getRekapNilai({ response, request, auth, params: { rekaprombel_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // const user = await auth.getUser();

    const nilai = await TkRekapNilai.query()
      .select("id", "nilai")
      .where({ m_rekap_rombel_id: rekaprombel_id })
      .fetch();

    return response.ok({
      nilai,
    });
  }

  async putRekapNilai({
    response,
    request,
    auth,
    params: { user_id, rekapnilai_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();
    const ta = await this.getTAAktif(sekolah);
    const { nilai } = request.post();

    const check = await TkRekapNilai.query()
      .with("rekapRombel", (builder) => {
        builder.with("rekap");
      })
      .where({ m_user_id: user_id })
      .andWhere({ m_rekap_rombel_id: rekapnilai_id })
      .first();

    const materi = await MMateri.query()
      .where({ id: check.toJSON().rekapRombel.rekap.m_materi_id })
      .first();

    let rekapNilai;

    if (check) {
      await TkRekapNilai.query()
        .andWhere({ m_rekap_rombel_id: rekapnilai_id })
        .where({ m_user_id: user_id })
        .update({ nilai });
      rekapNilai = check;
    } else {
      rekapNilai = await TkRekapNilai.create({
        m_user_id: user_id,
        nilai,
        m_rekap_rombel_id: rekapnilai_id,
      });
    }
    const checkData = await MUjianSiswa.query()
      .where({ m_user_id: user_id })
      .andWhere({ m_mata_pelajaran_id: materi.m_mata_pelajaran_id })
      .andWhere({ m_ta_id: ta.id })
      .first();

    if (check.toJSON().rekapRombel.rekap.teknik == "UTS") {
      if (checkData) {
        await MUjianSiswa.query()
          .where({ m_user_id: user_id })
          .andWhere({ m_mata_pelajaran_id: materi.m_mata_pelajaran_id })
          .update({
            uts_id: rekapNilai.id,
          });
      } else {
        await MUjianSiswa.create({
          m_user_id: user_id,
          m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
          uts_id: rekapNilai.id,
          m_ta_id: ta.id,
        });
      }
    } else if (check.toJSON().rekapRombel.rekap.teknik == "UAS") {
      if (checkData) {
        await MUjianSiswa.query()
          .where({ m_user_id: user_id })
          .andWhere({ m_mata_pelajaran_id: materi.m_mata_pelajaran_id })
          .update({
            uas_id: rekapNilai.id,
          });
      } else {
        await MUjianSiswa.create({
          m_user_id: user_id,
          m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
          uas_id: rekapNilai.id,
          m_ta_id: ta.id,
        });
      }
    } else if (check.toJSON().rekapRombel.rekap.teknik == "US") {
      if (checkData) {
        await MUjianSiswa.query()
          .where({ m_user_id: user_id })
          .andWhere({ m_mata_pelajaran_id: materi.m_mata_pelajaran_id })
          .update({
            us_id: rekapNilai.id,
          });
      } else {
        await MUjianSiswa.create({
          m_user_id: user_id,
          m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
          us_id: rekapNilai.id,
          m_ta_id: ta.id,
        });
      }
    }

    const mapel = await MMataPelajaran.query()
      .with("user")
      .with("materi")
      .where({ id: materi.m_mata_pelajaran_id })
      .first();

    if (
      rekapNilai.toJSON().rekapRombel.rekap.tipe == "tugas" ||
      rekapNilai.toJSON().rekapRombel.rekap.tipe == "ujian"
    ) {
      const rekap = await TkRekapNilai.query()
        .with("rekapRombel", (builder) => {
          builder.with("rekap", (builder) => {
            builder
              .where({ tipe: "tugas" })
              .andWhere({ m_ta_id: ta.id })
              .andWhere({ dihapus: 0 })
              .andWhere({ m_materi_id: materi.id });
          });
        })
        .where({ m_user_id: user_id })
        .fetch();

      const rekapUjian = await TkRekapNilai.query()
        .with("rekapRombel", (builder) => {
          builder.with("rekap", (builder) => {
            builder
              .where({ tipe: "ujian" })
              .andWhere({ m_ta_id: ta.id })
              .andWhere({ dihapus: 0 })
              .andWhere({ m_materi_id: materi.id });
          });
        })
        .where({ m_user_id: user_id })
        .fetch();

      const ujian = await MUjianSiswa.query()
        .with("nilaiUAS", (builder) => {
          builder.select("id", "nilai");
        })
        .with("nilaiUTS", (builder) => {
          builder.select("id", "nilai");
        })
        .where({ m_user_id: user_id })
        .andWhere({ m_mata_pelajaran_id: mapel.id })
        .first();

      const result = await Promise.all(
        rekap.toJSON().map(async (d) => {
          if (d.rekapRombel.rekap == null) {
            return;
          }
          return d;
        })
      );

      const data = result.filter((d) => d != null);

      let jumlah1 = 0;

      result
        .filter((d) => d != null)
        .forEach((d) => {
          jumlah1 += d.nilai;
        });

      const rata = jumlah1 / data.length;

      const result1 = await Promise.all(
        rekapUjian.toJSON().map(async (d) => {
          if (d.rekapRombel.rekap == null) {
            return;
          }
          return d;
        })
      );

      const dataUjian = result1.filter((d) => d != null);

      let jumlah = 0;

      result1
        .filter((d) => d != null)
        .forEach((d) => {
          jumlah += d.nilai;
        });

      const rataUjian = jumlah / dataUjian.length;

      let nilaiAkhir;
      if (ujian) {
        const nilaiPengetahuan1 = [rataUjian, rata];

        const nilaiSebelumAkhir = nilaiPengetahuan1.filter((nilai) => nilai)
          .length
          ? 2 *
            nilaiPengetahuan1
              .filter((nilai) => nilai)
              .reduce((a, b) => a + b, 0)
          : 0;

        const nilaiUTS =
          ujian.toJSON().nilaiUTS != null
            ? ujian.toJSON().nilaiUTS?.nilai
            : null;

        const nilaiUAS =
          ujian.toJSON().nilaiUAS != null
            ? ujian.toJSON().nilaiUAS?.nilai
            : null;

        const listNilai = [nilaiSebelumAkhir, nilaiUTS, nilaiUAS];

        if (listNilai.filter((nilai) => nilai != null).length == 2) {
          nilaiAkhir = listNilai.filter((nilai) => nilai != null).length
            ? listNilai
                .filter((nilai) => nilai != null)
                .reduce((a, b) => a + b, 0) / 3
            : 0;
        } else if (listNilai.filter((nilai) => nilai != null).length == 3) {
          nilaiAkhir = listNilai.filter((nilai) => nilai != null).length
            ? listNilai
                .filter((nilai) => nilai != null)
                .reduce((a, b) => a + b, 0) / 4
            : 0;
        }
        await MUjianSiswa.query().where({ id: ujian.id }).update({
          nilai: nilaiAkhir,
        });
      } else {
        const listNilai = [rataUjian, rata];
        nilaiAkhir = listNilai.filter((nilai) => nilai != null).length
          ? listNilai
              .filter((nilai) => nilai != null)
              .reduce((a, b) => a + b, 0) /
            listNilai.filter((nilai) => nilai != null).length
          : 0;
        await MUjianSiswa.create({
          m_ta_id: ta.id,
          m_user_id: user_id,
          m_mata_pelajaran_id: mapel.id,
          nilai: nilaiAkhir,
        });
      }
    } else if (rekapNilai.toJSON().rekapRombel.rekap.tipe == "keterampilan") {
      const rekap = await TkRekapNilai.query()
        .with("rekapRombel", (builder) => {
          builder.with("rekap", (builder) => {
            builder
              .where({ tipe: "keterampilan" })
              .andWhere({ m_ta_id: ta.id })
              .andWhere({ dihapus: 0 })
              .andWhere({ m_materi_id: materi.id });
          });
        })
        .where({ m_user_id: user_id })
        .fetch();
      const result = await Promise.all(
        rekap.toJSON().map(async (d) => {
          if (d.rekapRombel.rekap == null) {
            return;
          }
          return d;
        })
      );
      const dataKeterampilan = result.filter((d) => d != null);
      let jumlah0 = 0;
      result
        .filter((d) => d != null)
        .forEach((d) => {
          jumlah0 += d.nilai;
        });

      const rataData = dataKeterampilan.length
        ? jumlah0 / dataKeterampilan.length
        : 0;

      const rekapPraktik = await TkRekapNilai.query()
        .with("rekapRombel", (builder) => {
          builder.where({ dihapus: 0 }).with("rekap", (builder) => {
            builder
              .where({ tipe: "keterampilan" })
              .andWhere({ teknik: "praktik" })
              .andWhere({ m_ta_id: ta.id })
              .andWhere({ dihapus: 0 })
              .andWhere({ m_materi_id: materi.id });
          });
        })
        .where({ m_user_id: user_id })
        .fetch();
      const result1 = await Promise.all(
        rekapPraktik.toJSON().map(async (d) => {
          if (d.rekapRombel.rekap == null) {
            return;
          }
          return d;
        })
      );
      let jumlah = 0;
      result1
        .filter((d) => d != null)
        .forEach((d) => {
          jumlah += d.nilai;
        });
      const data4 = result1.filter((d) => d != null);

      const praktik = jumlah / data4.length;

      const rekapProyek = await TkRekapNilai.query()
        .with("rekapRombel", (builder) => {
          builder.with("rekap", (builder) => {
            builder
              .where({ tipe: "keterampilan" })
              .andWhere({ teknik: "proyek" })
              .andWhere({ m_ta_id: ta.id })
              .andWhere({ dihapus: 0 })
              .andWhere({ m_materi_id: materi.id });
          });
        })
        .where({ m_user_id: user_id })
        .fetch();
      const result2 = await Promise.all(
        rekapProyek.toJSON().map(async (d) => {
          if (d.rekapRombel.rekap == null) {
            return;
          }
          return d;
        })
      );
      let jumlah1 = 0;
      result2
        .filter((d) => d != null)
        .forEach((d) => {
          jumlah1 += d.nilai;
        });
      const data1 = result2.filter((d) => d != null);
      const proyek = jumlah1 / data1.length;

      const rekapPortofolio = await TkRekapNilai.query()
        .with("rekapRombel", (builder) => {
          builder.with("rekap", (builder) => {
            builder
              .where({ tipe: "keterampilan" })
              .andWhere({ teknik: "portofolio" })
              .andWhere({ m_ta_id: ta.id })
              .andWhere({ dihapus: 0 })
              .andWhere({ m_materi_id: materi.id });
          });
        })
        .where({ m_user_id: user_id })
        .fetch();
      const result3 = await Promise.all(
        rekapPortofolio.toJSON().map(async (d) => {
          if (d.rekapRombel.rekap == null) {
            return;
          }
          return d;
        })
      );
      let jumlah2 = 0;
      result3
        .filter((d) => d != null)
        .forEach((d) => {
          jumlah2 += d.nilai;
        });
      const data2 = result3.filter((d) => d != null);
      const portofolio = jumlah2 / data2.length;

      const rekapProduk = await TkRekapNilai.query()
        .with("rekapRombel", (builder) => {
          builder.with("rekap", (builder) => {
            builder
              .where({ tipe: "keterampilan" })
              .andWhere({ teknik: "produk" })
              .andWhere({ m_ta_id: ta.id })
              .andWhere({ dihapus: 0 })
              .andWhere({ m_materi_id: materi.id });
          });
        })
        .where({ m_user_id: user_id })
        .fetch();
      const result4 = await Promise.all(
        rekapProduk.toJSON().map(async (d) => {
          if (d.rekapRombel.rekap == null) {
            return;
          }
          return d;
        })
      );
      let jumlah3 = 0;
      result4
        .filter((d) => d != null)
        .forEach((d) => {
          jumlah3 += d.nilai;
        });
      const data3 = result4.filter((d) => d != null);
      const produk = jumlah3 / data3.length;

      const nilaiAkhirKeterampilan = await MUjianSiswa.query()
        .where({ m_user_id: user_id })
        .andWhere({
          m_mata_pelajaran_id: mapel.id,
        })
        .first();

      if (nilaiAkhirKeterampilan) {
        await MUjianSiswa.query()
          .where({ id: nilaiAkhirKeterampilan.id })
          .update({
            nilai_keterampilan: rataData,
          });
      } else {
        await MUjianSiswa.create({
          m_ta_id: ta.id,
          m_user_id: user_id,
          m_mata_pelajaran_id: mapel.id,
          nilai_keterampilan: rataData,
        });
      }
    }

    if (!rekapNilai) {
      return response.ok({
        message: messagePostSuccess,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  // async postRekapNilaisiswa({
  //   response,
  //   request,
  //   auth,
  //   params: { user_id, rekap_id, materi_id },
  // }) {
  //   const domain = request.headers().origin;

  //   const sekolah = await this.getSekolahByDomain(domain);

  //   if (sekolah == "404") {
  //     return response.notFound({ message: "Sekolah belum terdaftar" });
  //   }

  //   const user = await auth.getUser();

  //   const { m_rombel_id } = request.post();

  //   const data = await TkMateriRombel.query()
  //     .with("rombel", (builder) => {
  //       builder.with("anggotaRombel", (builder) => {
  //         builder.with("user", (builder) => {
  //           builder.select("id", "nama");
  //         });
  //       });
  //     })
  //     .where({ m_materi_id: materi_id })
  //     .fetch();

  //   let rekap;

  //   const all = await Promise.all(
  //     data.map(async (d) => {
  //       await TkRekapNilai.create({
  //         m_user_id: d.anggotaRombel.user.id,
  //         nilai: 0,
  //         m_rekap_rombel_id: rekapnilai_id,
  //       });
  //       // }
  //     })
  //   );

  //   if (!rekap) {
  //     return response.ok({
  //       message: messagePostSuccess,
  //     });
  //   }

  //   return response.ok({
  //     message: messagePutSuccess,
  //   });
  // }

  // =========== IMPORT GTK SERVICE ================
  async importGTKServices(filelocation, sekolah) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar guru");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 6) {
        data.push({
          nama: explanation.getCell("B" + rowNumber).value,
          nuptk: explanation.getCell("C" + rowNumber).value,
          gender: explanation.getCell("D" + rowNumber).value,
          tempat_lahir: explanation.getCell("E" + rowNumber).value,
          tanggal_lahir: explanation.getCell("F" + rowNumber).value,
          nip: explanation.getCell("G" + rowNumber).value,
          status_kepegawaian: explanation.getCell("H" + rowNumber).value,
          jenis_ptk: explanation.getCell("I" + rowNumber).value,
          agama: explanation.getCell("J" + rowNumber).value,
          alamat: explanation.getCell("K" + rowNumber).value,
          rt: explanation.getCell("L" + rowNumber).value,
          rw: explanation.getCell("M" + rowNumber).value,
          dusun: explanation.getCell("N" + rowNumber).value,
          kelurahan: explanation.getCell("O" + rowNumber).value,
          kecamatan: explanation.getCell("P" + rowNumber).value,
          kode_pos: explanation.getCell("Q" + rowNumber).value,
          whatsapp: explanation.getCell("R" + rowNumber).value,
          email:
            explanation.getCell("S" + rowNumber).value == null
              ? ""
              : typeof explanation.getCell("S" + rowNumber).value == "object"
              ? JSON.parse(explanation.getCell("S" + rowNumber).value).text
              : explanation.getCell("S" + rowNumber).value,
          tugas_tambahan: explanation.getCell("T" + rowNumber).value,
        });
      }
    });

    let dataUpdated;
    let dataCreated;

    const result = await Promise.all(
      data.map(async (d) => {
        const checkUser = await User.query()
          .where({ whatsapp: d.whatsapp })
          .andWhere({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .first();

        let payload = {
          nuptk: d.nuptk,
          nip: d.nip,
          status_kepegawaian: d.status_kepegawaian,
          jenis_ptk: d.jenis_ptk,
          agama: d.agama,
          alamat: d.alamat,
          rt: d.rt,
          rw: d.rw,
          dusun: d.dusun,
          kodepos: d.kode_pos,
          tugas_tambahan: d.tugas_tambahan,
        };

        let kecamatan1;
        let kecamatan2;
        let kecamatans;

        if (d.kecamatan != null || d.kecamatan != "-") {
          kecamatan1 = `${d.kecamatan.split(" ")[1]}`;
          kecamatan2 = d ? d.kecamatan.split(" ")[2] : "";
          kecamatans = kecamatan1.concat(" ", kecamatan2 ? kecamatan2 : "");
        }

        let districtIds;

        if (kecamatans) {
          districtIds = await District.query()
            .with("regency")
            .where({ name: kecamatans })
            .first();
        }

        let villageIds;

        if (districtIds) {
          payload = {
            ...payload,
            village_id: villageIds ? villageIds.id : "",
            district_id: districtIds.id,
            regency_id: districtIds.regency_id,
            province_id: districtIds.toJSON().regency.province_id,
          };

          villageIds = await Village.query()
            .where({ name: d.kelurahan })
            .andWhere({ district_id: districtIds.id })
            .first();

          if (villageIds) {
            payload = {
              ...payload,
              village_id: villageIds ? villageIds.id : "",
            };
          }
        }

        if (checkUser) {
          await User.query().where({ id: checkUser.id }).update({ dihapus: 0 });
          const checkProfil = await MProfilUser.query()
            .select("id")
            .where({ m_user_id: checkUser.id })
            .first();

          if (checkProfil) {
            await MProfilUser.query()
              .where({ id: checkProfil.id })
              .update(payload);
          } else {
            await MProfilUser.create(payload);
          }

          return dataUpdated++;
        }

        const tgl_lahir = moment(d.tanggal_lahir).format("YYYY-MM-DD");
        let tgl;

        if (tgl_lahir == "Invalid date") {
          tgl = null;
        } else {
          tgl = tgl_lahir;
        }

        await User.create({
          nama: d.nama,
          whatsapp: d.whatsapp,
          gender: d.gender,
          password: `smartschool`,
          role: "guru",
          m_sekolah_id: sekolah.id,
          dihapus: 0,
          tempat_lahir: d.tempat_lahir,
          tanggal_lahir: tgl,
        });
        await MProfilUser.create(payload);

        // await WhatsAppService.sendMessage(
        //   d.whatsapp,
        //   `Halo, berikut akun Smarteschool bapak/ibu ${d.nama} dengan password *smartschool*. Berikut link akses Smarteschool bapak/ibu: \n ${domain} \n\nInformasi ini bersifat *RAHASIA*`
        // );

        return dataCreated++;
      })
    );

    return { dataCreated, dataUpdated };
  }

  async importGTK({ request, response }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importGTKServices(`tmp/uploads/${fname}`, sekolah);
  }

  //import GTK SINGKAT

  async importGTK2Services(filelocation, sekolah) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar guru");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 6) {
        data.push({
          nama: explanation.getCell("B" + rowNumber).value,
          gender: explanation.getCell("C" + rowNumber).value,
          whatsapp: explanation.getCell("D" + rowNumber).value,
          email: explanation.getCell("E" + rowNumber).value,
          // == null
          // ? ""
          // : typeof explanation.getCell("E" + rowNumber).value == "object"
          // ? JSON.parse(explanation.getCell("E" + rowNumber).value).text
          // : explanation.getCell("E" + rowNumber).value

          // try {
          // } catch (error) {
          //   console.log(error);
          // },

          password: explanation.getCell("F" + rowNumber).value,
        });
      }
    });

    let dataUpdated;
    let dataCreated;

    const result = await Promise.all(
      data.map(async (d) => {
        const checkUser = await User.query()
          .where({ whatsapp: d.whatsapp })
          .andWhere({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .first();

        if (checkUser) {
          await User.query()
            .where({ id: checkUser.id })
            .update({
              dihapus: 0,
              password: await Hash.make(d.password + "" || "smarteschool"),
            });

          return dataUpdated++;
        }

        await User.create({
          nama: d.nama,
          whatsapp: d.whatsapp,
          gender: d.gender,
          password: d.password + "" || "smarteschool",
          role: "guru",
          m_sekolah_id: sekolah.id,
          dihapus: 0,
        });

        // await WhatsAppService.sendMessage(
        //   d.whatsapp,
        //   `Halo, berikut akun Smarteschool bapak/ibu ${d.nama} dengan password *${d.password || "smarteschool"}*. Berikut link akses Smarteschool bapak/ibu: \n ${domain} \n\nInformasi ini bersifat *RAHASIA*`
        // );

        return dataCreated++;
      })
    );

    return { dataCreated, dataUpdated };
  }

  async importGTK2({ request, response }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importGTK2Services(`tmp/uploads/${fname}`, sekolah);
  }

  async downloadRekapAbsen({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }
    const user = await auth.getUser();
    const { role, tanggal_awal, tanggal_akhir } = request.post();
    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const tanggalDistinct = await Database.raw(
      "SELECT DISTINCT DATE_FORMAT(created_at, '%Y-%m-%d') as tanggalDistinct from m_absen WHERE created_at BETWEEN ? AND  ?",
      [tanggal_awal, tanggal_akhir]
    );

    const absenKepsek = await User.query()
      .select("id", "nama")
      .with("absen", (builder) => {
        builder
          .select("id", "m_user_id", "created_at", "absen")
          .whereBetween("created_at", [`${tanggal_awal}`, `${tanggal_akhir}`]);
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ role: "kepsek" })
      .fetch();

    const absenGuru = await User.query()
      .select("id", "nama")
      .with("absen", (builder) => {
        builder
          .select("id", "m_user_id", "created_at", "absen")
          .whereBetween("created_at", [`${tanggal_awal}`, `${tanggal_akhir}`]);
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ role: "guru" })
      .fetch();

    // loop pertama untuk nge looping data kepsek
    const rekapAbsenKepsek = await Promise.all(
      absenKepsek.toJSON().map(async (d) => {
        let namaKepsek = d.nama;
        let totalSakit = 0;
        let totalHadir = 0;
        let totalTelat = 0;
        let totalIzin = 0;
        let totalAlpa = 0;

        // loop ketiga untuk nge looping absen kepsek
        await Promise.all(
          d.absen.map(async (e) => {
            if (e.absen == "sakit") {
              totalSakit = totalSakit + 1;
            } else if (e.absen == "izin") {
              totalIzin = totalIzin + 1;
            } else if (
              (await Promise.all(
                tanggalDistinct.find(async (tanggal) => {
                  tanggal.tanggalDistinct ==
                    moment(e.created_at).format("YYYY-MM-DD");
                })
              )) !== undefined
            ) {
              totalHadir = totalHadir + 1;

              if (moment(e.created_at).format("HH:mm:ss") > "06.30") {
                totalTelat = totalTelat + 1;
              }
            }
          })
        );

        totalAlpa =
          tanggalDistinct[0].length - (totalSakit + totalHadir + totalIzin);

        return {
          namaKepsek,
          totalSakit,
          totalHadir,
          totalTelat,
          totalIzin,
          totalAlpa,
        };
      })
    );

    // loop pertama untuk nge looping data guru
    const rekapAbsenGuru = await Promise.all(
      absenGuru.toJSON().map(async (d) => {
        let namaGuru = d.nama;
        let totalSakit = 0;
        let totalHadir = 0;
        let totalTelat = 0;
        let totalIzin = 0;
        let totalAlpa = 0;

        // loop ketiga untuk nge looping absen guru
        await Promise.all(
          d.absen.map(async (e) => {
            if (e.absen == "sakit") {
              totalSakit = totalSakit + 1;
            } else if (e.absen == "izin") {
              totalIzin = totalIzin + 1;
            } else if (
              (await Promise.all(
                tanggalDistinct.find(async (tanggal) => {
                  tanggal.tanggalDistinct ==
                    moment(e.created_at).format("YYYY-MM-DD");
                })
              )) !== undefined
            ) {
              totalHadir = totalHadir + 1;

              if (moment(e.created_at).format("HH:mm:ss") > "06.30") {
                totalTelat = totalTelat + 1;
              }
            }
          })
        );

        totalAlpa =
          tanggalDistinct[0].length - (totalSakit + totalHadir + totalIzin);

        return {
          namaGuru,
          totalSakit,
          totalHadir,
          totalTelat,
          totalIzin,
          totalAlpa,
        };
      })
    );

    // return rekapAbsenGuru;

    let workbook = new Excel.Workbook();

    let worksheet = workbook.addWorksheet(`RekapAbsen`);
    const awal = moment(`${tanggal_awal}`).format("DD-MM-YYYY");
    const akhir = moment(`${tanggal_akhir}`).format("DD-MM-YYYY");
    worksheet.getCell(
      "A4"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.addConditionalFormatting({
      ref: `A1:G2`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
          },
        },
      ],
    });
    worksheet.addConditionalFormatting({
      ref: `A3:G3`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
          },
        },
      ],
    });
    worksheet.mergeCells(`A1:G1`);
    worksheet.mergeCells(`A2:G2`);
    worksheet.mergeCells(`A3:G3`);
    worksheet.addConditionalFormatting({
      ref: `A8:G8`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });
    worksheet.addConditionalFormatting({
      ref: `A5:G5`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "left",
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });
    await Promise.all(
      rekapAbsenKepsek.map(async (d, idx) => {
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 5}:G${(idx + 1) * 1 + 5}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 5}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.getRow(5).values = [
          "No",
          "Nama",
          "Hadir",
          "telat",
          "Sakit",
          "Izin",
          "Alpa",
        ];

        worksheet.columns = [
          { key: "no" },
          { key: "user" },
          { key: "hadir" },
          { key: "telat" },
          { key: "sakit" },
          { key: "izin" },
          { key: "alpa" },
        ];

        worksheet.getCell("A1").value = "Rekap Absen";
        worksheet.getCell("A2").value = sekolah.nama;
        worksheet.getCell("A3").value = `${awal} sampai ${akhir}`;

        let row = worksheet.addRow({
          no: `${idx + 1}`,
          user: d ? d.namaKepsek : "-",
          hadir: d ? d.totalHadir : "-",
          telat: d ? d.totalTelat : "-",
          sakit: d ? d.totalSakit : "-",
          izin: d ? d.totalIzin : "-",
          alpa: d ? d.totalAlpa : "-",
        });
      })
    );

    await Promise.all(
      rekapAbsenGuru.map(async (d, idx) => {
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 8}:G${(idx + 1) * 1 + 8}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 8}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.getRow(8).values = [
          "No",
          "Nama",
          "Hadir",
          "Telat",
          "Sakit",
          "Izin",
          "Alpa",
        ];

        worksheet.columns = [
          { key: "no" },
          { key: "user" },
          { key: "hadir" },
          { key: "telat" },
          { key: "sakit" },
          { key: "izin" },
          { key: "alpa" },
        ];

        let row = worksheet.addRow({
          no: `${idx + 1}`,
          user: d ? d.namaGuru : "-",
          hadir: d ? d.totalHadir : "-",
          telat: d ? d.totalTelat : "-",
          sakit: d ? d.totalSakit : "-",
          izin: d ? d.totalIzin : "-",
          alpa: d ? d.totalAlpa : "-",
        });
      })
    );

    let namaFile = `/uploads/rekap-absen-guru-tanggal ${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  // =========== IMPORT GTK SERVICE ================
  async importMapelServices(filelocation, sekolah, ta) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar Mapel");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 3) {
        data.push({
          namaGuru: explanation.getCell("B" + rowNumber).value,
          whatsapp: explanation.getCell("C" + rowNumber).value,
          // email:
          //   explanation.getCell("D" + rowNumber).value == null
          //     ? ""
          //     : typeof explanation.getCell("D" + rowNumber).value == "object"
          //     ? JSON.parse(explanation.getCell("D" + rowNumber).value).text
          //     : explanation.getCell("D" + rowNumber).value,
          nama: explanation.getCell("E" + rowNumber).value,
          kode: explanation.getCell("F" + rowNumber).value,
          kelompok: explanation.getCell("G" + rowNumber).value,
          kkm: explanation.getCell("H" + rowNumber).value,
        });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        const user = await User.query()
          .where({ whatsapp: d.whatsapp })
          .andWhere({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .first();
        if (!user) {
          const newUser = await User.create({
            nama: d.namaGuru,
            whatsapp: d.whatsapp,
            // email: d.email ? d.email : "",
            m_sekolah_id: sekolah.id,
            password: "smartschool",
            role: "guru",
            dihapus: 0,
          });
          await MMataPelajaran.create({
            nama: d.nama,
            kode: d.kode,
            kelompok: d.kelompok,
            kkm: d.kkm,
            m_user_id: newUser.id,
            m_sekolah_id: sekolah.id,
            m_ta_id: ta.id,
            dihapus: 0,
          });
          return;
        }

        await MMataPelajaran.create({
          nama: d.nama,
          kode: d.kode,
          kelompok: d.kelompok,
          kkm: d.kkm,
          m_user_id: user.id,
          m_sekolah_id: sekolah.id,
          m_ta_id: ta.id,
          dihapus: 0,
        });

        return;
      })
    );

    return result;
  }

  async importMapel({ request, response, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importMapelServices(`tmp/uploads/${fname}`, sekolah, ta);
  }

  async downloadMapel({ response, request, auth }) {
    const domain = request.headers().origin;

    const user = await auth.getUser();

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }
    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const mapel = await MMataPelajaran.query()
      .with("user")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Rekap Mata Pelajaran`);
    worksheet.getCell("A1").value = "Rekap Mata Pelajaran";
    worksheet.getCell("A2").value = sekolah.nama;
    worksheet.getCell("A3").value = ta.tahun;
    worksheet.getCell(
      "A4"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.addConditionalFormatting({
      ref: `A1:G2`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
          },
        },
      ],
    });
    worksheet.addConditionalFormatting({
      ref: `A3:G3`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
          },
        },
      ],
    });
    worksheet.mergeCells(`A1:G1`);
    worksheet.mergeCells(`A2:G2`);
    worksheet.mergeCells(`A3:G3`);
    worksheet.addConditionalFormatting({
      ref: `A5:G5`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });
    await Promise.all(
      mapel.toJSON().map(async (d, idx) => {
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 5}:G${(idx + 1) * 1 + 5}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 5}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.getRow(5).values = [
          "No",
          "Nama Guru",
          "Whatsapp",
          "Nama",
          "Kode",
          "Kelompok",
          "KKM",
        ];

        worksheet.columns = [
          { key: "no" },
          { key: "guru" },
          { key: "whatsapp" },
          { key: "nama" },
          { key: "kode" },
          { key: "kelompok" },
          { key: "kkm" },
        ];

        let row = worksheet.addRow({
          no: `${idx + 1}`,
          guru: d.user ? d.user.nama : "-",
          whatsapp: d.user ? d.user.whatsapp : "-",
          nama: d ? d.nama : "-",
          kode: d ? d.kode : "-",
          kelompok: d ? d.kelompok : "-",
          kkm: d ? d.kkm : "-",
        });
      })
    );

    let namaFile = `/uploads/rekap-mata-pelajaran-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async importMutasiServices(filelocation, sekolah, ta) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar Mutasi");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 6) {
        data.push({
          tanggal: explanation.getCell("B" + rowNumber).value,
          nama: explanation.getCell("D" + rowNumber).value,
          kategori: explanation.getCell("E" + rowNumber).value,
          nominal: explanation.getCell("F" + rowNumber).value,
          tipe: explanation.getCell("C" + rowNumber).value,
        });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        await MMutasi.create({
          nama: d.nama,
          waktu_dibuat: d.tanggal,
          kategori: d.kategori,
          nominal: d.nominal,
          m_sekolah_id: sekolah.id,
          tipe: d.tipe,
          dihapus: 0,
        });

        return;
      })
    );

    return result;
  }

  async importMutasi({ request, response, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importMutasiServices(`tmp/uploads/${fname}`, sekolah);
  }

  async downloadMutasi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const user = await auth.getUser();
    const { tanggal_awal, tanggal_akhir } = request.post();
    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const mutasi = await MMutasi.query()
      .whereBetween("waktu_dibuat", [
        `${tanggal_awal} 00:00:00`,
        `${tanggal_akhir} 23:59:59`,
      ])
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const tanggalDistinct = await Database.raw(
      "SELECT DISTINCT DATE_FORMAT(waktu_dibuat, '%Y-%m-%d') from m_mutasi"
    );

    let workbook = new Excel.Workbook();

    let worksheet = workbook.addWorksheet(`Rekap Mutasi Keuangan`);
    worksheet.getCell(
      "A4"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.addConditionalFormatting({
      ref: `A1:E2`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
          },
        },
      ],
    });
    worksheet.addConditionalFormatting({
      ref: `A3:E3`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
          },
        },
      ],
    });
    worksheet.mergeCells(`A1:E1`);
    worksheet.mergeCells(`A2:E2`);
    worksheet.mergeCells(`A3:E3`);
    worksheet.addConditionalFormatting({
      ref: `A5:E5`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });
    await Promise.all(
      mutasi.toJSON().map(async (d, idx) => {
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 5}:E${(idx + 1) * 1 + 5}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 5}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.getRow(5).values = [
          "Tanggal Transaksi",
          "Tipe",
          "Nama",
          "Kategori",
          "Nominal",
        ];

        worksheet.columns = [
          { key: "waktu_dibuat" },
          { key: "tipe" },
          { key: "nama" },
          { key: "kategori" },
          { key: "nominal" },
        ];

        worksheet.getCell("A1").value = "Rekap Mutasi Keuangan";
        const awal = moment(`${tanggal_awal}`).format("DD-MM-YYYY");
        const akhir = moment(`${tanggal_akhir}`).format("DD-MM-YYYY");
        worksheet.getCell("A2").value = sekolah.nama;
        worksheet.getCell("A3").value = `${awal} sampai ${akhir}`;

        let row = worksheet.addRow({
          waktu_dibuat: d ? d.waktu_dibuat : "-",
          tipe: d ? d.tipe : "-",
          nama: d ? d.nama : "-",
          kategori: d ? d.kategori : "-",
          nominal: d ? d.nominal : "-",
        });
      })
    );

    let namaFile = `/uploads/rekap-keuangan-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }
  async downloadRekMutasi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const user = await auth.getUser();
    const { dari_tanggal, sampai_tanggal, kategori, tipe_akun, search, tipe } =
      request.post();
    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const rekQuery = MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .where({ dihapus: 0 });

    if (tipe_akun) {
      rekQuery.where({ id: tipe_akun });
    }

    const rekSekolah = await rekQuery.fetch();

    let workbook = new Excel.Workbook();

    await Promise.all(
      rekSekolah.toJSON().map(async (r) => {
        const query = MMutasi.query()
          .where({ m_sekolah_id: sekolah.id })
          .where({ dihapus: 0 })
          .where({ m_rek_sekolah_id: r.id });

        if (dari_tanggal && sampai_tanggal) {
          query.whereBetween("waktu_dibuat", [
            `${dari_tanggal} 00:00:00`,
            `${sampai_tanggal} 23:59:59`,
          ]);
        }
        if (tipe) {
          query.where({ tipe: tipe });
        }
        if (kategori) {
          query.where({ kategori: kategori });
        }
        if (search) {
          query.andWhere("nama", "like", `%${search}%`);
        }

        const mutasi = await query.orderBy("created_at", "desc").fetch();

        const tanggalDistinct = await Database.raw(
          "SELECT DISTINCT DATE_FORMAT(waktu_dibuat, '%Y-%m-%d') from m_mutasi"
        );

        let worksheet = workbook.addWorksheet(
          `Rekap ${r.jenis} Mutasi Keuangan`
        );
        worksheet.getCell(
          "A4"
        ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
        worksheet.addConditionalFormatting({
          ref: `A1:E2`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 16,
                  bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `A3:E3`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 12,
                  bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
              },
            },
          ],
        });
        worksheet.mergeCells(`A1:E1`);
        worksheet.mergeCells(`A2:E2`);
        worksheet.mergeCells(`A3:E3`);
        worksheet.addConditionalFormatting({
          ref: `A5:E5`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 12,
                  bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                fill: {
                  type: "pattern",
                  pattern: "solid",
                  bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        await Promise.all(
          mutasi.toJSON().map(async (d, idx) => {
            worksheet.addConditionalFormatting({
              ref: `B${(idx + 1) * 1 + 5}:E${(idx + 1) * 1 + 5}`,
              rules: [
                {
                  type: "expression",
                  formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                  style: {
                    font: {
                      name: "Times New Roman",
                      family: 4,
                      size: 11,
                      // bold: true,
                    },
                    alignment: {
                      vertical: "middle",
                      horizontal: "left",
                    },
                    border: {
                      top: { style: "thin" },
                      left: { style: "thin" },
                      bottom: { style: "thin" },
                      right: { style: "thin" },
                    },
                  },
                },
              ],
            });
            worksheet.addConditionalFormatting({
              ref: `A${(idx + 1) * 1 + 5}`,
              rules: [
                {
                  type: "expression",
                  formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                  style: {
                    font: {
                      name: "Times New Roman",
                      family: 4,
                      size: 11,
                      // bold: true,
                    },
                    alignment: {
                      vertical: "middle",
                      horizontal: "center",
                    },
                    border: {
                      top: { style: "thin" },
                      left: { style: "thin" },
                      bottom: { style: "thin" },
                      right: { style: "thin" },
                    },
                  },
                },
              ],
            });
            worksheet.getRow(5).values = [
              "Tanggal Transaksi",
              "Tipe",
              "Nama",
              "Kategori",
              "Nominal",
            ];

            worksheet.columns = [
              { key: "waktu_dibuat" },
              { key: "tipe" },
              { key: "nama" },
              { key: "kategori" },
              { key: "nominal" },
            ];

            worksheet.getCell("A1").value = "Rekap Mutasi Keuangan";
            const awal = moment(`${dari_tanggal}`).format("DD-MM-YYYY");
            const akhir = moment(`${sampai_tanggal}`).format("DD-MM-YYYY");
            worksheet.getCell("A2").value = sekolah.nama;
            worksheet.getCell("A3").value = `${awal} sampai ${akhir}`;

            let row = worksheet.addRow({
              waktu_dibuat: d ? d.waktu_dibuat : "-",
              tipe: d ? d.tipe : "-",
              nama: d ? d.nama : "-",
              kategori: d ? d.kategori : "-",
              nominal: d ? d.nominal : "-",
            });
          })
        );
      })
    );

    let namaFile = `/uploads/rekap-rekening-mutasi-keuangan-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async importRombelServices(filelocation, sekolah, ta) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar Peserta Didik");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 7) {
        const rombelData = explanation.getCell("U" + rowNumber).value;
        // data.push({
        // });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        const checkRombel = await MRombel.query()
          .where({ nama: d.rombel })
          // .andWhere({ tingkat: tingkatromawi })
          .andWhere({ m_ta_id: ta.id })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        if (checkRombel) {
          return "ganda";
        } else {
          return "ok";
        }

        // else {

        //   if (!checkUser) {
        //     const createUser = await User.create({
        //       nama: d.nama,
        //       whatsapp: d.whatsapp,
        //       email: d.email ? d.email : '',
        //       gender: d.jk,
        //       password: await Hash.make(`${d.password}`),
        //       role: "siswa",
        //       tempat_lahir: d.tempatlahir,
        //       tanggal_lahir: d.tanggallahir,
        //       nip: d.nipd,
        //       nama_ayah: d.namaayah,
        //       nama_ibu: d.namaibu,
        //       m_sekolah_id: sekolah.id,
        //       agama: d.agama,
        //       dihapus: 0,
        //     });

        //     if ((districtIds, villageIds)) {
        //       await MProfilUser.create({
        //         nisn: d.nisn,
        //         asal_sekolah: d.asalsekolah,
        //         alamat: d.alamat,
        //         regency_id: districtIds.regency_id,
        //         district_id: districtIds.id,
        //         village_id: villageIds.id,
        //         kodepos: d.kodepos,
        //         bb: d.bb,
        //         tb: d.tb,
        //         disabilitas: d.kebutuhan,
        //         nama_ayah: d.namaayah,
        //         pekerjaan_ayah: d.pekerjaanayah,
        //         nama_ibu: d.namaibu,
        //         pekerjaan_ibu: d.pekerjaanibu,
        //         m_user_id: createUser.toJSON().id,
        //         nama_wali: d.namawali,
        //         pekerjaan_wali: d.pekerjaanwali,
        //       });
        //       return;
        //     }
        //     await MProfilUser.create({
        //       nisn: d.nisn,
        //       asal_sekolah: d.asalsekolah,
        //       alamat: d.alamat,
        //       kodepos: d.kodepos,
        //       bb: d.bb,
        //       tb: d.tb,
        //       disabilitas: d.kebutuhan,
        //       nama_ayah: d.namaayah,
        //       pekerjaan_ayah: d.pekerjaanayah,
        //       nama_ibu: d.namaibu,
        //       pekerjaan_ibu: d.pekerjaanibu,
        //       m_user_id: createUser.toJSON().id,
        //       nama_wali: d.namawali,
        //       pekerjaan_wali: d.pekerjaanwali,
        //     });
        //     if (createRombel) {
        //       await MAnggotaRombel.create({
        //         role: "anggota",
        //         dihapus: 0,
        //         m_user_id: createUser.toJSON().id,
        //         m_rombel_id: createRombel.toJSON().id,
        //       });
        //       return;
        //     }
        //     await MAnggotaRombel.create({
        //       role: "anggota",
        //       dihapus: 0,
        //       m_user_id: createUser.toJSON().id,
        //       m_rombel_id: checkRombel.id,
        //     });
        //     return;
        //   }

        //   if (createRombel) {
        //     const checkAnggotaRombel = await MAnggotaRombel.query()
        //       .where({ dihapus: 0 })
        //       .andWhere({ m_user_id: checkUser.id })
        //       .andWhere({ m_rombel_id: createRombel.id })
        //       .first();

        //     if (checkAnggotaRombel) {
        //       return {
        //         message: `${d.nama} sudah terdaftar`,
        //         error: true,
        //       };
        //     }

        //     await MAnggotaRombel.create({
        //       role: "anggota",
        //       dihapus: 0,
        //       m_user_id: checkUser.id,
        //       m_rombel_id: createRombel.id,
        //     });
        //     return;
        //   }
        //   const checkAnggotaRombel = await MAnggotaRombel.query()
        //     .where({ dihapus: 0 })
        //     .andWhere({ m_user_id: checkUser.id })
        //     .andWhere({ m_rombel_id: checkRombel.id })
        //     .first();

        //   if (checkAnggotaRombel) {
        //     return {
        //       message: `${d.nama} sudah terdaftar`,
        //       error: true,
        //     };
        //   }

        //   await MAnggotaRombel.create({
        //     role: "anggota",
        //     dihapus: 0,
        //     m_user_id: checkUser.id,
        //     m_rombel_id: checkRombel.id,
        //   });
        //   return;
        // }
      })
    );

    return result;
  }

  async importRombelServices2(filelocation, sekolah, ta) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar Peserta Didik");

    let colComment = explanation.getColumn("A");
    let colCommentRombel = explanation.getColumn("E");

    let dataRombel = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 9) {
        let kode = explanation.getCell("B" + rowNumber).value;
        let nama = explanation.getCell("C" + rowNumber).value;

        if (kode == null || nama == null) {
          return;
        }
        const checkJurusan = await MJurusan.query()
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ kode: kode })
          .andWhere({ dihapus: 0 })
          .first();

        if (!checkJurusan) {
          await MJurusan.create({
            nama: nama,
            kode: kode,
            spp: 0,
            sumbangan_sarana_pendidikan: 0,
            kegiatan_osis: 0,
            mpls_jas_almamater: 0,
            seragam_sekolah: 0,
            toolkit_praktek: 0,
            m_sekolah_id: sekolah.id,
            dihapus: 0,
          });
        }
      }
    });

    colCommentRombel.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 9) {
        let rombelall = explanation.getCell("F" + rowNumber).value;
        let tingkat = `${romawi[rombelall.split(" ")[0] - 1]}`;
        let jurusanKode = `${rombelall.split(" ")[1]}`;
        let nama = explanation.getCell("G" + rowNumber).value;
        let walas = explanation.getCell("H" + rowNumber).value;
        let gender = explanation.getCell("I" + rowNumber).value;

        const checkUser = await User.query()
          .where({ whatsapp: walas })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        if (!checkUser) {
          const createUser = await User.create({
            nama: nama,
            whatsapp: walas,
            gender: gender,
            // email: d.email ? d.email : "",
            password: "smartschool",
            role: "guru",
            m_sekolah_id: sekolah.id,
            dihapus: 0,
          });
        }
        const userWalas = await User.query()
          .where({ whatsapp: walas })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();
        // dataRombel.push({
        //   rombelall: explanation.getCell("B" + rowNumber).value,
        //   tingkat: `${rombelall.split(" ")[0]}`,
        // });
        let rombelData = `${romawi[rombelall.split(" ")[0] - 1]} ${
          rombelall.split(" ")[1]
        } ${rombelall.split(" ")[2]}`;

        const rombelCheck = await MRombel.query()
          .where({ nama: rombelData })
          .andWhere({ m_ta_id: ta.id })
          .andWhere({ m_sekolah_id: sekolah.id })
          .andWhere({ m_user_id: userWalas.id })
          .first();

        if (!rombelCheck) {
          const jurusan = await MJurusan.query()
            .select("id", "kode", "m_sekolah_id", "dihapus")
            .where({ kode: jurusanKode })
            .andWhere({ dihapus: 0 })
            .andWhere({ m_sekolah_id: sekolah.id })
            .first();

          const rombel = await MRombel.create({
            tingkat: tingkat,
            nama: rombelData,
            m_jurusan_id: jurusan.id,
            m_sekolah_id: sekolah.id,
            m_ta_id: ta.id,
            kelompok: "reguler",
            m_user_id: userWalas.id,
            dihapus: 0,
          });

          const jamMengajar = await MJamMengajar.query()
            .select("id")
            .where({ m_sekolah_id: sekolah.id })
            .andWhere({ m_ta_id: ta.id })
            .fetch();

          const jadwalMengajarData = await Promise.all(
            jamMengajar.toJSON().map(async (data) => {
              data.m_mata_pelajaran_id = null;
              data.m_rombel_id = rombel.id;
              data.m_jam_mengajar_id = data.id;
              data.m_sekolah_id = sekolah.id;
              data.m_ta_id = ta.id;
              delete data.id;
              delete data.jamFormat;

              return data;
            })
          );

          await MJadwalMengajar.createMany(jadwalMengajarData);
        }
      }
    });

    const rombelResult = await Promise.all(
      dataRombel.map(async (d) => {
        const rombelCheck = await MRombel.query()
          .where({ nama: d.rombel })
          .andWhere({ m_ta_id: ta.id })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        if (!rombelCheck) {
          const createRombel = await MRombel.create({
            tingkat: d.tingkat,
            nama: d.rombelall,
            kelompok: "reguler",
            m_sekolah_id: sekolah.id,
            m_ta_id: ta.id,
            dihapus: 0,
          });
          return;
        }
      })
    );

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 9) {
        const rombelsiswa = explanation.getCell("AE" + rowNumber).value;
        data.push({
          nama: explanation.getCell("L" + rowNumber).value,
          nipd: explanation.getCell("M" + rowNumber).value,
          jk: explanation.getCell("N" + rowNumber).value,
          nisn: explanation.getCell("O" + rowNumber).value,
          tempatlahir: explanation.getCell("P" + rowNumber).value,
          tanggallahir: explanation.getCell("Q" + rowNumber).value,
          agama: explanation.getCell("R" + rowNumber).value,
          alamat: explanation.getCell("S" + rowNumber).value,
          kelurahan: explanation.getCell("T" + rowNumber).value,
          kecamatan: explanation.getCell("U" + rowNumber).value,
          kodepos: explanation.getCell("V" + rowNumber).value,
          whatsapp: explanation.getCell("W" + rowNumber).value,
          email:
            explanation.getCell("X" + rowNumber).value == null
              ? ""
              : typeof explanation.getCell("X" + rowNumber).value == "object"
              ? JSON.parse(explanation.getCell("X" + rowNumber).value).text
              : explanation.getCell("X" + rowNumber).value,
          namaayah: explanation.getCell("Y" + rowNumber).value,
          pekerjaanayah: explanation.getCell("Z" + rowNumber).value,
          namaibu: explanation.getCell("AA" + rowNumber).value,
          pekerjaanibu: explanation.getCell("AB" + rowNumber).value,
          namawali: explanation.getCell("AC" + rowNumber).value,
          pekerjaanwali: explanation.getCell("AD" + rowNumber).value,
          rombel: `${romawi[rombelsiswa.split(" ")[0] - 1]} ${
            rombelsiswa.split(" ")[1]
          } ${rombelsiswa.split(" ")[2]}`,
          kebutuhan: explanation.getCell("AF" + rowNumber).value,
          asalsekolah: explanation.getCell("AG" + rowNumber).value,
          bb: explanation.getCell("AH" + rowNumber).value,
          tb: explanation.getCell("AI" + rowNumber).value,
        });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        const checkUser = await User.query()
          .where({ whatsapp: d.whatsapp })
          .first();

        let kecamatan1 = `${d.kecamatan.split(" ")[1]}`;
        let kecamatan2 = d ? d.kecamatan.split(" ")[2] : "";
        let kecamatans = kecamatan1.concat(" ", kecamatan2 ? kecamatan2 : "");

        const districtIds = await District.query()
          .where({ name: kecamatans })
          .first();

        const villageIds = await Village.query()
          .where({ name: d.kelurahan })
          .first();

        const checkRombel = await MRombel.query()
          .where({ nama: d.rombel })
          .andWhere({ m_ta_id: ta.id })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        if (checkRombel == null) {
          return;
        }

        const tgllahir = moment(d.tanggallahir).format(`YYYY-MM-DD`);
        // return d.rombel;

        if (!checkUser) {
          const createUser = await User.create({
            nama: d.nama,
            whatsapp: d.whatsapp,
            // email: d.email ? d.email : "",
            gender: d.jk,
            password: "smartschool",
            role: "siswa",
            tempat_lahir: d.tempatlahir,
            tanggal_lahir: tgllahir,
            nip: d.nipd,
            nama_ayah: d.namaayah,
            nama_ibu: d.namaibu,
            m_sekolah_id: sekolah.id,
            agama: d.agama,
            dihapus: 0,
          });

          if ((districtIds, villageIds)) {
            await MProfilUser.create({
              nisn: d.nisn,
              asal_sekolah: d.asalsekolah,
              alamat: d.alamat,
              regency_id: districtIds.regency_id,
              district_id: districtIds.id,
              village_id: villageIds.id,
              kodepos: d.kodepos,
              bb: d.bb,
              tb: d.tb,
              disabilitas: d.kebutuhan,
              nama_ayah: d.namaayah,
              pekerjaan_ayah: d.pekerjaanayah,
              nama_ibu: d.namaibu,
              pekerjaan_ibu: d.pekerjaanibu,
              m_user_id: createUser.toJSON().id,
              nama_wali: d.namawali,
              pekerjaan_wali: d.pekerjaanwali,
            });
            return;
          }
          await MProfilUser.create({
            nisn: d.nisn,
            asal_sekolah: d.asalsekolah,
            alamat: d.alamat,
            kodepos: d.kodepos,
            bb: d.bb,
            tb: d.tb,
            disabilitas: d.kebutuhan,
            nama_ayah: d.namaayah,
            pekerjaan_ayah: d.pekerjaanayah,
            nama_ibu: d.namaibu,
            pekerjaan_ibu: d.pekerjaanibu,
            m_user_id: createUser.toJSON().id,
            nama_wali: d.namawali,
            pekerjaan_wali: d.pekerjaanwali,
          });
          await MAnggotaRombel.create({
            role: "anggota",
            dihapus: 0,
            m_user_id: createUser.toJSON().id,
            m_rombel_id: checkRombel.id,
          });
          return;
        }

        const checkAnggotaRombel = await MAnggotaRombel.query()
          .where({ dihapus: 0 })
          .andWhere({ m_user_id: checkUser.toJSON().id })
          .andWhere({ m_rombel_id: checkRombel.id })
          .first();

        if (checkAnggotaRombel) {
          return {
            message: `${d.nama} sudah terdaftar`,
            error: true,
          };
        }

        await MAnggotaRombel.create({
          role: "anggota",
          dihapus: 0,
          m_user_id: checkUser.id,
          m_rombel_id: checkRombel.id,
        });
        return;
      })
    );

    return result;
  }

  async importRombel({ request, response, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importRombelServices2(
      `tmp/uploads/${fname}`,
      sekolah,
      ta
    );
  }

  async importRombel2Services(filelocation, sekolah, ta) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar Peserta Didik");

    let colComment = explanation.getColumn("A");
    let colCommentRombel = explanation.getColumn("E");

    let dataRombel = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 9) {
        let kode = explanation.getCell("B" + rowNumber).value;
        let nama = explanation.getCell("C" + rowNumber).value;

        if (kode == null || nama == null) {
          return;
        }
        const checkJurusan = await MJurusan.query()
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ kode: kode })
          .andWhere({ dihapus: 0 })
          .first();

        if (!checkJurusan) {
          await MJurusan.create({
            nama: nama,
            kode: kode,
            spp: 0,
            sumbangan_sarana_pendidikan: 0,
            kegiatan_osis: 0,
            mpls_jas_almamater: 0,
            seragam_sekolah: 0,
            toolkit_praktek: 0,
            m_sekolah_id: sekolah.id,
            dihapus: 0,
          });
        }
      }
    });

    colCommentRombel.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 9) {
        let rombelall = explanation.getCell("F" + rowNumber).value;
        let tingkat = `${romawi[rombelall.split(" ")[0] - 1]}`;
        let jurusanKode = `${rombelall.split(" ")[1]}`;
        let nama = explanation.getCell("G" + rowNumber).value;
        let walas = explanation.getCell("H" + rowNumber).value;
        let gender = explanation.getCell("I" + rowNumber).value;

        const checkUser = await User.query()
          .where({ whatsapp: walas })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        if (!checkUser) {
          const createUser = await User.create({
            nama: nama,
            whatsapp: walas,
            gender: gender,
            // email: d.email ? d.email : "",
            password: "smartschool",
            role: "guru",
            m_sekolah_id: sekolah.id,
            dihapus: 0,
          });
        }
        const userWalas = await User.query()
          .where({ whatsapp: walas })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();
        // dataRombel.push({
        //   rombelall: explanation.getCell("B" + rowNumber).value,
        //   tingkat: `${rombelall.split(" ")[0]}`,
        // });
        let rombelData = `${romawi[rombelall.split(" ")[0] - 1]} ${
          rombelall.split(" ")[1]
        } ${rombelall.split(" ")[2]}`;

        const rombelCheck = await MRombel.query()
          .where({ nama: rombelData })
          .andWhere({ m_ta_id: ta.id })
          .andWhere({ m_sekolah_id: sekolah.id })
          .andWhere({ m_user_id: userWalas.id })
          .first();

        if (!rombelCheck) {
          const jurusan = await MJurusan.query()
            .select("id", "kode", "m_sekolah_id", "dihapus")
            .where({ kode: jurusanKode })
            .andWhere({ dihapus: 0 })
            .andWhere({ m_sekolah_id: sekolah.id })
            .first();

          const rombel = await MRombel.create({
            tingkat: tingkat,
            nama: rombelData,
            m_jurusan_id: jurusan.id,
            m_sekolah_id: sekolah.id,
            m_ta_id: ta.id,
            kelompok: "reguler",
            m_user_id: userWalas.id,
            dihapus: 0,
          });

          const jamMengajar = await MJamMengajar.query()
            .select("id")
            .where({ m_sekolah_id: sekolah.id })
            .andWhere({ m_ta_id: ta.id })
            .fetch();

          const jadwalMengajarData = await Promise.all(
            jamMengajar.toJSON().map(async (data) => {
              data.m_mata_pelajaran_id = null;
              data.m_rombel_id = rombel.id;
              data.m_jam_mengajar_id = data.id;
              data.m_sekolah_id = sekolah.id;
              data.m_ta_id = ta.id;
              delete data.id;
              delete data.jamFormat;

              return data;
            })
          );

          await MJadwalMengajar.createMany(jadwalMengajarData);
        }
      }
    });

    const rombelResult = await Promise.all(
      dataRombel.map(async (d) => {
        const rombelCheck = await MRombel.query()
          .where({ nama: d.rombel })
          .andWhere({ m_ta_id: ta.id })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        if (!rombelCheck) {
          const createRombel = await MRombel.create({
            tingkat: d.tingkat,
            nama: d.rombelall,
            kelompok: "reguler",
            m_sekolah_id: sekolah.id,
            m_ta_id: ta.id,
            dihapus: 0,
          });
          return;
        }
      })
    );

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 9) {
        const rombelsiswa = explanation.getCell("P" + rowNumber).value;
        data.push({
          nama: explanation.getCell("L" + rowNumber).value,
          jk: explanation.getCell("M" + rowNumber).value,
          whatsapp: explanation.getCell("N" + rowNumber).value,
          email:
            explanation.getCell("O" + rowNumber).value == null
              ? ""
              : typeof explanation.getCell("O" + rowNumber).value == "object"
              ? JSON.parse(explanation.getCell("O" + rowNumber).value).text
              : explanation.getCell("O" + rowNumber).value,
          rombel: `${romawi[rombelsiswa.split(" ")[0] - 1]} ${
            rombelsiswa.split(" ")[1]
          } ${rombelsiswa.split(" ")[2]}`,
          password: explanation.getCell("Q" + rowNumber).value,
        });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        const checkUser = await User.query()
          .where({ whatsapp: d.whatsapp })
          .first();

        const checkRombel = await MRombel.query()
          .where({ nama: d.rombel })
          .andWhere({ m_ta_id: ta.id })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        if (checkRombel == null) {
          return;
        }

        const tgllahir = moment(d.tanggallahir).format(`YYYY-MM-DD`);
        // return d.rombel;

        if (!checkUser) {
          const createUser = await User.create({
            nama: d.nama,
            whatsapp: d.whatsapp,
            // email: d.email ? d.email : "",
            gender: d.jk,
            password: d.password || "smarteschool",
            role: "siswa",
            m_sekolah_id: sekolah.id,
            dihapus: 0,
          });

          if (checkUser) {
            await User.query()
              .where({ id: checkUser.id })
              .update({
                dihapus: 0,
                password: await Hash.make(d.password || "smarteschool"),
              });
          }

          await MAnggotaRombel.create({
            role: "anggota",
            dihapus: 0,
            m_user_id: createUser.toJSON().id,
            m_rombel_id: checkRombel.id,
          });
          return;
        }

        const checkAnggotaRombel = await MAnggotaRombel.query()
          .where({ dihapus: 0 })
          .andWhere({ m_user_id: checkUser.toJSON().id })
          .andWhere({ m_rombel_id: checkRombel.id })
          .first();

        if (checkAnggotaRombel) {
          return {
            message: `${d.nama} sudah terdaftar`,
            error: true,
          };
        }

        await MAnggotaRombel.create({
          role: "anggota",
          dihapus: 0,
          m_user_id: checkUser.id,
          m_rombel_id: checkRombel.id,
        });
        return;
      })
    );

    return result;
  }

  async importRombel2({ request, response, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importRombel2Services(
      `tmp/uploads/${fname}`,
      sekolah,
      ta
    );
  }

  async downloadRombel({ response, request, auth }) {
    const domain = request.headers().origin;

    const user = await auth.getUser();

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const { rombel_id } = request.post();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const query = MRombel.query()
      .with("user")
      .with("anggotaRombel", (builder) => {
        builder.where({ dihapus: 0 }).with("user");
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id });

    const rombel = rombel_id
      ? await query.where({ id: rombel_id }).fetch()
      : await query.fetch();

    let workbook = new Excel.Workbook();

    await Promise.all(
      rombel.toJSON().map(async (d, idx) => {
        let worksheet = workbook.addWorksheet(`${idx + 1}.${d.nama}`);
        worksheet.getCell("A1").value = "Rekap Data Siswa";
        worksheet.getCell("A2").value = sekolah.nama;
        worksheet.getCell("A3").value = ta.tahun;
        worksheet.getCell("A4 ").value = d.nama;
        worksheet.getCell(
          "A6"
        ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
        worksheet.addConditionalFormatting({
          ref: `A1:F4`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 16,
                  bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
              },
            },
          ],
        });
        worksheet.mergeCells(`A1:F1`);
        worksheet.mergeCells(`A2:F2`);
        worksheet.mergeCells(`A3:F3`);
        worksheet.mergeCells(`A4:F4`);
        worksheet.addConditionalFormatting({
          ref: `A7:F7`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 12,
                  bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                fill: {
                  type: "pattern",
                  pattern: "solid",
                  bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });

        await Promise.all(
          d.anggotaRombel.map(async (anggota, idx) => {
            worksheet.addConditionalFormatting({
              ref: `B${(idx + 1) * 1 + 7}:F${(idx + 1) * 1 + 7}`,
              rules: [
                {
                  type: "expression",
                  formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                  style: {
                    font: {
                      name: "Times New Roman",
                      family: 4,
                      size: 11,
                      // bold: true,
                    },
                    alignment: {
                      vertical: "middle",
                      horizontal: "left",
                    },
                    border: {
                      top: { style: "thin" },
                      left: { style: "thin" },
                      bottom: { style: "thin" },
                      right: { style: "thin" },
                    },
                  },
                },
              ],
            });
            worksheet.addConditionalFormatting({
              ref: `A${(idx + 1) * 1 + 7}`,
              rules: [
                {
                  type: "expression",
                  formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                  style: {
                    font: {
                      name: "Times New Roman",
                      family: 4,
                      size: 11,
                      // bold: true,
                    },
                    alignment: {
                      vertical: "middle",
                      horizontal: "center",
                    },
                    border: {
                      top: { style: "thin" },
                      left: { style: "thin" },
                      bottom: { style: "thin" },
                      right: { style: "thin" },
                    },
                  },
                },
              ],
            });
            // add column headers
            worksheet.getRow(7).values = [
              "No",
              "Nama",
              "Whatsapp",
              "Email",
              "Gender",
              "Jabatan",
            ];

            worksheet.columns = [
              { key: "no" },
              { key: "user" },
              { key: "whatsapp" },
              { key: "email" },
              { key: "gender" },
              { key: "jabatan" },
            ];

            // Add row using key mapping to columns
            let row = worksheet.addRow({
              no: `${idx + 1}`,
              user: anggota.user ? anggota.user.nama : "-",
              whatsapp: anggota.user ? anggota.user.whatsapp : "-",
              email: anggota.user ? anggota.user.email : "-",
              gender: anggota.user ? anggota.user.gender : "-",
              jabatan: anggota ? anggota.role : "-",
            });
          })
        );
      })
    );
    let namaFile = `/uploads/rekap-rombel-${keluarantanggalseconds}-${new Date().getTime()}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async downloadSPP({ response, request, auth, params: { pembayaran_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }
    const user = await auth.getUser();
    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const pembayaran = await MPembayaran.query()
      .with("rombel", (builder) => {
        builder
          .with("rombel", (builder) => {
            builder.where({ dihapus: 0 });
          })
          .with("siswa", (builder) => {
            builder.with("riwayat").with("user", (builder) => {
              builder.select("id", "nama");
            });
          })
          .where({ dihapus: 0 });
      })
      .where({ id: pembayaran_id })
      .andWhere({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .first();

    let workbook = new Excel.Workbook();

    await Promise.all(
      pembayaran.toJSON().rombel.map(async (e, idx) => {
        let worksheet = workbook.addWorksheet(`${idx + 1}.${e.rombel.nama}`);
        worksheet.getCell("A1").value = `Rekap Pembayaran ${pembayaran.jenis}`;
        worksheet.getCell("A2").value = sekolah.nama;
        worksheet.getCell("A3").value = ta.tahun;
        worksheet.getCell("A5").value = pembayaran.nama;
        worksheet.getCell("A6").value = e.rombel.nama;
        worksheet.getCell("A7").value = pembayaran.bulan;
        worksheet.getCell(
          "A8"
        ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
        worksheet.mergeCells(`A1:I1`);
        worksheet.mergeCells(`A2:I2`);
        worksheet.mergeCells(`A3:I3`);
        worksheet.mergeCells(`A5:I5`);
        worksheet.mergeCells(`A6:I6`);
        worksheet.mergeCells(`A7:I7`);
        worksheet.addConditionalFormatting({
          ref: "A1:I3",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 16,
                  bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: "A5:I7",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 14,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
              },
            },
          ],
        });

        worksheet.addConditionalFormatting({
          ref: "A9:I9",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 14,
                  bold: true,
                },
                fill: {
                  type: "pattern",
                  pattern: "solid",
                  bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: "A10:A109",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
              },
            },
          ],
        });
        const dataFilter = await Promise.all(
          e.siswa.filter((siswa) => siswa != null)
        );
        await Promise.all(
          dataFilter.map(async (anggota, idxx) => {
            worksheet.getRow(9).values = [
              "No",
              "Nama",
              "Status",
              "No Pembayaran",
              "Bank",
              "Norek",
              "Nama Pemilik",
              "Nominal",
              "Bukti",
            ];
            worksheet.columns = [
              { key: "no" },
              { key: "nama" },
              { key: "status" },
              { key: "noPembayaran" },
              { key: "bank" },
              { key: "norek" },
              { key: "nama_pemilik" },
              { key: "nominal" },
              { key: "bukti" },
            ];

            // add column headers
            if (anggota.riwayat.length == 0) {
              let row = worksheet.addRow({
                no: `${idxx + 1}`,
                nama: anggota.user ? anggota.user.nama : "-",
                status: "Belum ada Pembayaran",
              });
            } else {
              await Promise.all(
                anggota.riwayat.map(async (r, no) => {
                  worksheet.getRow(9).values = [
                    "No",
                    "Nama",
                    "Status",
                    "No Pembayaran",
                    "Bank",
                    "Norek",
                    "Nama Pemilik",
                    "Nominal",
                    "Bukti",
                  ];
                  worksheet.columns = [
                    { key: "no" },
                    { key: "nama" },
                    { key: "status" },
                    { key: "noPembayaran" },
                    { key: "bank" },
                    { key: "norek" },
                    { key: "nama_pemilik" },
                    { key: "nominal" },
                    { key: "bukti" },
                  ];

                  // Add row using key mapping to columns
                  let row = worksheet.addRow({
                    no: `${idxx + 1}`,
                    nama: anggota.user ? anggota.user.nama : "-",
                    status: anggota ? anggota.status : "-",
                    noPembayaran: `Pembayaran #${no + 1}`,
                    bank: r ? r.bank : "-",
                    norek: r ? r.norek : "-",
                    nama_pemilik: r ? r.nama_pemilik : "-",
                    nominal: r ? r.nominal : "-",
                    bukti: r ? r.bukti : "-",
                  });
                })
              );
            }
          })
        );
        worksheet.getColumn("A").width = 5;
        worksheet.getColumn("B").width = 28;
        worksheet.getColumn("C").width = 24;
        worksheet.getColumn("D").width = 23;
        worksheet.getColumn("E").width = 9;
        worksheet.getColumn("F").width = 9;
        worksheet.getColumn("G").width = 19;
        worksheet.getColumn("F").width = 12;
      })
    );

    let namaFile = `/uploads/Rekap-Pembayaran-${pembayaran.jenis}-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  // =========== IMPORT Alumni SERVICE ================
  async importAlumniServices(filelocation, sekolah) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar Alumni");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 8) {
        data.push({
          nama: explanation.getCell("B" + rowNumber).value,
          whatsapp: explanation.getCell("C" + rowNumber).value,
          // email:
          //   explanation.getCell("D" + rowNumber).value == null
          //     ? ""
          //     : typeof explanation.getCell("D" + rowNumber).value == "object"
          //     ? JSON.parse(explanation.getCell("D" + rowNumber).value).text
          //     : explanation.getCell("D" + rowNumber).value,
          gender: explanation.getCell("E" + rowNumber).value,
          tempat_lahir: explanation.getCell("F" + rowNumber).value,
          tanggal_lahir: explanation.getCell("G" + rowNumber).value,
          jurusan: explanation.getCell("H" + rowNumber).value,
          tahun_masuk: explanation.getCell("I" + rowNumber).value,
          pekerjaan: explanation.getCell("J" + rowNumber).value,
          kantor: explanation.getCell("K" + rowNumber).value,
          sektor_industri: explanation.getCell("L" + rowNumber).value,
          sekolah_lanjutan: explanation.getCell("M" + rowNumber).value,
          pengalaman: explanation.getCell("N" + rowNumber).value,
          sertifikasi_keahlian: explanation.getCell("O" + rowNumber).value,
          purnakarya: explanation.getCell("P" + rowNumber).value,
          deskripsi: explanation.getCell("Q" + rowNumber).value,
        });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        const checkUser = await User.query()
          .where({ whatsapp: d.whatsapp })
          .andWhere({ dihapus: 0 })
          .first();

        if (checkUser) {
          const alumni = await MAlumni.create({
            jurusan: d.jurusan,
            tahun_masuk: d.tahun_masuk,
            pekerjaan: d.pekerjaan,
            kantor: d.kantor,
            sektor_industri: d.sektor_industri,
            sekolah_lanjutan: d.sekolah_lanjutan,
            sertifikasi_keahlian: d.sertifikasi_keahlian,
            pengalaman: d.pengalaman,
            purnakarya: d.purnakarya,
            deskripsi: d.deskripsi,
            dihapus: 0,
            m_user_id: checkUser.id,
          });
          return {
            message: `${d.nama} ${d.whatsapp} sudah terdaftar`,
            error: true,
          };
        }

        const user = await User.create({
          nama: d.nama,
          whatsapp: d.whatsapp,
          // email: d.email ? d.email : "",
          gender: d.gender,
          role: "alumni",
          m_sekolah_id: sekolah.id,
          tanggal_lahir: d.tanggal_lahir,
          tempat_lahir: d.tempat_lahir,
          dihapus: 0,
        });

        await MProfilUser.create({
          gender: d.gender,
          tanggal_lahir: d.tanggal_lahir,
          tempat_lahir: d.tempat_lahir,
        });

        const alumni = await MAlumni.create({
          jurusan: d.jurusan,
          tahun_masuk: d.tahun_masuk,
          pekerjaan: d.pekerjaan,
          kantor: d.kantor,
          sektor_industri: d.sektor_industri,
          sekolah_lanjutan: d.sekolah_lanjutan,
          sertifikasi_keahlian: d.sertifikasi_keahlian,
          pengalaman: d.pengalaman,
          purnakarya: d.purnakarya,
          deskripsi: d.deskripsi,
          dihapus: 0,
          m_user_id: user.id,
        });

        return;
      })
    );

    return result;
  }

  async importAlumni({ request, response, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importAlumniServices(`tmp/uploads/${fname}`, sekolah);
  }

  async downloadAlumni({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const user = await auth.getUser();
    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();
    const alumni = await MAlumni.query()
      .with("user", (builder) => {
        builder.where({ m_sekolah_id: sekolah.id });
      })
      .where({ dihapus: 0 })
      .fetch();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Daftar Alumni`);
    worksheet.mergeCells("A1:P1");
    worksheet.mergeCells("A2:P2");
    worksheet.getCell(
      "A3"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.addConditionalFormatting({
      ref: "A1:P2",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });
    worksheet.addConditionalFormatting({
      ref: "A4:P4",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });
    await Promise.all(
      alumni.toJSON().map(async (d, idx) => {
        worksheet.getCell("A1").value = "Rekap Alumni";
        worksheet.getCell("A2").value = sekolah.nama;
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 4}:P${(idx + 1) * 1 + 4}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 4}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        // add column headers
        worksheet.getRow(4).values = [
          "No",
          "Nama",
          "Whatsapp",
          "Email",
          "Jenis Kelamin",
          "Tempat Lahir",
          "Tanggal Lahir",
          "Tahun Masuk",
          "Pekerjaan",
          "Kantor",
          "Sektor Industri",
          "Sekolah Lanjutan",
          "Pengalaman",
          "Sertifikasi Keahlian",
          "Purnakarya",
          "Deskripsi",
        ];
        worksheet.columns = [
          { key: "no" },
          { key: "nama" },
          { key: "whatsapp" },
          { key: "email" },
          { key: "jeniskelamin" },
          { key: "tempat_lahir" },
          { key: "tanggal_lahir" },
          { key: "tahun_masuk" },
          { key: "pekerjaan" },
          { key: "kantor" },
          { key: "sektor_industri" },
          { key: "sekolah_lanjutan" },
          { key: "pengalaman" },
          { key: "sertifikasi_keahlian" },
          { key: "purnakarya" },
          { key: "deskripsi" },
        ];

        // Add row using key mapping to columns
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          nama: d.user ? d.user.nama : "-",
          whatsapp: d.user ? d.user.whatsapp : "-",
          email: d.user ? d.user.email : "-",
          jeniskelamnin: d.user ? d.user.gender : "-",
          tempat_lahir: d.user ? d.user.tempat_lahir : "-",
          tanggal_lahir: d.user ? d.user.tanggal_lahir : "-",
          tahun_masuk: d ? d.tahun_masuk : "-",
          pekerjaan: d ? d.pekerjaan : "-",
          kantor: d ? d.kantor : "-",
          sektor_industri: d ? d.sektor_industri : "-",
          sekolah_lanjutan: d ? d.sekolah_lanjutan : "-",
          pengalaman: d ? d.pengalaman : "-",
          sertifikasi_keahlian: d ? d.sertifikasi_keahlian : "-",
          purnakarya: d ? d.purnakarya : "-",
          deskripsi: d ? d.deskripsi : "-",
        });
      })
    );
    let namaFile = `/uploads/rekap-Alumni-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async downloadKartuUjian({ response, request, params: { ujian_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }
    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();
    const kepsek = ta.nama_kepsek;

    const ujian = await MUjian.query()
      .with("mataPelajaran", (builder) => {
        builder.with("user");
      })
      .with("soalUjian", (builder) => {
        builder.with("soal").where({ dihapus: 0 });
      })
      .withCount("soalUjian as TotalUjian", (builder) => {
        builder.where({ m_ujian_id: ujian_id });
      })
      .where({ dihapus: 0 })
      .andWhere({ id: ujian_id })
      .first();

    // return ujian;
    const pg = await TkSoalUjian.query()
      .with("soal", (builder) => {
        builder.where({ bentuk: "pg" });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_ujian_id: ujian_id })
      .fetch();

    const pgSoal = await Promise.all(
      pg.toJSON().map(async (d) => {
        const pg = await MSoalUjian.query()
          .where({ dihapus: 0 })
          .andWhere({ bentuk: "pg" })
          .andWhere({ id: d.m_soal_ujian_id })
          .first();

        return pg;
      })
    );

    const pgFilter = pgSoal.filter((d) => d != null);

    const esai = await TkSoalUjian.query()
      .with("soal", (builder) => {
        builder.where({ bentuk: "esai" });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_ujian_id: ujian_id })
      .fetch();

    const esaiSoal = await Promise.all(
      esai.toJSON().map(async (d) => {
        const esai = await MSoalUjian.query()
          .where({ dihapus: 0 })
          .andWhere({ bentuk: "esai" })
          .andWhere({ id: d.m_soal_ujian_id })
          .first();

        return esai;
      })
    );

    const esaiFilter = esaiSoal.filter((d) => d != null);
    // worksheet 1

    // let logoFileName = `logo-${new Date().getTime()}.png`;

    // try {
    //   const downloader = new Downloader({
    //     url: `${sekolah.logo}`,
    //     directory: "./public/tmp/",
    //     fileName: logoFileName,
    //     cloneFiles: false,
    //   });

    //   await downloader.download();
    // } catch (error) {
    //   logoFileName = "logo.png";
    // }

    const kartusoalFile = await DownloadService2.kartuUjian(
      sekolah,
      ta,
      kepsek,
      ujian,
      pgFilter,
      esaiFilter,
      keluarantanggalseconds
      // logoFileName
    );

    return kartusoalFile;
  }

  async downloadKartuEsai({ response, request, params: { ujian_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const taa = await Mta.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ aktif: 1 })
      .andWhere({ dihapus: 0 })
      .first();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();
    const kepsek = ta.nama_kepsek;

    const ujian = await MUjian.query()
      .with("mataPelajaran", (builder) => {
        builder.with("user");
      })
      .with("soalUjian", (builder) => {
        builder.with("soal").where({ dihapus: 0 });
      })
      .withCount("soalUjian as TotalUjian", (builder) => {
        builder.where({ m_ujian_id: ujian_id });
      })
      .where({ dihapus: 0 })
      .andWhere({ id: ujian_id })
      .first();

    const esai = await TkSoalUjian.query()
      .with("soal", (builder) => {
        builder.where({ bentuk: "esai" });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_ujian_id: ujian_id })
      .fetch();

    const esaiSoal = await Promise.all(
      esai.toJSON().map(async (d) => {
        const esai = await MSoalUjian.query()
          .where({ dihapus: 0 })
          .andWhere({ bentuk: "esai" })
          .andWhere({ id: d.m_soal_ujian_id })
          .first();

        return esai;
      })
    );

    const esaiFilter = esaiSoal.filter((d) => d != null);

    // return esaiFilter;

    const kartusoalFile = await DownloadKartuEsai.kartuUjian(
      sekolah,
      ta,
      kepsek,
      ujian,
      esaiFilter,
      keluarantanggalseconds
      // logoFileName
    );

    return kartusoalFile;
  }

  async downloadKartuPg({ response, request, params: { ujian_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }
    const taa = await Mta.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ aktif: 1 })
      .andWhere({ dihapus: 0 })
      .first();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();
    const kepsek = ta.nama_kepsek;

    const ujian = await MUjian.query()
      .with("mataPelajaran", (builder) => {
        builder.with("user");
      })
      .with("soalUjian", (builder) => {
        builder.with("soal").where({ dihapus: 0 });
      })
      .withCount("soalUjian as TotalUjian", (builder) => {
        builder.where({ m_ujian_id: ujian_id });
      })
      .where({ dihapus: 0 })
      .andWhere({ id: ujian_id })
      .first();
    // return ujian;
    const pg = await TkSoalUjian.query()
      .with("soal", (builder) => {
        builder.where({ bentuk: "pg" });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_ujian_id: ujian_id })
      .fetch();

    const pgSoal = await Promise.all(
      pg.toJSON().map(async (d) => {
        const pg = await MSoalUjian.query()
          .where({ dihapus: 0 })
          .andWhere({ bentuk: "pg" })
          .andWhere({ id: d.m_soal_ujian_id })
          .first();

        return pg;
      })
    );

    const pgFilter = pgSoal.filter((d) => d != null);

    const kartusoalFile = await DownloadKartuPg.kartuUjian(
      sekolah,
      taa,
      kepsek,
      ujian,
      pgFilter,
      keluarantanggalseconds
      // logoFileName
    );

    return kartusoalFile;
  }

  async downloadKisiKisi({ response, request, params: { ujian_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }
    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const taa = await Mta.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ aktif: 1 })
      .andWhere({ dihapus: 0 })
      .first();

    const kepsek = taa.nama_kepsek;

    const ujian = await MUjian.query()
      .with("mataPelajaran", (builder) => {
        builder.with("user");
      })
      .with("soalUjian", (builder) => {
        builder.with("soal").where({ dihapus: 0 });
      })
      .withCount("soalUjian as TotalUjian", (builder) => {
        builder.where({ m_ujian_id: ujian_id });
      })
      .where({ dihapus: 0 })
      .andWhere({ id: ujian_id })
      .first();

    const kartusoalFile = await Downloadkisikisi.kartuUjian(
      sekolah,
      kepsek,
      ujian,
      keluarantanggalseconds
      // logoFileName
    );

    return kartusoalFile;
  }

  async downloadNaskah({ response, request, params: { ujian_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const taa = await Mta.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ aktif: 1 })
      .andWhere({ dihapus: 0 })
      .first();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const ujian = await MUjian.query()
      .with("mataPelajaran", (builder) => {
        builder.with("user");
      })
      .with("soalUjian", (builder) => {
        builder.with("soal").where({ dihapus: 0 });
      })
      .withCount("soalUjian as TotalUjian", (builder) => {
        builder.where({ m_ujian_id: ujian_id });
      })
      .where({ dihapus: 0 })
      .andWhere({ id: ujian_id })
      .first();

    // return ujian;
    const pg = await TkSoalUjian.query()
      .with("soal", (builder) => {
        builder.where({ bentuk: "pg" });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_ujian_id: ujian_id })
      .fetch();

    const pgSoal = await Promise.all(
      pg.toJSON().map(async (d) => {
        const pg = await MSoalUjian.query()
          .where({ dihapus: 0 })
          .andWhere({ bentuk: "pg" })
          .andWhere({ id: d.m_soal_ujian_id })
          .first();

        return pg;
      })
    );

    const pgFilter = pgSoal.filter((d) => d != null);

    const kartusoalFile = await DownloadNaskah.kartuUjian(
      sekolah,
      taa,
      ujian,
      pgFilter,
      keluarantanggalseconds
      // logoFileName
    );

    return kartusoalFile;
  }

  async downloadKartuRumusan({ response, request, params: { ujian_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }
    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();
    const kepsek = ta.nama_kepsek;

    const ujian = await MUjian.query()
      .with("mataPelajaran", (builder) => {
        builder.with("user");
      })
      .with("soalUjian", (builder) => {
        builder.with("soal").where({ dihapus: 0 });
      })
      .withCount("soalUjian as TotalUjian", (builder) => {
        builder.where({ m_ujian_id: ujian_id });
      })
      .where({ dihapus: 0 })
      .andWhere({ id: ujian_id })
      .first();

    // return ujian;
    const pg = await TkSoalUjian.query()
      .with("soal", (builder) => {
        builder.where({ bentuk: "pg" });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_ujian_id: ujian_id })
      .fetch();

    const pgSoal = await Promise.all(
      pg.toJSON().map(async (d) => {
        const pg = await MSoalUjian.query()
          .where({ dihapus: 0 })
          .andWhere({ bentuk: "pg" })
          .andWhere({ id: d.m_soal_ujian_id })
          .first();

        return pg;
      })
    );

    const pgFilter = pgSoal.filter((d) => d != null);

    const kartusoalFile = await DownloadRumusan.kartuUjian(
      sekolah,
      ta,
      kepsek,
      ujian,
      pgFilter,
      keluarantanggalseconds
      // logoFileName
    );

    return kartusoalFile;
  }
  async downloadKartuTemplate({ response, request, params: { ujian_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }
    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();
    const kepsek = ta.nama_kepsek;

    const ujian = await MUjian.query()
      .with("mataPelajaran", (builder) => {
        builder.with("user");
      })
      .with("soalUjian", (builder) => {
        builder.with("soal").where({ dihapus: 0 });
      })
      .withCount("soalUjian as TotalUjian", (builder) => {
        builder.where({ m_ujian_id: ujian_id });
      })
      .where({ dihapus: 0 })
      .andWhere({ id: ujian_id })
      .first();

    // return ujian;

    const kartusoalFile = await DownloadTemplate.kartuUjian(
      ujian,
      keluarantanggalseconds
      // logoFileName
    );

    return kartusoalFile;
  }

  async daftarsekolah({ response, request }) {
    const { search, page, limit } = request.get();

    let sekolah = MSekolah.query().select("id", "nama", "favicon", "domain");

    if (search) {
      sekolah.where("nama", "like", `%${search}%`);
    }

    if ((page, limit)) {
      sekolah = await sekolah.forPage(page, limit).fetch();
    } else {
      sekolah = await sekolah.limit(50).fetch();
    }

    return sekolah;
  }

  async getBukuInduk({ response, request, auth }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const checkPredikat = await MPredikatNilai.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .first();

    const checkBobot = await MBobotNilai.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    if (!checkBobot) {
      await MBobotNilai.create({
        tugas_pts: "30",
        uh_pts: "30",
        uts_pts: "40",
        praktik_pts: "25",
        produk_pts: "25",
        proyek_pts: "25",
        portofolio_pts: "25",
        tugas_pas: "25",
        uh_pas: "25",
        uts_pas: "25",
        uas_pas: "25",
        praktik_pas: "25",
        produk_pas: "25",
        proyek_pas: "25",
        portofolio_pas: "25",
        m_sekolah_id: sekolah.id,
      });
    }

    if (!checkPredikat) {
      await MPredikatNilai.create({
        predikat: "A",
        bb_pengetahuan: "86",
        ba_pengetahuan: "100",
        bb_keterampilan: "86",
        ba_keterampilan: "100",
        sikap: "Sangat Baik",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
      await MPredikatNilai.create({
        predikat: "B",
        bb_pengetahuan: "71",
        ba_pengetahuan: "85",
        bb_keterampilan: "71",
        ba_keterampilan: "85",
        sikap: "Baik",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
      await MPredikatNilai.create({
        predikat: "C",
        bb_pengetahuan: "56",
        ba_pengetahuan: "70",
        bb_keterampilan: "56",
        ba_keterampilan: "70",
        sikap: "Cukup",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
      await MPredikatNilai.create({
        predikat: "D",
        bb_pengetahuan: "0",
        ba_pengetahuan: "55",
        bb_keterampilan: "0",
        ba_keterampilan: "55",
        sikap: "Kurang",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
    }

    const predikat = await MPredikatNilai.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const rombel = await MRombel.query()
      .withCount("materiRombel as total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const rombelIds = await MRombel.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .pluck("id");

    const bobot = await MBobotNilai.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    const countMapel = await Promise.all(
      rombelIds.map(async (item) => {
        const count = await TkMateriRombel.query()
          .where("m_rombel_id", item)
          .countDistinct("m_materi_id as total");
        return { rombel_id: item, count };
      })
    );

    return response.ok({
      predikat: predikat,
      rombel: rombel,
      bobot,
      countMapel,
    });
  }

  async detailBukuInduk({ response, request, auth, params: { rombel_id } }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const rombel = await MRombel.query()
      .with("anggotaRombel", (builder) => {
        builder.where({ dihapus: 0 }).with("user", (builder) => {
          builder
            .select("id", "nama", "avatar", "whatsapp")
            .with("profil", (builder) => {
              builder.select(
                "id",
                "nisn",
                "tempat_lahir",
                "tanggal_lahir",
                "gender",
                "agama",
                "status_keluarga",
                "anak_ke",
                "alamat",
                "telp_rumah",
                "asal_sekolah",
                "kelas_diterima",
                "tanggal_masuk",
                "nama_ayah",
                "nama_ibu",
                "alamat_ayah",
                "alamat_ibu",
                "pekerjaan_ayah",
                "pekerjaan_ibu",
                "nama_wali",
                "alamat_wali",
                "telp_wali",
                "pekerjaan_wali",
                "m_user_id"
              );
            });
        });
      })
      .with("jurusan")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ id: rombel_id })
      .andWhere({ dihapus: 0 })
      .first();

    return response.ok({
      rombel: rombel,
    });
  }
  async detailBukuIndukSiswa({
    response,
    request,
    auth,
    params: { rombel_id },
    params: { user_id },
  }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const sikapsosial = await MSikapSosial.query().fetch();
    const sikapspiritual = await MSikapSpiritual.query().fetch();

    const ta = await Mta.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .orderBy("id", "desc")
      .offset(0)
      .limit(6)
      .fetch();

    const result = await Promise.all(
      ta.toJSON().map(async (d) => {
        const taa = await Mta.query().where({ id: d.id }).first();

        const tanggalDistinct = await Database.raw(
          "SELECT DISTINCT DATE_FORMAT(created_at, '%Y-%m-%d') as tanggalDistinct from m_absen WHERE created_at BETWEEN ? AND  ?",
          [`${d.tanggal_awal}`, `${d.tanggal_akhir}`]
        );

        const siswa = await User.query()
          .with("profil")
          .with("keteranganRapor", (builder) => {
            builder.where({ dihapus: 0 }).andWhere({ m_ta_id: d.id });
          })
          .with("keteranganPkl", (builder) => {
            builder.where({ dihapus: 0 }).andWhere({ m_ta_id: d.id });
          })
          .with("raporEkskul", (builder) => {
            builder.with("rombel", (builder) => {
              builder.select("id", "nama");
            });
          })
          .with("prestasi", (builder) => {
            builder
              .with("tingkatPrestasi")
              .where({ dihapus: 0 })
              .andWhere({ m_ta_id: d.id });
          })
          .with("sikap", (builder) => {
            builder.where({ dihapus: 0 }).andWhere({ m_ta_id: d.id });
          })
          .where({ id: user_id })
          .andWhere({ dihapus: 0 })
          .first();

        const rombel = await MRombel.query()
          .with("anggotaRombel", (builder) => {
            builder.where({ dihapus: 0 }).andWhere({ m_user_id: user_id });
          })
          .with("user")
          .andWhere({ m_ta_id: d.id })
          .andWhere({ kelompok: "reguler" })
          .fetch();

        // return rombel;

        const rombel1 = await Promise.all(
          rombel.toJSON().map(async (d) => {
            if (d.anggotaRombel.length == 0) {
              return;
            }
            return d;
          })
        );

        const rombelData = rombel1.filter((d) => d != null);

        const rombelData1 = rombelData[0];

        const muatan = await MKategoriMapel.query()
          .with("mapelRapor", (builder) => {
            builder
              .with("mataPelajaran", (builder) => {
                builder
                  .with("nilaiIndividu", (builder) => {
                    builder
                      .with("nilaiUS")
                      .where({ m_user_id: user_id })
                      .andWhere({ m_ta_id: d.id });
                  })
                  .with("sikapSiswa", (builder) => {
                    builder.with("predikat").where({ m_user_id: user_id });
                  })
                  .with("templateDeskripsi", (builder) => {
                    builder.with("predikat");
                  })
                  .with("materi");
              })
              .orderBy("urutan", "asc")
              .where({ dihapus: 0 });
          })
          .where({ dihapus: 0 })
          .andWhere({ m_rombel_id: rombelData1 ? rombelData1.id : 0 })
          .fetch();

        const isUS = muatan
          .toJSON()
          .some(
            (item) => !item.mapelRapor?.mataPelajaran?.nilaiIndividu?.nilaiUS
          );

        const dataNilaiMentah = await TkRekapNilai.query()
          .with("rekapRombel", (builder) => {
            builder.with("rekap", (builder) => {
              builder.where({ m_ta_id: d.id }).andWhere({ dihapus: 0 });
            });
          })
          .where({ m_user_id: user_id })
          .fetch();

        const nilaiTinggiRendah = await Promise.all(
          muatan.toJSON().map(async (d) => {
            const nilaiTinggiRendah1 = await Promise.all(
              d.mapelRapor.map(async (e) => {
                // return e.mataPelajaran.materi.id;
                const nilaiTertinggi = await TkRekapNilai.query()
                  .with("rekapRombel", (builder) => {
                    builder.with("rekap", (builder) => {
                      builder
                        .where({ tipe: "tugas" })
                        .andWhere({ m_ta_id: d.id })
                        .andWhere({ dihapus: 0 })
                        .andWhere({ m_materi_id: e.mataPelajaran.materi.id });
                    });
                  })
                  .where({ m_user_id: user_id })
                  .orderBy("nilai", "desc")
                  .fetch();

                return nilaiTertinggi;

                const dataNilaiTertinggi = nilaiTertinggi
                  .toJSON()
                  .filter((d) => d.rekapRombel.rekap != null);

                const nilaiMax = dataNilaiTertinggi[0]
                  ? dataNilaiTertinggi[0].nilai
                  : 0;

                const rekap = await MRekap.query()
                  .with("rekapRombelSendiri", (builder) => {
                    builder
                      .with("rekapNilaiSendiri", (builder) => {
                        builder
                          .where({ m_user_id: user_id })
                          .andWhere({ nilai: nilaiMax });
                      })
                      .where({ m_rombel_id: rombel_id });
                  })
                  .where({ m_ta_id: d.id })
                  .andWhere({ dihapus: 0 })
                  .fetch();

                const dataRekapFilter1 = rekap
                  .toJSON()
                  .filter((d) => d.rekapRombelSendiri != null);
                const dataRekapMax1 = dataRekapFilter1.filter(
                  (d) => d.rekapRombelSendiri.rekapNilaiSendiri != null
                );

                const dataRekapMax = dataRekapMax1[0];

                const nilaiTertinggiKeterampilan = await TkRekapNilai.query()
                  .with("rekapRombel", (builder) => {
                    builder.with("rekap", (builder) => {
                      builder
                        .where({ tipe: "keterampilan" })
                        .andWhere({ m_ta_id: d.id })
                        .andWhere({ dihapus: 0 })
                        .andWhere({
                          m_materi_id: e.mataPelajaran.materi.id,
                        });
                    });
                  })
                  .where({ m_user_id: user_id })
                  .orderBy("nilai", "desc")
                  .fetch();

                const dataNilaiTertinggiKeterampilan =
                  nilaiTertinggiKeterampilan
                    .toJSON()
                    .filter((d) => d.rekapRombel.rekap != null);

                const nilaiMaxKeterampilan = dataNilaiTertinggiKeterampilan[0]
                  ? dataNilaiTertinggiKeterampilan[0].nilai
                  : 0;

                const rekapKeterampilan = await MRekap.query()
                  .with("rekapRombelSendiri", (builder) => {
                    builder
                      .with("rekapNilaiSendiri", (builder) => {
                        builder
                          .where({ m_user_id: user_id })
                          .andWhere({ nilai: nilaiMaxKeterampilan });
                      })
                      .where({ m_rombel_id: rombel_id });
                  })
                  .where({ m_ta_id: d.id })
                  .andWhere({ dihapus: 0 })
                  .fetch();

                const dataRekapFilter1Keterampilan = rekapKeterampilan
                  .toJSON()
                  .filter((d) => d.rekapRombelSendiri != null);
                const dataRekapMax1Keterampilan =
                  dataRekapFilter1Keterampilan.filter(
                    (d) => d.rekapRombelSendiri.rekapNilaiSendiri != null
                  );

                const dataRekapMaxKeterampilan = dataRekapMax1Keterampilan[0];

                const nilaiTerendah = await TkRekapNilai.query()
                  .with("rekapRombel", (builder) => {
                    builder.with("rekap", (builder) => {
                      builder
                        .where({ tipe: "tugas" })
                        .andWhere({ m_ta_id: d.id })
                        .andWhere({ dihapus: 0 })
                        .andWhere({
                          m_materi_id: e.mataPelajaran.materi.id,
                        });
                    });
                  })
                  .where({ m_user_id: user_id })
                  .orderBy("nilai", "asc")
                  .fetch();

                const dataNilaiTerendah = nilaiTerendah
                  .toJSON()
                  .filter((d) => d.rekapRombel.rekap != null);

                const nilaiMin = dataNilaiTerendah[0]
                  ? dataNilaiTerendah[0].nilai
                  : 0;

                const rekapTerendah = await MRekap.query()
                  .with("rekapRombelSendiri", (builder) => {
                    builder
                      .with("rekapNilaiSendiri", (builder) => {
                        builder
                          .where({ m_user_id: user_id })
                          .andWhere({ nilai: nilaiMin });
                      })
                      .where({ m_rombel_id: rombel_id });
                  })
                  .where({ m_ta_id: d.id })
                  .andWhere({ dihapus: 0 })
                  .fetch();

                const dataRekapFilter1Terendah = rekapTerendah
                  .toJSON()
                  .filter((d) => d.rekapRombelSendiri != null);
                const dataRekapMin1 = dataRekapFilter1Terendah.filter(
                  (d) => d.rekapRombelSendiri.rekapNilaiSendiri != null
                );

                const dataRekapMin = dataRekapMin1[0];

                const nilaiTerendahKeterampilan = await TkRekapNilai.query()
                  .with("rekapRombel", (builder) => {
                    builder.with("rekap", (builder) => {
                      builder
                        .where({ tipe: "keterampilan" })
                        .andWhere({ m_ta_id: d.id })
                        .andWhere({ dihapus: 0 })
                        .andWhere({
                          m_materi_id: e.mataPelajaran.materi.id,
                        });
                    });
                  })
                  .where({ m_user_id: user_id })
                  .orderBy("nilai", "asc")
                  .fetch();

                const dataNilaiTerendahKeterampilan = nilaiTerendahKeterampilan
                  .toJSON()
                  .filter((d) => d.rekapRombel.rekap != null);

                const nilaiMinKeterampilan = dataNilaiTerendahKeterampilan[0]
                  ? dataNilaiTerendahKeterampilan[0].nilai
                  : 0;

                const rekapKeterampilanTerendah = await MRekap.query()
                  .with("rekapRombelSendiri", (builder) => {
                    builder
                      .with("rekapNilaiSendiri", (builder) => {
                        builder
                          .where({ m_user_id: user_id })
                          .andWhere({ nilai: nilaiMinKeterampilan });
                      })
                      .where({ m_rombel_id: rombel_id });
                  })
                  .where({ m_ta_id: d.id })
                  .andWhere({ dihapus: 0 })
                  .fetch();

                const dataRekapFilter1KeterampilanTerendah =
                  rekapKeterampilanTerendah
                    .toJSON()
                    .filter((d) => d.rekapRombelSendiri != null);
                const dataRekapMin1Keterampilan =
                  dataRekapFilter1KeterampilanTerendah.filter(
                    (d) => d.rekapRombelSendiri.rekapNilaiSendiri != null
                  );

                const dataRekapMinKeterampilan = dataRekapMin1Keterampilan[0];

                return {
                  dataRekapMax,
                  dataRekapMin,
                  dataRekapMaxKeterampilan,
                  dataRekapMinKeterampilan,
                };
              })
            );
            return nilaiTinggiRendah1;
          })
        );
        // const ulangan = await TkPesertaUjian.query()
        //   .with("jadwalUjian", (builder) => {
        //     builder
        //       .with("jadwalUjian", (builder) => {
        //         builder
        //           .with("ujian", (builder) => {
        //             builder
        //               .with("mataPelajaran")
        //               .select(
        //                 "id",
        //                 "nama",
        //                 "tipe",
        //                 "tingkat",
        //                 "dihapus",
        //                 "m_mata_pelajaran_id"
        //               );
        //           })
        //           .select("id", "m_ujian_id", "dihapus", "kkm")
        //           .where({ dihapus: 0 });
        //       })
        //       .where({ dihapus: 0 });
        //   })
        //   .select(
        //     "id",
        //     "nilai",
        //     "m_user_id",
        //     "tk_jadwal_ujian_id",
        //     "dihapus",
        //     "selesai",
        //     "dinilai"
        //   )
        //   .where({ m_user_id: user_id })
        //   .andWhere({ dihapus: 0 })
        //   .andWhere({ selesai: 1 })
        //   .andWhere({ dinilai: 1 })
        //   .fetch();

        // const materiRombel = await TkMateriRombel.query()
        //   .with("materi", (builder) => {
        //     builder.with("mataPelajaran");
        //   })
        //   .where({ m_rombel_id: rombel_id })
        //   .fetch();

        const predikat = await MPredikatNilai.query()
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .fetch();

        // return rombelData;

        const ekskul = await MRombel.query()
          .with("anggotaRombel", (builder) => {
            builder.where({ dihapus: 0 }).andWhere({ m_user_id: user_id });
          })
          .where({ kelompok: "ekskul" })
          .andWhere({ dihapus: 0 })
          .fetch();

        const totalHadir = await MAbsen.query()
          .with("user")
          .whereBetween("created_at", [
            `${d.tanggal_awal}`,
            `${d.tanggal_akhir}`,
          ])
          .andWhere({ keterangan: "hadir" })
          .andWhere({ m_user_id: user_id })
          .count("* as total");
        const totalSakit = await MAbsen.query()
          .with("user")
          .whereBetween("created_at", [
            `${d.tanggal_awal}`,
            `${d.tanggal_akhir}`,
          ])
          .andWhere({ keterangan: "sakit" })
          .andWhere({ m_user_id: user_id })
          .count("* as total");
        const totalIzin = await MAbsen.query()
          .with("user")
          .whereBetween("created_at", [
            `${d.tanggal_awal}`,
            `${d.tanggal_akhir}`,
          ])
          .andWhere({ keterangan: "izin" })
          .andWhere({ m_user_id: user_id })
          .count("* as total");
        const totalAlpa =
          user_id.length -
          (totalHadir[0].total + totalSakit[0].total + totalIzin[0].total);

        return {
          siswa: siswa,
          ta: taa,
          sekolah: sekolah,
          // materiRombel: materiRombel,
          isUS,
          muatan,
          nilaiTinggiRendah,
          predikat: predikat,
          rombel: rombelData,
          ekskul: ekskul,
          totalHadir: totalHadir,
          totalSakit: totalSakit,
          totalIzin: totalIzin,
          totalAlpa: totalAlpa,
          tanggalDistinct: tanggalDistinct,
          dataNilaiMentah,
          // ulangan: ulangan,
        };
      })
    );
    return response.ok({
      result,
      sikapsosial,
      sikapspiritual,
    });
  }

  async detailBukuIndukRapor({
    response,
    request,
    auth,
    params: { rombel_id },
  }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const check = await MKategoriMapel.query()
      .where({ dihapus: 0 })
      .andWhere({ m_rombel_id: rombel_id })
      .first();

    const rombel = await MRombel.query()
      .with("jurusan")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ id: rombel_id })
      .andWhere({ dihapus: 0 })
      .fetch();

    // const materiRombel = await TkMateriRombel.query()
    //   .with("materi", (builder) => {
    //     builder.where({dihapus: 0}).with("mataPelajaran", (builder) => {
    //       builder.where({ dihapus: 0 });
    //     });
    //   })
    //   .where({ m_rombel_id: rombel_id })
    //   .pluck("m_materi_id");

    const count = await MJadwalMengajar.query()
      .select("id", "m_mata_pelajaran_id")
      .with("mataPelajaran")
      .distinct("m_mata_pelajaran_id")
      .where({ m_rombel_id: rombel_id })
      .whereNotNull("m_mata_pelajaran_id")
      .fetch();

    const predikat = await MPredikatNilai.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ predikat: "B" })
      .first();

    let kategori;
    let kategori1;
    let kategori2;
    if (!check) {
      kategori = await MKategoriMapel.create({
        nama: "Muatan Nasional",
        dihapus: 0,
        m_rombel_id: rombel_id,
      });
      kategori1 = await MKategoriMapel.create({
        nama: "Muatan Kewilayahan",
        dihapus: 0,
        m_rombel_id: rombel_id,
      });
      kategori2 = await MKategoriMapel.create({
        nama: "Muatan Peminatan Kejurusan",
        dihapus: 0,
        m_rombel_id: rombel_id,
      });
    }

    const kategoriMapel = await MKategoriMapel.query()
      .with("mapelRapor", (builder) => {
        builder
          .with("mataPelajaran")
          .where({ dihapus: 0 })
          .orderBy("urutan", "asc");
      })
      .where({ dihapus: 0 })
      .andWhere({ m_rombel_id: rombel_id })
      .fetch();

    const result = await Promise.all(
      count
        .toJSON()
        .filter(
          (d, idx, self) =>
            self.findIndex(
              (e) => e.m_mata_pelajaran_id == d.m_mata_pelajaran_id
            ) == idx
        )
        .map(async (d, idx) => {
          const checkTkMapel = await TkMapelRapor.query()
            .where({ m_mata_pelajaran_id: d ? d.m_mata_pelajaran_id : null })
            .whereIn(
              "m_kategori_mapel_id",
              kategoriMapel.toJSON().map((item) => item.id)
            )
            .first();

          if (!checkTkMapel) {
            if (d.mataPelajaran != null) {
              await TkMapelRapor.create({
                nama: d.mataPelajaran ? d.mataPelajaran.nama : "-",
                kkm2: d.mataPelajaran ? d.mataPelajaran.kkm : "0",
                m_mata_pelajaran_id: d ? d.m_mata_pelajaran_id : null,
                m_kategori_mapel_id: kategoriMapel.toJSON()[0].id,
                m_predikat_nilai_id: predikat ? predikat.id : "0",
                dihapus: 0,
                urutan: idx + 1,
              });
            }
          }
        })
    );
    // const mapelIds = [];
    // const noLoop = kategoriMapel.toJSON().mapelRapor.filter((d) => {
    //   if (!mapelIds.includes(d.mataPelajaran.id)) {
    //     mapelIds.push(d.mataPelajaran.id);
    //     return true;
    //   } else {
    //     return false;
    //   }
    // });

    return response.ok({
      rombel: rombel,
      kategoriMapel: kategoriMapel,
    });
  }

  async postKategoriMapel({ response, request, auth, params: { rombel_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, warna } = request.post();
    const rules = {
      nama: "required",
      warna: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "warna.required": "warma harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }
    // user_id = user_id.length ? user_id : [];
    await MKategoriMapel.create({
      nama,
      warna,
      dihapus: 0,
      m_rombel_id: rombel_id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putMapelRaporKKMAll({
    response,
    request,
    auth,
    params: { mapelRapor_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { kkm, kkm2 } = request.post();
    const mapelRaporGet = await TkMapelRapor.query()
      .where({ id: mapelRapor_id })
      .first();

    const mapelRapor = await TkMapelRapor.query()
      .where({ id: mapelRapor_id })
      .update({
        kkm2,
      });

    const mapel = await MMataPelajaran.query()
      .where({
        id: mapelRaporGet.m_mata_pelajaran_id,
      })
      .update({
        kkm,
      });

    if (!mapelRapor) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    if (!mapel) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async putMapelRapor({ response, request, auth, params: { mapelRapor_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { urutan, nama, kkm2, m_kategori_mapel_id } = request.post();

    if (urutan) {
      urutan.map((item) => {
        const kategoriId = item.kategori_id;
        item.mapel_ids.map(async (mapel, idx) => {
          await TkMapelRapor.query()
            .where({ id: mapel })
            .update({
              urutan: idx + 1,
              m_kategori_mapel_id: kategoriId,
            });
        });
      });
      return response.ok({
        message: messagePutSuccess,
      });
    }
    const mapelRapor = await TkMapelRapor.query()
      .where({ id: mapelRapor_id })
      .update({
        urutan,
        nama,
        kkm2,
        m_kategori_mapel_id,
        dihapus: 0,
      });

    if (!mapelRapor) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }
  async putMapelRaporKKM({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { kkm, mapel_id } = request.post();

    const mapel = await MMataPelajaran.query().where({ id: mapel_id }).update({
      kkm,
      dihapus: 0,
    });

    if (!mapel) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }
  async putKategoriMapel({
    response,
    request,
    auth,
    params: { kategoriMapel_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { nama, warna } = request.post();

    const kategoriMapel = await MKategoriMapel.query()
      .where({ id: kategoriMapel_id })
      .update({
        nama,
        warna,
        dihapus: 0,
      });

    if (!kategoriMapel) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteMapelRapor({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { mapelRapor_id } = request.post();

    const mapelRapor = await TkMapelRapor.query()
      .where({ id: mapelRapor_id })
      .update({
        dihapus: 1,
      });

    if (!mapelRapor) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }
  async deleteKategoriMapel({
    response,
    request,
    auth,
    params: { kategoriMapel_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const kategoriMapel = await MKategoriMapel.query()
      .where({ id: kategoriMapel_id })
      .update({
        dihapus: 1,
      });

    if (!kategoriMapel) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postPredikat({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      predikat,
      bb_pengetahuan,
      ba_pengetahuan,
      bb_keterampilan,
      ba_keterampilan,
      sikap,
    } = request.post();

    const rules = {
      predikat: "required",
      bb_pengetahuan: "required",
      ba_pengetahuan: "required",
      bb_keterampilan: "required",
      ba_keterampilan: "required",
      sikap: "required",
    };
    const message = {
      "keterangan.required": "Keterangan harus diisi",
      "predikat.required": "Predikat harus diisi",
      "bb_pengetahuan.required": "Batas bawah pengetahuan harus diisi",
      "ba_pengetahuan.required": "Batas atas pengetahuan harus diisi",
      "bb_keterampilan.required": "Batas bawah keterampilan harus diisi",
      "ba_keterampilan.required": "Batas atas keterampilan harus diisi",
      "sikap.required": "Sikap harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const predikatNilai = await MPredikatNilai.create({
      predikat,
      bb_pengetahuan,
      ba_pengetahuan,
      bb_keterampilan,
      ba_keterampilan,
      sikap,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPredikat({ response, request, auth, params: { predikat_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const {
      predikat,
      bb_pengetahuan,
      ba_pengetahuan,
      bb_keterampilan,
      ba_keterampilan,
      sikap,
    } = request.post();

    const rules = {
      predikat: "required",
      bb_pengetahuan: "required",
      ba_pengetahuan: "required",
      bb_keterampilan: "required",
      ba_keterampilan: "required",
      sikap: "required",
    };
    const message = {
      "keterangan.required": "Keterangan harus diisi",
      "predikat.required": "Predikat harus diisi",
      "bb_pengetahuan.required": "Batas bawah pengetahuan harus diisi",
      "ba_pengetahuan.required": "Batas atas pengetahuan harus diisi",
      "bb_keterampilan.required": "Batas bawah keterampilan harus diisi",
      "ba_keterampilan.required": "Batas atas keterampilan harus diisi",
      "sikap.required": "Sikap harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const predikatNilai = await MPredikatNilai.query()
      .where({ id: predikat_id })
      .update({
        predikat,
        bb_pengetahuan,
        ba_pengetahuan,
        bb_keterampilan,
        ba_keterampilan,
        sikap,
        dihapus: 0,
      });

    if (!predikatNilai) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePredikat({ response, request, auth, params: { predikat_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const predikat = await MPredikatNilai.query()
      .where({ id: predikat_id })
      .update({
        dihapus: 1,
      });

    if (!predikat) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  //rapor service

  async detailRombelRapor({
    response,
    request,
    auth,
    params: { user_id, mata_pelajaran_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);
    const siswa = await User.query()
      .with("anggotaRombel", (builder) => {
        builder.with("rombel").where({ dihapus: 0 });
      })
      .where({ id: user_id })
      .first();

    const mapelSingkat = await MMataPelajaran.query()
      .where({ id: mata_pelajaran_id })
      .first();

    const mapel = await MMataPelajaran.query()
      .with("user")
      .with("materi", (builder) => {
        builder.where({ tingkat: siswa.toJSON().anggotaRombel.rombel.tingkat });
        if (mapelSingkat.kelompok == "C") {
          if (siswa.toJSON().anggotaRombel.rombel.m_jurusan_id != null) {
            builder.andWhere({
              m_jurusan_id: siswa.toJSON().anggotaRombel.rombel.m_jurusan_id,
            });
          }
        }
      })
      .where({ id: mata_pelajaran_id })
      .first();

    const rekap = await TkRekapNilai.query()
      .with("rekapRombel", (builder) => {
        builder.with("rekap", (builder) => {
          builder
            .where({ tipe: "tugas" })
            .andWhere({ m_ta_id: ta.id })
            .andWhere({ dihapus: 0 })
            .andWhere({ m_materi_id: mapel.toJSON().materi.id });
        });
      })
      .where({ m_user_id: user_id })
      .fetch();

    const rekapUjian = await TkRekapNilai.query()
      .with("rekapRombel", (builder) => {
        builder.with("rekap", (builder) => {
          builder
            .where({ tipe: "ujian" })
            .andWhere({ teknik: null })
            .andWhere({ m_ta_id: ta.id })
            .andWhere({ dihapus: 0 })
            .andWhere({ m_materi_id: mapel.toJSON().materi.id });
        });
      })
      .where({ m_user_id: user_id })
      .fetch();

    const ujian = await MUjianSiswa.query()
      .with("nilaiUAS", (builder) => {
        builder.select("id", "nilai");
      })
      .with("nilaiUTS", (builder) => {
        builder.select("id", "nilai");
      })
      .where({ m_user_id: user_id })
      .andWhere({ m_mata_pelajaran_id: mapel.id })
      .first();

    const result = await Promise.all(
      rekap.toJSON().map(async (d) => {
        if (d.rekapRombel.rekap == null) {
          return;
        }
        return d;
      })
    );

    const data = result.filter((d) => d != null);

    let jumlah1 = 0;

    result
      .filter((d) => d != null)
      .forEach((d) => {
        jumlah1 += d.nilai;
      });

    const rata = jumlah1 / data.length;

    const result1 = await Promise.all(
      rekapUjian.toJSON().map(async (d) => {
        if (d.rekapRombel.rekap == null) {
          return;
        }
        return d;
      })
    );

    const dataUjian = result1.filter((d) => d != null);

    let jumlah = 0;

    result1
      .filter((d) => d != null)
      .forEach((d) => {
        jumlah += d.nilai;
      });

    const rataUjian = jumlah / dataUjian.length;

    let nilaiAkhir;
    if (ujian) {
      // const listNilai = [
      //   rataUjian,
      //   rata,
      //   ujian.toJSON().nilaiUAS ? ujian.toJSON().nilaiUAS?.nilai : null,
      //   ujian.toJSON().nilaiUTS ? ujian.toJSON().nilaiUTS?.nilai : null,
      // ];
      const nilaiPengetahuan1 = [rataUjian, rata];

      const nilaiSebelumAkhir = nilaiPengetahuan1.filter((nilai) => nilai)
        .length
        ? 2 *
          nilaiPengetahuan1.filter((nilai) => nilai).reduce((a, b) => a + b, 0)
        : 0;

      const nilaiUTS =
        ujian.toJSON().nilaiUTS != null ? ujian.toJSON().nilaiUTS?.nilai : null;

      const nilaiUAS =
        ujian.toJSON().nilaiUAS != null ? ujian.toJSON().nilaiUAS?.nilai : null;

      const listNilai = [nilaiSebelumAkhir, nilaiUTS, nilaiUAS];

      if (listNilai.filter((nilai) => nilai != null).length == 2) {
        nilaiAkhir = listNilai.filter((nilai) => nilai != null).length
          ? listNilai
              .filter((nilai) => nilai != null)
              .reduce((a, b) => a + b, 0) / 3
          : 0;
      } else if (listNilai.filter((nilai) => nilai != null).length == 3) {
        nilaiAkhir = listNilai.filter((nilai) => nilai != null).length
          ? listNilai
              .filter((nilai) => nilai != null)
              .reduce((a, b) => a + b, 0) / 4
          : 0;
      }

      await MUjianSiswa.query().where({ id: ujian.id }).update({
        nilai: nilaiAkhir,
      });
    } else {
      const listNilai = [rataUjian, rata];
      nilaiAkhir = listNilai.filter((nilai) => nilai).length
        ? listNilai.filter((nilai) => nilai).reduce((a, b) => a + b, 0) /
          listNilai.filter((nilai) => nilai).length
        : 0;
      await MUjianSiswa.create({
        m_ta_id: ta.id,
        m_user_id: user_id,
        m_mata_pelajaran_id: mapel.id,
        nilai: nilaiAkhir,
      });
    }
    // const dataUjian1 =
    //   result1.reduce((a, b) => a.nilai + b, 0) / result1.length;

    return response.ok({
      data,
      rata,
      dataUjian,
      rataUjian,
      nilaiAkhir,
      ujian,
      siswa,
      mapel,
    });
  }

  async detailRombelRaporKeterampilan({
    response,
    request,
    auth,
    params: { user_id, mata_pelajaran_id },
  }) {
    const siswaKeterampilan = await User.query()
      .with("anggotaRombel", (builder) => {
        builder.with("rombel").where({ dihapus: 0 });
      })
      .where({ id: user_id })
      .first();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    const mapelSingkat = await MMataPelajaran.query()
      .where({ id: mata_pelajaran_id })
      .first();

    const mapel = await MMataPelajaran.query()
      .with("user")
      .with("materi", (builder) => {
        builder.where({
          tingkat: siswaKeterampilan.toJSON().anggotaRombel.rombel.tingkat,
        });
        if (mapelSingkat.kelompok == "C") {
          builder.andWhere({
            m_jurusan_id:
              siswaKeterampilan.toJSON().anggotaRombel.rombel.m_jurusan_id,
          });
        }
      })
      .where({ id: mata_pelajaran_id })
      .first();

    const rekap = await TkRekapNilai.query()
      .with("rekapRombel", (builder) => {
        builder.with("rekap", (builder) => {
          builder
            .where({ tipe: "keterampilan" })
            .andWhere({ m_ta_id: ta.id })
            .andWhere({ dihapus: 0 })
            .andWhere({ m_materi_id: mapel.toJSON().materi.id });
        });
      })
      .where({ m_user_id: user_id })
      .fetch();
    const result = await Promise.all(
      rekap.toJSON().map(async (d) => {
        if (d.rekapRombel.rekap == null) {
          return;
        }
        return d;
      })
    );
    const dataKeterampilan = result.filter((d) => d != null);
    let jumlah0 = 0;
    result
      .filter((d) => d != null)
      .forEach((d) => {
        jumlah0 += d.nilai;
      });

    const rataData = dataKeterampilan.length
      ? jumlah0 / dataKeterampilan.length
      : 0;

    const rekapPraktik = await TkRekapNilai.query()
      .with("rekapRombel", (builder) => {
        builder.where({ dihapus: 0 }).with("rekap", (builder) => {
          builder
            .where({ tipe: "keterampilan" })
            .andWhere({ teknik: "praktik" })
            .andWhere({ m_ta_id: ta.id })
            .andWhere({ dihapus: 0 })
            .andWhere({ m_materi_id: mapel.toJSON().materi.id });
        });
      })
      .where({ m_user_id: user_id })
      .fetch();
    const result1 = await Promise.all(
      rekapPraktik.toJSON().map(async (d) => {
        if (d.rekapRombel.rekap == null) {
          return;
        }
        return d;
      })
    );
    let jumlah = 0;
    result1
      .filter((d) => d != null)
      .forEach((d) => {
        jumlah += d.nilai;
      });
    const data4 = result1.filter((d) => d != null);

    const praktik = jumlah / data4.length;

    const rekapProyek = await TkRekapNilai.query()
      .with("rekapRombel", (builder) => {
        builder.with("rekap", (builder) => {
          builder
            .where({ tipe: "keterampilan" })
            .andWhere({ teknik: "proyek" })
            .andWhere({ m_ta_id: ta.id })
            .andWhere({ dihapus: 0 })
            .andWhere({ m_materi_id: mapel.toJSON().materi.id });
        });
      })
      .where({ m_user_id: user_id })
      .fetch();
    const result2 = await Promise.all(
      rekapProyek.toJSON().map(async (d) => {
        if (d.rekapRombel.rekap == null) {
          return;
        }
        return d;
      })
    );
    let jumlah1 = 0;
    result2
      .filter((d) => d != null)
      .forEach((d) => {
        jumlah1 += d.nilai;
      });
    const data1 = result2.filter((d) => d != null);
    const proyek = jumlah1 / data1.length;

    const rekapPortofolio = await TkRekapNilai.query()
      .with("rekapRombel", (builder) => {
        builder.with("rekap", (builder) => {
          builder
            .where({ tipe: "keterampilan" })
            .andWhere({ teknik: "portofolio" })
            .andWhere({ m_ta_id: ta.id })
            .andWhere({ dihapus: 0 })
            .andWhere({ m_materi_id: mapel.toJSON().materi.id });
        });
      })
      .where({ m_user_id: user_id })
      .fetch();
    const result3 = await Promise.all(
      rekapPortofolio.toJSON().map(async (d) => {
        if (d.rekapRombel.rekap == null) {
          return;
        }
        return d;
      })
    );
    let jumlah2 = 0;
    result3
      .filter((d) => d != null)
      .forEach((d) => {
        jumlah2 += d.nilai;
      });
    const data2 = result3.filter((d) => d != null);
    const portofolio = jumlah2 / data2.length;

    const rekapProduk = await TkRekapNilai.query()
      .with("rekapRombel", (builder) => {
        builder.with("rekap", (builder) => {
          builder
            .where({ tipe: "keterampilan" })
            .andWhere({ teknik: "produk" })
            .andWhere({ m_ta_id: ta.id })
            .andWhere({ dihapus: 0 })
            .andWhere({ m_materi_id: mapel.toJSON().materi.id });
        });
      })
      .where({ m_user_id: user_id })
      .fetch();
    const result4 = await Promise.all(
      rekapProduk.toJSON().map(async (d) => {
        if (d.rekapRombel.rekap == null) {
          return;
        }
        return d;
      })
    );
    let jumlah3 = 0;
    result4
      .filter((d) => d != null)
      .forEach((d) => {
        jumlah3 += d.nilai;
      });
    const data3 = result4.filter((d) => d != null);
    const produk = jumlah3 / data3.length;

    const nilaiAkhirKeterampilan = await MUjianSiswa.query()
      .where({ m_user_id: user_id })
      .andWhere({
        m_mata_pelajaran_id: mapel.id,
      })
      .first();

    if (nilaiAkhirKeterampilan) {
      await MUjianSiswa.query()
        .where({ id: nilaiAkhirKeterampilan.id })
        .update({
          nilai_keterampilan: rataData,
        });
    } else {
      await MUjianSiswa.create({
        m_ta_id: ta.id,
        m_user_id: user_id,
        m_mata_pelajaran_id: mapel.id,
        nilai_keterampilan: rataData,
      });
    }

    return response.ok({
      dataKeterampilan,
      rataData,
      siswaKeterampilan,
      proyek,
      praktik,
      portofolio,
      produk,
      mapel,
      nilaiAkhirKeterampilan,
    });
  }

  async detailRaporSiswa({
    response,
    request,
    auth,
    params: { rombel_id },
    params: { user_id },
  }) {
    const user = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const sikapsosial = await MSikapSosial.query().fetch();
    const sikapspiritual = await MSikapSpiritual.query().fetch();
    const ta = await Mta.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ aktif: 1 })
      .andWhere({ dihapus: 0 })
      .first();

    const tanggalDistinct = await Database.raw(
      "SELECT DISTINCT DATE_FORMAT(created_at, '%Y-%m-%d') as tanggalDistinct from m_absen WHERE created_at BETWEEN ? AND  ?",
      [`${ta.tanggal_awal}`, `${ta.tanggal_akhir}`]
    );

    const siswa = await User.query()
      .with("profil")
      .with("keteranganRapor", (builder) => {
        builder.where({ dihapus: 0 }).andWhere({ m_ta_id: ta.id });
      })
      .with("keteranganPkl", (builder) => {
        builder.where({ dihapus: 0 }).andWhere({ m_ta_id: ta.id });
      })
      .with("raporEkskul", (builder) => {
        builder.with("rombel", (builder) => {
          builder.select("id", "nama");
        });
      })
      .with("prestasi", (builder) => {
        builder
          .with("tingkatPrestasi")
          .where({ dihapus: 0 })
          .andWhere({ m_ta_id: ta.id });
      })
      .with("sikap", (builder) => {
        builder.where({ dihapus: 0 }).andWhere({ m_ta_id: ta.id });
      })
      .where({ id: user_id })
      .andWhere({ dihapus: 0 })
      .first();

    const muatan = await MKategoriMapel.query()
      .with("mapelRapor", (builder) => {
        builder
          .with("mataPelajaran", (builder) => {
            builder.with("nilaiIndividu", (builder) => {
              builder.where({ m_user_id: user_id });
            });
          })
          .where({ dihapus: 0 })
          .orderBy("urutan", "asc");
      })
      .where({ dihapus: 0 })
      .andWhere({ m_rombel_id: rombel_id })
      .fetch();

    const materiRombel = await TkMateriRombel.query()
      .with("materi", (builder) => {
        builder.with("mataPelajaran");
      })
      .where({ m_rombel_id: rombel_id })
      .fetch();

    const predikat = await MPredikatNilai.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    // const data = await MJadwalMengajar.query()
    //   .where({ id: jadwal_mengajar_id })
    //   .first();

    // if (data) {
    const kkm = await MKategoriMapel.query()
      .with("mapelRapor", (builder) => {
        builder.with("mataPelajaran");
      })
      .where({ dihapus: 0 })
      .andWhere({ m_rombel_id: rombel_id })
      .fetch();

    const totalMapel = await TkMateriRombel.query()
      .where({ m_rombel_id: rombel_id })
      .countDistinct("m_materi_id as total");
    // }

    const rombel = await MRombel.query()
      .with("user")
      .with("anggotaRombel", (builder) => {
        builder
          .with("user", async (builder) => {
            builder
              .with("nilaiUjian")
              .withCount(
                "nilaiSemuaUjian as jumlahMapelDikerjakan",
                (builder) => {
                  builder.andWhere({ m_ta_id: ta.id });
                }
              )
              .with("nilaiSemuaUjian", (builder) => {
                builder
                  .select(
                    // "m_ta_id",
                    "m_user_id",
                    "m_mata_pelajaran_id",
                    "nilai",
                    "nilai_keterampilan"
                  )
                  // .where(
                  //   "nilai",
                  //   "<",
                  //   `${kkm.toJSON().mataPelajaran.kkm}`
                  // )
                  .where({ m_ta_id: ta.id });
              });
          })
          .where({ dihapus: 0 });
      })
      .where({ id: rombel_id })
      .first();

    const ekskul = await MRombel.query()
      .with("anggotaRombel", (builder) => {
        builder.where({ dihapus: 0 }).andWhere({ m_user_id: user_id });
      })
      .where({ kelompok: "ekskul" })
      .andWhere({ dihapus: 0 })
      .fetch();

    const totalHadir = await MAbsen.query()
      .with("user")
      .whereBetween("created_at", [`${ta.tanggal_awal}`, `${ta.tanggal_akhir}`])
      .andWhere({ keterangan: "hadir" })
      .andWhere({ m_user_id: user_id })
      .count("* as total");
    const totalSakit = await MAbsen.query()
      .with("user")
      .whereBetween("created_at", [`${ta.tanggal_awal}`, `${ta.tanggal_akhir}`])
      .andWhere({ keterangan: "sakit" })
      .andWhere({ m_user_id: user_id })
      .count("* as total");
    const totalIzin = await MAbsen.query()
      .with("user")
      .whereBetween("created_at", [`${ta.tanggal_awal}`, `${ta.tanggal_akhir}`])
      .andWhere({ keterangan: "izin" })
      .andWhere({ m_user_id: user_id })
      .count("* as total");
    const totalAlpa =
      user_id.length -
      (totalHadir[0].total + totalSakit[0].total + totalIzin[0].total);

    return response.ok({
      siswa: siswa,
      ta: ta,
      sekolah: sekolah,
      materiRombel: materiRombel,
      predikat: predikat,
      rombel: rombel,
      ekskul: ekskul,
      totalHadir: totalHadir,

      // totalSakit: totalSakit,
      // totalIzin: totalIzin,
      // totalAlpa: totalAlpa,
      totalSakit: [
        {
          total: siswa.toJSON().keteranganRapor
            ? siswa.toJSON().keteranganRapor.sakit
            : 0,
        },
      ],
      totalIzin: [
        {
          total: siswa.toJSON().keteranganRapor
            ? siswa.toJSON().keteranganRapor.izin
            : 0,
        },
      ],
      totalAlpa: siswa.toJSON().keteranganRapor
        ? siswa.toJSON().keteranganRapor.alpa
        : 0,
      tanggalDistinct: tanggalDistinct,
      muatan,
      totalMapel,
      kkm,
      sikapsosial,
      sikapspiritual,
    });
  }

  //Tambah Ekskul
  async postRaporEkskul({
    response,
    request,
    auth,
    params: { rombel_id },
    params: { user_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { keterangan } = request.post();
    const rules = {
      keterangan: "required",
    };
    const message = {
      "keterangan.required": "Keterangan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const raporEkskul = await MRaporEkskul.create({
      m_rombel_id: rombel_id,
      keterangan,
      status: 1,
      m_user_id: user_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putRaporEkskul({ response, request, auth, params: { ekskul_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { keterangan } = request.post();
    const rules = {
      keterangan: "required",
    };
    const message = {
      "keterangan.required": "Keterangan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const raporEksul = await MRaporEkskul.query()
      .where({ id: ekskul_id })
      .update({
        keterangan,
        dihapus: 0,
      });

    if (!raporEksul) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async postKeteranganRapor({ response, request, auth, params: { user_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);
    const user = await auth.getUser();

    const { catatan, kelulusan } = request.post();
    const rules = {
      kelulusan: "required",
    };
    const message = {
      "kelulusan.required": "Kelulusan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const keteranganRapor = await MKeteranganRapor.create({
      catatan,
      kelulusan,
      m_ta_id: ta.id,
      m_user_id: user_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putKeteranganRapor({ response, request, auth, params: { user_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { catatan, kelulusan, sakit, izin, alpa } = request.post();
    const rules = {
      kelulusan: "required",
    };
    const message = {
      "kelulusan.required": "Kekelulusan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const keteranganRapor = await MKeteranganRapor.query()
      .where({ m_user_id: user_id })
      .update({
        catatan,
        kelulusan,
        dihapus: 0,
      });

    await MKeteranganRapor.query().where({ m_user_id: user_id }).update({
      sakit,
      izin,
      alpa,
    });

    if (!keteranganRapor) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteKeteranganRapor({
    response,
    request,
    auth,
    params: { user_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const keteranganrapor = await MKeteranganRapor.query()
      .where({ id: user_id })
      .update({
        dihapus: 1,
      });

    if (!keteranganrapor) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postKeteranganPkl({ response, request, auth, params: { user_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const { namamitra, tanggal_mulai, tanggal_selesai, keterangan } =
      request.post();

    const rules = {
      namamitra: "required",
      tanggal_mulai: "required",
      tanggal_selesai: "required",
      keterangan: "required",
    };
    const message = {
      "namamitra.required": "Nama Perusahaan harus diisi",
      "tanggal_mulai.required": "Tanggal Mulai harus diisi",
      "tanggal_selesai.required": "Tanggal Selesai harus benar",
      "keterangan.required": "Keterangan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const date1 = moment(`${tanggal_mulai}`);
    const date2 = moment(`${tanggal_selesai}`);
    const diff = date2.diff(date1);

    const lama = moment(diff).format(`MM`);

    const keteranganPkl = await MKeteranganPkl.create({
      namamitra,
      tanggal_mulai,
      tanggal_selesai,
      keterangan,
      lamanya: lama,
      m_user_id: user_id,
      m_ta_id: ta.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putKeteranganPkl({ response, request, auth, params: { pkl_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { namamitra, tanggal_mulai, tanggal_selesai, keterangan } =
      request.post();
    const rules = {
      namamitra: "required",
      tanggal_mulai: "required",
      tanggal_selesai: "required",
      keterangan: "required",
    };
    const message = {
      "namamitra.required": "Nama Perusahaan harus diisi",
      "tanggal_mulai.required": "Tanggal Mulai harus diisi",
      "tanggal_selesai.required": "Tanggal Selesai harus benar",
      "keterangan.required": "Keterangan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const date1 = moment(`${tanggal_mulai}`);
    const date2 = moment(`${tanggal_selesai}`);
    const diff = date2.diff(date1);

    const lama = moment(diff).format(`MM`);
    const keteranganPkl = await MKeteranganPkl.query()
      .where({ id: pkl_id })
      .update({
        namamitra,
        tanggal_mulai,
        tanggal_selesai,
        lamanya: lama,
        keterangan,
        dihapus: 0,
      });

    if (!keteranganPkl) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }
  async deleteKeteranganPkl({ response, request, auth, params: { pkl_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const keteranganpkl = await MKeteranganPkl.query()
      .where({ id: pkl_id })
      .update({
        dihapus: 1,
      });

    if (!keteranganpkl) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async downloadGelombangPPDB({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const gelombang = await MGelombangPpdb.query()
      .with("pendaftar", (builder) => {
        builder
          .with("user", (builder) => {
            builder.with("profil");
          })
          .with("jurusan1")
          .with("jurusan2")
          .with("jurusan3")
          .with("jurusan4")
          .with("jurusan5");
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .fetch();

    // return gelombang;

    // return gelombang;
    // const monthNames = [
    //   "January",
    //   "February",
    //   "March",
    //   "April",
    //   "May",
    //   "June",
    //   "July",
    //   "August",
    //   "September",
    //   "October",
    //   "November",
    //   "December",
    // ];
    // const dateObj = new Date();
    // const month = monthNames[dateObj.getMonth()];
    // const day = String(dateObj.getDate()).padStart(2, "0");
    // const year = dateObj.getFullYear();
    // const output = dat + "," + month + "," + year;
    let workbook = new Excel.Workbook();

    await Promise.all(
      gelombang.toJSON().map(async (d, idx) => {
        let worksheet = workbook.addWorksheet(`${idx + 1}.${d.nama}`);
        worksheet.getCell("A1").value = d.nama;
        worksheet.getCell("A2").value = sekolah.nama;
        worksheet.getCell("A3").value = ta.tahun;
        worksheet.getCell("A5").value = `dibuka : ${d.waktuawal}`;
        worksheet.getCell("A6").value = `ditutup : ${d.waktuakhir}`;
        worksheet.getCell("A7").value = `Keterangan : ${d.keterangan}`;
        worksheet.getCell(
          "A9"
        ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;

        worksheet.getColumn("A").width = 28;
        worksheet.getColumn("B").width = 14;
        worksheet.getColumn("C").width = 8;
        worksheet.getColumn("D").width = 8.5;
        worksheet.getColumn("E").width = 9;
        worksheet.getColumn("F").width = 14;
        worksheet.getColumn("G").width = 10;
        worksheet.getColumn("H").width = 8;
        worksheet.getColumn("I").width = 11;

        await Promise.all(
          d.pendaftar.map(async (anggota, idx) => {
            // add column headers
            if (anggota.dataJurusan == true) {
              worksheet.getRow(10).values = [
                "No",
                "Nama",
                "Whatsapp",
                "NIPD",
                "Gender",
                "NIPD",
                "Tempat Lahir",
                "Tanggal Lahir",
                "Agama",
                "Alamat",
                "Kelurahan",
                "Kecamatan",
                "Kode Pos",
                "Email",
                "Data Ayah",
                "",
                "Data Ibu",
                "",
                "Data Wali",
                "",
                "Kebutuhan Khusus",
                "Sekolah Asal",
                "Berat Badan",
                "Tinggi Badan",
                "Bank",
                "Norek",
                "Nama Pemilih",
                "Nominal",
                "Bukti",
                "Diverifikasi",
                "Jurusan1",
                "Jurusan2",
                "Jurusan3",
                "Jurusan4",
                "Jurusan5",
              ];
              worksheet.getRow(11).values = [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "Nama",
                "Pekerjaan",
                "Nama",
                "Pekerjaan",
                "Nama",
                "Pekerjaan",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
              ];
              worksheet.columns = [
                { key: "no" },
                { key: "user" },
                { key: "whatsapp" },
                { key: "nipd" },
                { key: "gender" },
                { key: "nisn" },
                { key: "tempat_lahir" },
                { key: "tanggal_lahir" },
                { key: "agama" },
                { key: "alamat" },
                { key: "kelurahan" },
                { key: "kecamatan" },
                { key: "kode_pos" },
                { key: "email" },
                { key: "nama_ayah" },
                { key: "pekerjaan_ayah" },
                { key: "nama_ibu" },
                { key: "pekerjaan_ibu" },
                { key: "nama_wali" },
                { key: "pekerjaan_wali" },
                { key: "kebutuhan_khusus" },
                { key: "sekolah_asal" },
                { key: "berat_badan" },
                { key: "tinggi_badan" },
                { key: "bank" },
                { key: "norek" },
                { key: "nama_pemilik" },
                { key: "nominal" },
                { key: "bukti" },
                { key: "diverifikasi" },
                { key: "jurusan1" },
                { key: "jurusan2" },
                { key: "jurusan3" },
                { key: "jurusan4" },
                { key: "jurusan5" },
              ];

              // Add row using key mapping to columns
              let row = worksheet.addRow({
                no: `${idx + 1}`,
                user: anggota.user ? anggota.user.nama : "-",
                whatsapp: anggota.user ? anggota.user.whatsapp : "-",
                nipd: anggota.user.profil ? anggota.user.profil.nipd : "-",
                gender: anggota.user ? anggota.user.gender : "-",
                nisn: anggota.user.profil ? anggota.user.profil.nisn : "-",
                tempat_lahir: anggota.user.profil
                  ? anggota.user.profil.tempat_lahir
                  : "-",
                tanggal_lahir: anggota.user.profil
                  ? anggota.user.profil.tanggal_lahir
                  : "-",
                agama: anggota.user.profil ? anggota.user.profil.agama : "-",
                alamat: anggota.user.profil ? anggota.user.profil.alamat : "-",
                kelurahan: anggota.user.profil
                  ? anggota.user.profil.regency_id
                  : "-",
                kecamatan: anggota.user.profil
                  ? anggota.user.profil.district_id
                  : "-",
                kode_pos: anggota.user.profil
                  ? anggota.user.profil.kodepos
                  : "-",
                email: anggota.user.profil ? anggota.user.email : "-",
                nama_ayah: anggota.user.profil
                  ? anggota.user.profil.nama_ayah
                  : "-",
                pekerjaan_ayah: anggota.user.profil
                  ? anggota.user.profil.pekerjaan_ayah
                  : "-",
                nama_ibu: anggota.user.profil
                  ? anggota.user.profil.nama_ibu
                  : "-",
                pekerjaan_ibu: anggota.user.profil
                  ? anggota.user.profil.pekerjaan_ibu
                  : "-",
                nama_wali: anggota.user.profil
                  ? anggota.user.profil.nama_wali
                  : "-",
                pekerjaan_wali: anggota.user.profil
                  ? anggota.user.profil.pekerjaan_wali
                  : "-",
                kebutuhan_khusus: anggota.user.profil
                  ? anggota.user.profil.disabilitas
                  : "-",
                sekolah_asal: anggota.user.profil
                  ? anggota.user.profil.asal_sekolah
                  : "-",
                berat_badan: anggota.user.profil ? anggota.user.profil.bb : "-",
                tinggi_badan: anggota.user.profil
                  ? anggota.user.profil.tb
                  : "-",
                bank: anggota ? anggota.bank : "-",
                norek: anggota ? anggota.norek : "-",
                nama_pemilik: anggota ? anggota.nama_pemilik : "-",
                nominal: anggota ? anggota.nominal : "-",
                bukti: anggota ? anggota.bukti : "-",
                diverifikasi: anggota ? anggota.diverifikasi : "-",
                jurusan1: anggota.jurusan1 ? anggota.jurusan1.nama : "-",
                jurusan2: anggota.jurusan2 ? anggota.jurusan2.nama : "-",
                jurusan3: anggota.jurusan3 ? anggota.jurusan3.nama : "-",
                jurusan4: anggota.jurusan4 ? anggota.jurusan4.nama : "-",
                jurusan5: anggota.jurusan5 ? anggota.jurusan5.nama : "-",
              });

              worksheet.addConditionalFormatting({
                ref: `A10:AI11`,
                rules: [
                  {
                    type: "expression",
                    formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                    style: {
                      border: {
                        top: { style: "thin" },
                        left: { style: "thin" },
                        bottom: { style: "thin" },
                        right: { style: "thin" },
                      },
                      font: {
                        name: "Times New Roman",
                        family: 4,
                        size: 14,
                        bold: true,
                      },
                      fill: {
                        type: "pattern",
                        pattern: "solid",
                        bgColor: {
                          argb: "C0C0C0",
                          fgColor: { argb: "C0C0C0" },
                        },
                      },
                      alignment: {
                        vertical: "middle",
                        horizontal: "center",
                      },
                    },
                  },
                ],
              });
              worksheet.addConditionalFormatting({
                ref: `A${(idx + 1) * 1 + 11}:AI${(idx + 1) * 1 + 11}`,
                rules: [
                  {
                    type: "expression",
                    formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                    style: {
                      border: {
                        top: { style: "thin" },
                        left: { style: "thin" },
                        bottom: { style: "thin" },
                        right: { style: "thin" },
                      },
                      font: {
                        name: "Times New Roman",
                        family: 4,
                        size: 11,
                        // bold: true,
                      },
                      alignment: {
                        vertical: "middle",
                        horizontal: "left",
                      },
                    },
                  },
                ],
              });
            } else {
              worksheet.getRow(10).values = [
                "No",
                "Nama",
                "Whatsapp",
                "NIPD",
                "Gender",
                "NIPD",
                "Tempat Lahir",
                "Tanggal Lahir",
                "Agama",
                "Alamat",
                "Kelurahan",
                "Kecamatan",
                "Kode Pos",
                "Email",
                "Data Ayah",
                "",
                "Data Ibu",
                "",
                "Data Wali",
                "",
                "Kebutuhan Khusus",
                "Sekolah Asal",
                "Berat Badan",
                "Tinggi Badan",
                "Bank",
                "Norek",
                "Nama Pemilih",
                "Nominal",
                "Bukti",
                "Diverifikasi",
              ];
              worksheet.columns = [
                { key: "no" },
                { key: "user" },
                { key: "whatsapp" },
                { key: "nipd" },
                { key: "gender" },
                { key: "nisn" },
                { key: "tempat_lahir" },
                { key: "tanggal_lahir" },
                { key: "agama" },
                { key: "alamat" },
                { key: "kelurahan" },
                { key: "kecamatan" },
                { key: "kode_pos" },
                { key: "email" },
                { key: "nama_ayah" },
                { key: "pekerjaan_ayah" },
                { key: "nama_ibu" },
                { key: "pekerjaan_ibu" },
                { key: "nama_wali" },
                { key: "pekerjaan_wali" },
                { key: "kebutuhan_khusus" },
                { key: "sekolah_asal" },
                { key: "berat_badan" },
                { key: "tinggi_badan" },
                { key: "bank" },
                { key: "norek" },
                { key: "nama_pemilik" },
                { key: "nominal" },
                { key: "bukti" },
                { key: "diverifikasi" },
              ];

              // Add row using key mapping to columns
              let row = worksheet.addRow({
                no: `${idx + 1}`,
                user: anggota.user ? anggota.user.nama : "-",
                whatsapp: anggota.user ? anggota.user.whatsapp : "-",
                nipd: anggota.user.profil ? anggota.user.profil.nipd : "-",
                gender: anggota.user ? anggota.user.gender : "-",
                nisn: anggota.user.profil ? anggota.user.profil.nisn : "-",
                tempat_lahir: anggota.user.profil
                  ? anggota.user.profil.tempat_lahir
                  : "-",
                tanggal_lahir: anggota.user.profil
                  ? anggota.user.profil.tanggal_lahir
                  : "-",
                agama: anggota.user.profil ? anggota.user.profil.agama : "-",
                alamat: anggota.user.profil ? anggota.user.profil.alamat : "-",
                kelurahan: anggota.user.profil
                  ? anggota.user.profil.regency_id
                  : "-",
                kecamatan: anggota.user.profil
                  ? anggota.user.profil.district_id
                  : "-",
                kode_pos: anggota.user.profil
                  ? anggota.user.profil.kodepos
                  : "-",
                email: anggota.user.profil ? anggota.user.email : "-",
                nama_ayah: anggota.user.profil
                  ? anggota.user.profil.nama_ayah
                  : "-",
                pekerjaan_ayah: anggota.user.profil
                  ? anggota.user.profil.pekerjaan_ayah
                  : "-",
                nama_ibu: anggota.user.profil
                  ? anggota.user.profil.nama_ibu
                  : "-",
                pekerjaan_ibu: anggota.user.profil
                  ? anggota.user.profil.pekerjaan_ibu
                  : "-",
                nama_wali: anggota.user.profil
                  ? anggota.user.profil.nama_wali
                  : "-",
                pekerjaan_wali: anggota.user.profil
                  ? anggota.user.profil.pekerjaan_wali
                  : "-",
                kebutuhan_khusus: anggota.user.profil
                  ? anggota.user.profil.disabilitas
                  : "-",
                sekolah_asal: anggota.user.profil
                  ? anggota.user.profil.asal_sekolah
                  : "-",
                berat_badan: anggota.user.profil ? anggota.user.profil.bb : "-",
                tinggi_badan: anggota.user.profil
                  ? anggota.user.profil.tb
                  : "-",
                bank: anggota ? anggota.bank : "-",
                norek: anggota ? anggota.norek : "-",
                nama_pemilik: anggota ? anggota.nama_pemilik : "-",
                nominal: anggota ? anggota.nominal : "-",
                bukti: anggota ? anggota.bukti : "-",
                diverifikasi: anggota ? anggota.diverifikasi : "-",
              });

              worksheet.addConditionalFormatting({
                ref: `A10:AD11`,
                rules: [
                  {
                    type: "expression",
                    formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                    style: {
                      border: {
                        top: { style: "thin" },
                        left: { style: "thin" },
                        bottom: { style: "thin" },
                        right: { style: "thin" },
                      },
                      font: {
                        name: "Times New Roman",
                        family: 4,
                        size: 14,
                        bold: true,
                      },
                      fill: {
                        type: "pattern",
                        pattern: "solid",
                        bgColor: {
                          argb: "C0C0C0",
                          fgColor: { argb: "C0C0C0" },
                        },
                      },
                      alignment: {
                        vertical: "middle",
                        horizontal: "center",
                      },
                    },
                  },
                ],
              });
              worksheet.addConditionalFormatting({
                ref: `A${(idx + 1) * 1 + 11}:AD${(idx + 1) * 1 + 11}`,
                rules: [
                  {
                    type: "expression",
                    formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                    style: {
                      border: {
                        top: { style: "thin" },
                        left: { style: "thin" },
                        bottom: { style: "thin" },
                        right: { style: "thin" },
                      },
                      font: {
                        name: "Times New Roman",
                        family: 4,
                        size: 11,
                        // bold: true,
                      },
                      alignment: {
                        vertical: "middle",
                        horizontal: "left",
                      },
                    },
                  },
                ],
              });
            }
          })
        );
        worksheet.mergeCells(`A1:AI1`);
        worksheet.mergeCells(`A2:AI2`);
        worksheet.mergeCells(`A3:AI3`);
        worksheet.mergeCells(`A5:AI5`);
        worksheet.mergeCells(`A6:AI6`);
        worksheet.mergeCells(`A7:AI7`);
        worksheet.mergeCells(`A10:A11`);
        worksheet.mergeCells(`B10:B11`);
        worksheet.mergeCells(`C10:C11`);
        worksheet.mergeCells(`D10:D11`);
        worksheet.mergeCells(`E10:E11`);
        worksheet.mergeCells(`F10:F11`);
        worksheet.mergeCells(`G10:G11`);
        worksheet.mergeCells(`H10:H11`);
        worksheet.mergeCells(`I10:I11`);
        worksheet.mergeCells(`J10:J11`);
        worksheet.mergeCells(`K10:K11`);
        worksheet.mergeCells(`L10:L11`);
        worksheet.mergeCells(`M10:M11`);
        worksheet.mergeCells(`N10:N11`);
        worksheet.mergeCells(`O10:P10`);
        worksheet.mergeCells(`Q10:R10`);
        worksheet.mergeCells(`S10:T10`);
        worksheet.mergeCells(`U10:U11`);
        worksheet.mergeCells(`V10:V11`);
        worksheet.mergeCells(`W10:W11`);
        worksheet.mergeCells(`X10:X11`);
        worksheet.mergeCells(`Y10:Y11`);
        worksheet.mergeCells(`Z10:Z11`);
        worksheet.mergeCells(`AA10:AA11`);
        worksheet.mergeCells(`AB10:AB11`);
        worksheet.mergeCells(`AC10:AC11`);
        worksheet.mergeCells(`AD10:AD11`);
        worksheet.mergeCells(`AE10:AE11`);
        worksheet.mergeCells(`AF10:AF11`);
        worksheet.mergeCells(`AG10:AG11`);
        worksheet.mergeCells(`AH10:AH11`);
        worksheet.mergeCells(`AI10:AI11`);
        worksheet.addConditionalFormatting({
          ref: "A1:I3",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 16,
                  bold: true,
                },
                // fill: {
                //   type: "pattern",
                //   pattern: "solid",
                //   bgColor: { argb: "0000FF", fgColor: { argb: "0000FF" } },
                // },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
              },
            },
          ],
        });
      })
    );

    let namaFile = `/uploads/rekap-Gelombang PPDB ${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async downloadAnalisisNilai({
    response,
    request,
    auth,
    params: { jadwal_mengajar_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const jadwalMengajar = await MJadwalMengajar.query()
      .with("mataPelajaran", (builder) => {
        builder.with("user");
      })
      .with("rombel")
      .where({ id: jadwal_mengajar_id })
      .first();

    const userIds = await MAnggotaRombel.query()
      .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
      .andWhere({ dihapus: 0 })
      .pluck("m_user_id");

    const timelineIds = await MTimeline.query()
      .where({ dihapus: 0 })
      .andWhere({ tipe: "tugas" })
      .andWhere({ m_rombel_id: jadwalMengajar.toJSON().m_rombel_id })
      .andWhere({
        m_user_id: jadwalMengajar.toJSON().mataPelajaran.m_user_id,
      })
      .ids();

    const analisisNilai = await User.query()
      .withCount("tugasnilai as kkm", (builder) => {
        builder.where(
          "nilai",
          "<",
          `${jadwalMengajar.toJSON().mataPelajaran.kkm}`
        );
      })
      .with("tugas", (builder) => {
        builder.whereIn("m_timeline_id", timelineIds);
      })
      .whereIn("id", userIds)
      .fetch();

    let workbook = new Excel.Workbook();

    let worksheet = workbook.addWorksheet(`Analisis Nilai`);
    worksheet.getCell("A1").value = sekolah.nama;
    worksheet.getCell("A2").value = jadwalMengajar.toJSON().rombel.nama;
    worksheet.getCell("A3").value = jadwalMengajar.toJSON().mataPelajaran.nama;
    worksheet.getCell("A4").value = ta.tahun;

    worksheet.getCell(
      "A6"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.mergeCells(`A1:J1`);
    worksheet.mergeCells(`A2:J2`);
    worksheet.mergeCells(`A3:J3`);
    worksheet.mergeCells(`A4:J4`);
    worksheet.mergeCells(`A6:J6`);
    worksheet.getColumn("A").width = 28;
    worksheet.getColumn("B").width = 14;
    worksheet.getColumn("C").width = 8;
    worksheet.getColumn("D").width = 8.5;
    worksheet.getColumn("E").width = 9;
    worksheet.getColumn("F").width = 14;
    worksheet.getColumn("G").width = 10;
    worksheet.getColumn("H").width = 8;
    worksheet.getColumn("I").width = 11;
    worksheet.addConditionalFormatting({
      ref: "A1:I3",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "0000FF", fgColor: { argb: "0000FF" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
          },
        },
      ],
    });

    // add column headers
    await Promise.all(
      analisisNilai.toJSON().map(async (d, idx) => {
        const ratarata2 = await TkTimeline.query()
          .where({ m_user_id: `${d.id}` })
          .whereIn("m_timeline_id", timelineIds)
          .getSum("nilai");

        worksheet.getRow(7).values = ["No", "Nama", "Rata-Rata", "Dibawah KKM"];
        worksheet.columns = [
          { key: "no" },
          { key: "user" },
          { key: "ratarata" },
          { key: "dibawahkkm" },
        ];
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          user: d ? d.nama : "-",
          ratarata: `${
            ratarata2 ? (ratarata2 / d.tugas.length).toFixed(2) : "-"
          }`,
          dibawahkkm: `${d.__meta__.kkm} Tugas`,
        });

        // const row = worksheet.getRow(8);
        await Promise.all(
          d.tugas.map(async (e, nox) => {
            worksheet.getColumn([`${(nox + 1) * 1 + 4}`]).values = [
              ``,
              ``,
              ``,
              ``,
              ``,
              ``,
              `Tugas${nox + 1}`,
              ,
            ];
            row.getCell([`${(nox + 1) * 1 + 4}`]).value = `${
              e.nilai ? e.nilai : "-"
            }`;
            row.getCell([`${(nox + 1) * 1 + 4}`]).border = {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            };
            worksheet.getColumn([`${(nox + 1) * 1 + 4}`]).fill = {
              type: "pattern",
              pattern: "solid",
              bgColor: {
                argb: "C0C0C0",
                fgColor: { argb: "C0C0C0" },
              },
            };
            // worksheet.getCell(`E${(nox + 1) * 1 + 8}`).value = e.nilai;
            // worksheet.columns = [
            //   { key: `tugas${nox+1}` },
            // ];

            worksheet.addConditionalFormatting({
              ref: `${(nox + 1) * 1 + 7}`,
              rules: [
                {
                  type: "expression",
                  formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                  style: {
                    border: {
                      top: { style: "thin" },
                      left: { style: "thin" },
                      bottom: { style: "thin" },
                      right: { style: "thin" },
                    },
                    font: {
                      name: "Times New Roman",
                      family: 4,
                      size: 11,
                      // bold: true,
                    },
                    alignment: {
                      vertical: "middle",
                      horizontal: "left",
                    },
                  },
                },
              ],
            });

            // // Add row using key mapping to columns
            // let row = worksheet.addRow ({
            //   tugas1: e ? e.nilai : "-",
            //   tugas2: e ? e.nilai : "-",
            //   tugas3: e ? e.nilai : "-",
            //   tugas4: e ? e.nilai : "-",
            //   tugas5: e ? e.nilai : "-",
            // });
          })
        );

        worksheet.addConditionalFormatting({
          ref: `A7:J7`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 14,
                  bold: true,
                },
                fill: {
                  type: "pattern",
                  pattern: "solid",
                  bgColor: {
                    argb: "C0C0C0",
                    fgColor: { argb: "C0C0C0" },
                  },
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
              },
            },
          ],
        });

        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 7}:D${(idx + 1) * 1 + 7}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
              },
            },
          ],
        });
      })
    );
    worksheet.getCell("A1").value = sekolah.nama;
    worksheet.getCell("A2").value = jadwalMengajar.toJSON().rombel.nama;
    worksheet.getCell("A3").value = jadwalMengajar.toJSON().mataPelajaran.nama;
    worksheet.getCell("A4").value = ta.tahun;

    worksheet.getCell(
      "A6"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    let namaFile = `/uploads/rekap-Analisis-Tugas-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async downloadPerformaTugas({
    response,
    request,
    auth,
    params: { jadwal_mengajar_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const jadwalMengajar = await MJadwalMengajar.query()
      .with("mataPelajaran", (builder) => {
        builder.with("user");
      })
      .with("rombel")
      .where({ id: jadwal_mengajar_id })
      .first();

    const userIds = await MAnggotaRombel.query()
      .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
      .andWhere({ dihapus: 0 })
      .pluck("m_user_id");

    const timeline = await MTimeline.query()
      .with("tugas")
      .withCount("ditugaskan as kkm", (builder) => {
        builder.where(
          "nilai",
          "<",
          `${jadwalMengajar.toJSON().mataPelajaran.kkm}`
        );
      })
      .with("ditugaskan")
      .where({ dihapus: 0 })
      .andWhere({ tipe: "tugas" })
      .andWhere({ m_rombel_id: jadwalMengajar.toJSON().m_rombel_id })
      .andWhere({
        m_user_id: jadwalMengajar.toJSON().mataPelajaran.m_user_id,
      })
      .fetch();

    // return response.ok({
    //   // jadwalMengajar,
    //   timeline,
    //   // tugas,
    //   // ratarata2,
    // });

    let workbook = new Excel.Workbook();

    let worksheet = workbook.addWorksheet(`Performa Tugas`);
    worksheet.getCell("A1").value = sekolah.nama;
    worksheet.getCell("A2").value = jadwalMengajar.toJSON().rombel.nama;
    worksheet.getCell("A3").value = jadwalMengajar.toJSON().mataPelajaran.nama;
    worksheet.getCell("A4").value = ta.tahun;

    worksheet.getCell(
      "A6"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.mergeCells(`A1:E1`);
    worksheet.mergeCells(`A2:E2`);
    worksheet.mergeCells(`A3:E3`);
    worksheet.mergeCells(`A4:E4`);
    worksheet.mergeCells(`A6:E6`);
    worksheet.getColumn("A").width = 28;
    worksheet.getColumn("B").width = 14;
    worksheet.getColumn("C").width = 8;
    worksheet.getColumn("D").width = 8.5;
    worksheet.getColumn("E").width = 9;
    worksheet.getColumn("F").width = 14;
    worksheet.getColumn("G").width = 10;
    worksheet.getColumn("H").width = 8;
    worksheet.getColumn("I").width = 11;
    worksheet.addConditionalFormatting({
      ref: "A1:I3",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "0000FF", fgColor: { argb: "0000FF" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
          },
        },
      ],
    });

    // add column headers
    await Promise.all(
      timeline.toJSON().map(async (d, idx) => {
        const ratarata2 = await TkTimeline.query()
          .where({ m_timeline_id: d.id })
          .avg("nilai as rata");

        worksheet.getRow(7).values = [
          "No",
          "Nama Tugas",
          "Tanggal Pembuatan",
          "Nilai rata-rata",
          "Dibawah KKm",
        ];
        worksheet.columns = [
          { key: "no" },
          { key: "nama" },
          { key: "tanggal" },
          { key: "ratarata" },
          { key: "dibawahkkm" },
        ];
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          nama: d.tugas ? d.tugas.judul : "-",
          tanggal: d ? d.tanggal_dibuat : "-",
          ratarata: `${ratarata2[0].rata ? ratarata2[0].rata : "-"}`,
          dibawahkkm: `${d.__meta__.kkm} Siswa`,
        });

        // const row = worksheet.getRow(8);

        worksheet.addConditionalFormatting({
          ref: `A7:E7`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 14,
                  bold: true,
                },
                fill: {
                  type: "pattern",
                  pattern: "solid",
                  bgColor: {
                    argb: "C0C0C0",
                    fgColor: { argb: "C0C0C0" },
                  },
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
              },
            },
          ],
        });

        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 7}:E${(idx + 1) * 1 + 7}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
              },
            },
          ],
        });
      })
    );
    worksheet.getCell("A1").value = sekolah.nama;
    worksheet.getCell("A2").value = jadwalMengajar.toJSON().rombel.nama;
    worksheet.getCell("A3").value = jadwalMengajar.toJSON().mataPelajaran.nama;
    worksheet.getCell("A4").value = ta.tahun;

    worksheet.getCell(
      "A6"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    let namaFile = `/uploads/rekap-PerformaTugas-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async downloadExperimen({
    response,
    request,
    auth,
    params: { jadwal_mengajar_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const user = await auth.getUser();

    let workbook = new Excel.Workbook();

    let worksheet = workbook.addWorksheet(`Analisis Nilai`);
    const row = worksheet.getRow(5);
    row.getCell(8).value = "haisadisadj";

    let namaFile = `/uploads/EXPERIMEN EXCEL.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  //================= CDC SERVICE ===============

  async getPekerjaanSaya({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const pekerjaan = await TkStatusPekerjaan.query()
      .with("perusahaan")
      .where({ m_user_id: user.id })
      .first();

    return response.ok({
      pekerjaan,
    });
  }

  async getCariPekerjaan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();
    const { search } = request.get();

    let pekerjaan;

    if (search) {
      // ===== service cari Pekerjaan ====
      pekerjaan = await MPekerjaan.query()
        .with("perusahaan", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .where({ dihapus: 0 })
        .andWhere("nama", "like", `%${search}%`)
        .paginate();
    } else {
      // ===== service Pekerjaan saya ====
      pekerjaan = await MPekerjaan.query()
        .with("perusahaan", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .where({ dihapus: 0 })
        .paginate();
    }

    return response.ok({
      pekerjaan,
    });
  }

  async getCariPerusahaan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();
    const { search } = request.get();

    let perusahaan;

    if (search) {
      // ===== service cari Perusahaan ====
      perusahaan = await MPerusahaan.query()
        .where({ dihapus: 0 })
        .andWhere("nama", "like", `%${search}%`)
        .paginate();
    } else {
      // ===== service Perusahaan saya ====
      perusahaan = await MPerusahaan.query().where({ dihapus: 0 }).paginate();
    }

    return response.ok({
      perusahaan,
    });
  }

  async getAcaraPerusahaan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();
    const { search } = request.get();

    let acara;

    if (search) {
      // ===== service cari Perusahaan ====
      acara = await MAcaraPerusahaan.query()
        .where({ dihapus: 0 })
        .andWhere("nama", "like", `%${search}%`)
        .paginate();
    } else {
      // ===== service Perusahaan saya ====
      acara = await MAcaraPerusahaan.query().where({ dihapus: 0 }).paginate();
    }

    return response.ok({
      acara,
    });
  }
  // ============ Detail Pekerjaan ============

  async detailPekerjaanSaya({
    response,
    request,
    auth,
    params: { pekerjaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();
    // const { rombel_id } = request.post();
    const pekerjaan = await MPekerjaan.query()
      .with("perusahaan")
      .with("pengumuman", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ id: pekerjaan_id })
      .first();

    return response.ok({
      pekerjaan,
    });
  }

  async detailPekerjaan({ response, request, auth, params: { pekerjaan_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();
    // const { rombel_id } = request.post();
    const pekerjaan = await MPekerjaan.query()
      .with("perusahaan")
      .with("pengumuman", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .with("informasi")
      .where({ id: pekerjaan_id })
      .first();

    return response.ok({
      pekerjaan,
    });
  }
  async detailPerusahaan({
    response,
    request,
    auth,
    params: { perusahaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();
    // const { rombel_id } = request.post();
    const perusahaan = await MPerusahaan.query()
      .with("acara", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .with("pekerjaan", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .with("informasi", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ id: perusahaan_id })
      .first();

    return response.ok({
      perusahaan,
    });
  }

  async detailAcaraPerusahaan({
    response,
    request,
    auth,
    params: { acara_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();
    // const { rombel_id } = request.post();
    const acara = await MAcaraPerusahaan.query()
      .with("perusahaan")
      .where({ id: acara_id })
      .first();

    return response.ok({
      perusahaan,
    });
  }

  async postAcaraPerusahaan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      judul,
      foto,
      lokasi,
      deskripsi,
      waktu_awal,
      waktu_akhir,
      link,
      peserta,
    } = request.post();

    const acara = await MAcaraPerusahaan.create({
      judul,
      foto,
      lokasi,
      deskripsi,
      waktu_awal,
      waktu_akhir,
      link,
      peserta,
      m_perusahaan_id: perusahaan_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putAcaraPerusahaan({ response, request, auth, params: { acara_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      judul,
      foto,
      lokasi,
      deskripsi,
      waktu_awal,
      waktu_akhir,
      link,
      peserta,
    } = request.post();

    const acara = await MAcaraPerusahaaan.query()
      .where({ id: acara_id })
      .update({
        judul,
        foto,
        lokasi,
        deskripsi,
        waktu_awal,
        waktu_akhir,
        link,
        peserta,
        dihapus: 0,
      });

    if (!acara) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteAcaraPerusahaan({
    response,
    request,
    auth,
    params: { acara_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const acara = await MAcaraPerusahaan.query()
      .where({ id: acara_id })
      .update({
        dihapus: 1,
      });

    if (!acara) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postPerusahaan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      nama,
      logo,
      bidang,
      province_id,
      regency_id,
      district_id,
      village_id,
      didirikan,
      alamat,
      telepon,
      motto,
      visi,
      misi,
      email,
      situs,
      jumlah_pekerja,
      tentang,
      budaya,
      benefit_karyawan,
      lingkungan_kerja,
      busana,
      budaya_kerja,
      jam_kerja,
      nama_pj,
      telepon_pj,
      email_pj,
      registrasi_pj,
      youtube,
      twitter,
      instagram,
      facebook,
      github,
      linkedin,
      behace,
      dribble,
      kodepos,
      sampul,
    } = request.post();

    const perusahaan = await MPerusahaan.create({
      nama,
      logo,
      bidang,
      province_id,
      regency_id,
      district_id,
      village_id,
      dihapus: 0,
    });

    const informasi = await MInformasiPerusahaan.create({
      m_perusahaan_id: perusahaan.id,
      sampul,
      email,
      didirikan,
      alamat,
      telepon,
      motto,
      visi,
      misi,
      situs,
      jumlah_pekerja,
      tentang,
      budaya,
      benefit_karyawan,
      lingkungan_kerja,
      busana,
      budaya_kerja,
      jam_kerja,
      nama_pj,
      telepon_pj,
      email_pj,
      registrasi_pj,
      youtube,
      twitter,
      instagram,
      facebook,
      github,
      linkedin,
      behace,
      dribble,
      kodepos,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPerusahaan({ response, request, auth, params: { perusahaan_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      nama,
      logo,
      bidang,
      province_id,
      regency_id,
      district_id,
      village_id,
      didirikan,
      alamat,
      telepon,
      situs,
      jumlah_pekerja,
      tentang,
      budaya,
      benefit_karyawan,
      lingkungan_kerja,
      busana,
      budaya_kerja,
      jam_kerja,
      nama_pj,
      telepon_pj,
      email_pj,
      registrasi_pj,
      youtube,
      twitter,
      instagram,
      facebook,
      github,
      linkedin,
      behace,
      dribble,
      kodepos,
      sampul,
    } = request.post();

    const perusahaan = await MPerusahaaan.query()
      .where({ id: perusahaan_id })
      .update({
        nama,
        logo,
        bidang,
        province_id,
        regency_id,
        district_id,
        village_id,
        dihapus: 0,
      });

    const informasi = await MInformasiPerusahaaan.query()
      .where({ m_perusahaan_id: perusahaan_id })
      .update({
        didirikan,
        alamat,
        telepon,
        situs,
        jumlah_pekerja,
        tentang,
        budaya,
        benefit_karyawan,
        lingkungan_kerja,
        busana,
        budaya_kerja,
        jam_kerja,
        nama_pj,
        telepon_pj,
        email_pj,
        registrasi_pj,
        youtube,
        twitter,
        instagram,
        facebook,
        github,
        linkedin,
        behace,
        dribble,
        kodepos,
        sampul,
      });

    if (!perusahaan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async putProfilPerusahaan({
    response,
    request,
    auth,
    params: { perusahaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { motto, visi, misi, tentang } = request.post();

    const informasi = await MInformasiPerusahaaan.query()
      .where({ m_perusahaan_id: perusahaan_id })
      .update({
        tentang,
        visi,
        misi,
        motto,
      });

    if (!informasi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async putBudayaPerusahaan({
    response,
    request,
    auth,
    params: { perusahaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      lingkungan_kerja,
      busana,
      budaya,
      budaya_kerja,
      jam_kerja,
      benefit_karyawan,
    } = request.post();

    const informasi = await MInformasiPerusahaaan.query()
      .where({ m_perusahaan_id: perusahaan_id })
      .update({
        lingkungan_kerja,
        busana,
        budaya,
        budaya_kerja,
        jam_kerja,
        benefit_karyawan,
      });

    if (!informasi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async putInformasiPerusahaan({
    response,
    request,
    auth,
    params: { perusahaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      nama,
      bidang,
      email,
      jumlah_karyawan,
      province_id,
      regency_id,
      kode_pos,
      alamat,
      didirikan,
      situs,
      telepon,
    } = request.post();

    const perusahaan = await MPerusahaaan.query()
      .where({ id: perusahaan_id })
      .update({
        nama,
        bidang,
        province_id,
        regency_id,
        dihapus: 0,
      });

    const informasi = await MInformasiPerusahaaan.query()
      .where({ m_perusahaan_id: perusahaan_id })
      .update({
        email,
        jumlah_karyawan,
        kode_pos,
        alamat,
        didirikan,
        situs,
        telepon,
      });

    if (!informasi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async putTautanPerusahaan({
    response,
    request,
    auth,
    params: { perusahaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      youtube,
      twitter,
      instagram,
      facebook,
      github,
      linkedin,
      behace,
      dribble,
    } = request.post();

    const informasi = await MInformasiPerusahaaan.query()
      .where({ m_perusahaan_id: perusahaan_id })
      .update({
        youtube,
        twitter,
        instagram,
        facebook,
        github,
        linkedin,
        behace,
        dribble,
      });

    if (!informasi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePerusahaan({
    response,
    request,
    auth,
    params: { perusahaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const perusahaan = await MPerusahaan.query()
      .where({ id: perusahaan_id })
      .update({
        dihapus: 1,
      });

    if (!perusahaan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postPekerjaan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      m_perusahaan_id,
      judul,
      jenis,
      province_id,
      regency_id,
      district_id,
      village_id,
      alamat_penempatan,
      kodepos,
      jumlah_lowongan,
      bidang,
      mulai_kerja,
      akhir_kerja,
      pengalaman,
      batas_pengiriman,
      pendidikan,
      detail_pendidikan,
      keahlian,
      deskripsi,
      persyaratan_khusus,
      gaji_minimal,
      gaji_maksimal,
      status_jurusan,
      jurusan,
      gender,
      tb,
      usia_minimal,
      usia_maksimal,
      khusus_alumni,
      khusus_difabel,
      buta_warna,
      kacamata,
      tes_psikotes,
      tes_masuk,
      tes_wawancara,
      tes_kesehatan,
      lokasi_tes,
      kelengkapan_data,
      data_nilai,
      waktu_mulai_psikotes,
      waktu_akhir_psikotes,
      media_tes_psikotes,
      keterangan_psikotes,
      lokasi_psikotes,
      link_psikotes,

      waktu_mulai_masuk,
      waktu_akhir_masuk,
      media_tes_masuk,
      keterangan_masuk,
      lokasi_masuk,
      link_masuk,

      waktu_mulai_wawancara,
      waktu_akhir_wawancara,
      media_tes_wawancara,
      keterangan_wawancara,
      lokasi_wawancara,
      link_wawancara,

      waktu_mulai_kesehatan,
      waktu_akhir_kesehatan,
      media_tes_kesehatan,
      keterangan_kesehatan,
      lokasi_kesehatan,
      link_kesehatan,
    } = request.post();
    const date1 = moment(`${mulai_kerja}`);
    const date2 = moment(`${akhir_kerja}`);
    const diff = date2.diff(date1);

    const lama = moment(diff).format(`MM`);

    const pekerjaan = await MPekerjaan.create({
      judul,
      m_perusahaan_id,
      jenis,
      bidang,
      kontrak_kerja: lama,
      mulai_kerja,
      akhir_kerja,
      jumlah_lowongan,
      province_id,
      regency_id,
      district_id,
      village_id,
      dihapus: 0,
    });

    const informasi = await MInformasiPekerjaan.create({
      m_pekerjaan_id: pekerjaan.id,
      pengalaman,
      batas_pengiriman,
      pendidikan,
      detail_pendidikan,
      keahlian,
      deskripsi,
      persyaratan_khusus,
      gaji_minimal,
      gaji_maksimal,
      status_jurusan,
      jurusan,
      gender,
      tb,
      usia_minimal,
      usia_maksimal,
      alamat_penempatan,
      kodepos,
      khusus_alumni,
      khusus_difabel,
      buta_warna,
      kacamata,
      tes_psikotes,
      tes_masuk,
      tes_wawancara,
      tes_kesehatan,
      lokasi_tes,
      kelengkapan_data,
      data_nilai,
    });

    if (tes_psikotes == 1) {
      await MTesPekerjaan.create({
        tipe: "psikotes",
        waktu_mulai: waktu_mulai_psikotes,
        waktu_akhir: waktu_akhir_psikotes,
        m_pekerjaan_id: pekerjaan.id,
        lokasi: lokasi_psikotes,
        link: link_psikotes,
        keterangan: keterangan_psikotes,
        dihapus: 0,
      });
    }
    if (tes_masuk == 1) {
      await MTesPekerjaan.create({
        tipe: "masuk",
        waktu_mulai: waktu_mulai_masuk,
        waktu_akhir: waktu_akhir_masuk,
        m_pekerjaan_id: pekerjaan.id,
        lokasi: lokasi_masuk,
        link: link_masuk,
        keterangan: keterangan_masuk,
        dihapus: 0,
      });
    }
    if (tes_wawancara == 1) {
      await MTesPekerjaan.create({
        tipe: "wawancara",
        waktu_mulai: waktu_mulai_wawancara,
        waktu_akhir: waktu_akhir_wawancara,
        m_pekerjaan_id: pekerjaan.id,
        lokasi: lokasi_wawancara,
        link: link_wawancara,
        keterangan: keterangan_wawancara,
        dihapus: 0,
      });
    }
    if (tes_kesehatan == 1) {
      await MTesPekerjaan.create({
        tipe: "kesetes_kesehatan",
        waktu_mulai: waktu_mulai_kesehatan,
        waktu_akhir: waktu_akhir_kesehatan,
        m_pekerjaan_id: pekerjaan.id,
        lokasi: lokasi_kesehatan,
        link: link_kesehatan,
        keterangan: keterangan_kesehatan,
        dihapus: 0,
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  // ============ POST Rekap Tugas =================

  async putPekerjaan({ response, request, auth, params: { pekerjaan_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      judul,
      province_id,
      regency_id,
      district_id,
      village_id,
      jenis,
      bidang,
      mulai_kerja,
      akhir_kerja,
      jumlah_lowongan,
      pengalaman,
      batas_pengiriman,
      pendidikan,
      detail_pendidikan,
      keahlian,
      deskripsi,
      persyaratan_khusus,
      range_gaji,
      status_jurusan,
      gender,
      tb,
      usia_minimal,
      usia_maksimal,
      alamat,
      kodepos,
      khusus_alumni,
      khusus_difabel,
      buta_warna,
      kacamata,
      tes,
      lokasi_tes,
      kelengkapan_data,
      data_nilai,
    } = request.post();

    const date1 = moment(`${mulai_kerja}`);
    const date2 = moment(`${akhir_kerja}`);
    const diff = date2.diff(date1);

    const lama = moment(diff).format(`MM`);

    const pekerjaan = await MPekerjaan.query()
      .where({ id: pekerjaan_id })
      .update({
        judul,
        jenis,
        bidang,
        kontrak_kerja: lama,
        mulai_kerja,
        akhir_kerja,
        jumlah_lowongan,
        province_id,
        regency_id,
        district_id,
        village_id,
        dihapus: 0,
      });

    const informasi = await MInformasiPekerjaan.query()
      .where({ m_pekerjaan_id: pekerjaan_id })
      .update({
        pengalaman,
        batas_pengiriman,
        pendidikan,
        detail_pendidikan,
        keahlian,
        deskripsi,
        persyaratan_khusus,
        range_gaji,
        status_jurusan,
        gender,
        tb,
        usia_minimal,
        usia_maksimal,
        alamat,
        kodepos,
        khusus_alumni,
        khusus_difabel,
        buta_warna,
        kacamata,
        tes,
        lokasi_tes,
        kelengkapan_data,
        data_nilai,
      });

    if (!pekerjaan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePekerjaan({ response, request, auth, params: { pekerjaan_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const pekerjaan = await MPekerjaan.query()
      .where({ id: pekerjaan_id })
      .update({
        dihapus: 1,
      });

    if (!pekerjaan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postLaporanPrakerin({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      judul,
      foto,
      lokasi,
      deskripsi,
      waktu_mulai,
      waktu_akhir,
      lampiran,
    } = request.post();

    const laporan = await MLaporanPrakerin.create({
      judul,
      foto,
      lokasi,
      deskripsi,
      waktu_mulai,
      waktu_akhir,
      lampiran,
      m_perusahaan_id: perusahaan_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  // ============ POST Rekap Tugas =================

  async putLaporanPrakerin({
    response,
    request,
    auth,
    params: { laporan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { judul, foto, lokasi, deskripsi, waktu_awal, waktu_akhir } =
      request.post();

    const acara = await MAcaraPerusahaaan.query()
      .where({ id: acara_id })
      .update({
        judul,
        foto,
        lokasi,
        deskripsi,
        waktu_awal,
        waktu_akhir,
        dihapus: 0,
      });

    if (!acara) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  // ====================================== Surel Service ==========================================

  async getSurel({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const pin = await MFolderArsip.query()
      .where({ dihapus: 0 })
      .andWhere({ pin: 1 })
      .andWhere({ m_user_id: user.id })
      .count("* as total");

    const check = await MFolderArsip.query()
      .where({ dihapus: 0 })
      .andWhere({ m_user_id: user.id })
      .first();

    if (!check) {
      await MFolderArsip.create({
        nama: "Edaran",
        pin: 1,
        dihapus: 0,
        m_user_id: user.id,
      });
      await MFolderArsip.create({
        nama: "Perintah",
        pin: 1,
        dihapus: 0,
        m_user_id: user.id,
      });
      await MFolderArsip.create({
        nama: "Undangan",
        pin: 1,
        dihapus: 0,
        m_user_id: user.id,
      });
      await MFolderArsip.create({
        nama: "Pengantar",
        pin: 1,
        dihapus: 0,
        m_user_id: user.id,
      });
    }

    const { tipe, search, nav } = request.get();

    let surel;

    const jumlahDraf = await TkTipeSurel.query()
      .where({ dihapus: 0 })
      .andWhere({ dibaca: 0 })
      .andWhere({ tipe: "draf" })
      .andWhere({ m_user_id: user.id })
      .count("* as total");

    const jumlahMasuk = await TkTipeSurel.query()
      .where({ dihapus: 0 })
      .andWhere({ dibaca: 0 })
      .andWhere({ tipe: "masuk" })
      .andWhere({ m_user_id: user.id })
      .count("* as total");

    const jumlahArsip = await MFolderArsip.query()
      .where({ dihapus: 0 })
      .andWhere({ pin: 1 })
      .andWhere({ m_user_id: user.id })
      .count("* as total");

    const arsip = await MFolderArsip.query()
      .withCount("tipe as total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_user_id: user.id })
      .fetch();

    if (search) {
      // ===== service cari Perusahaan ====
      if (tipe == "terkirim") {
        surel = await TkTipeSurel.query()
          .with("surel", (builder) => {
            builder
              .with("userPengirim", (builder) => {
                builder.select("id", "nama", "email");
              })
              .withCount("komen", (builder) => {
                builder.where({ dihapus: 0 });
              })
              .where({ dihapus: 0 })
              .andWhere({ m_user_pengirim_id: user.id })
              .andWhere("perihal", "like", `%${search}%`);
          })
          .where({ dihapus: 0 })
          .andWhere({ tipe: "terkirim" })
          .andWhere({ m_user_id: user.id })
          .paginate();
      } else if (tipe == "masuk") {
        surel = await TkTipeSurel.query()
          .with("surel", (builder) => {
            builder
              .with("userPengirim", (builder) => {
                builder.select("id", "nama", "email");
              })
              .withCount("komen", (builder) => {
                builder.where({ dihapus: 0 });
              })

              .where({ dihapus: 0 })
              .andWhere({ m_user_tujuan_id: user.id })
              .andWhere("perihal", "like", `%${search}%`);
          })
          .where({ dihapus: 0 })
          .andWhere({ tipe: "masuk" })
          .andWhere({ m_user_id: user.id })
          .paginate();
      } else if (tipe == "draf") {
        surel = await TkTipeSurel.query()
          .with("surel", (builder) => {
            builder
              .with("userPengirim", (builder) => {
                builder.select("id", "nama", "email");
              })
              .withCount("komen", (builder) => {
                builder.where({ dihapus: 0 });
              })

              .where({ dihapus: 0 })
              .andWhere({ m_user_pengirim_id: user.id })
              .andWhere("perihal", "like", `%${search}%`);
          })
          .where({ dihapus: 0 })
          .andWhere({ tipe: "draf" })
          .andWhere({ m_user_id: user.id })
          .paginate();
      } else if (tipe == "disposisi") {
        if (nav == "semua") {
          surel = await MDisposisi.query()
            .with("surat")
            .with("pelaporanDisposisi")
            .where({ dihapus: 0 })
            .andWhere({ m_user_id: user.id })
            .paginate();
        } else if (nav == "belum selesai") {
          surel = await MDisposisi.query()
            .with("surat")
            .with("pelaporanDisposisi")
            .where({ dihapus: 0 })
            .andWhere({ m_user_id: user.id })
            .andWhere({ status: 0 })
            .paginate();
        } else if (nav == "selesai") {
          surel = await MDisposisi.query()
            .with("surat")
            .with("pelaporanDisposisi")
            .where({ dihapus: 0 })
            .andWhere({ m_user_id: user.id })
            .andWhere({ status: 1 })
            .paginate();
        }
      }
    } else {
      // ===== service Perusahaan saya ====
      if (tipe == "terkirim") {
        surel = await TkTipeSurel.query()
          .with("surel", (builder) => {
            builder
              .with("userPengirim", (builder) => {
                builder.select("id", "nama", "email");
              })
              .withCount("komen", (builder) => {
                builder.where({ dihapus: 0 });
              })
              .where({ dihapus: 0 })
              .andWhere({ m_user_pengirim_id: user.id });
          })
          .where({ dihapus: 0 })
          .andWhere({ tipe: "terkirim" })
          .andWhere({ m_user_id: user.id })
          .paginate();
      } else if (tipe == "masuk") {
        surel = await TkTipeSurel.query()
          .with("surel", (builder) => {
            builder
              .with("userPengirim", (builder) => {
                builder.select("id", "nama", "email");
              })
              .withCount("komen", (builder) => {
                builder.where({ dihapus: 0 });
              })
              .where({ dihapus: 0 })
              .andWhere({ m_user_tujuan_id: user.id });
          })
          .where({ dihapus: 0 })
          .andWhere({ tipe: "masuk" })
          .andWhere({ m_user_id: user.id })
          .paginate();
      } else if (tipe == "draf") {
        surel = await TkTipeSurel.query()
          .with("surel", (builder) => {
            builder
              .with("userPengirim", (builder) => {
                builder.select("id", "nama", "email");
              })
              .withCount("komen", (builder) => {
                builder.where({ dihapus: 0 });
              })
              .where({ dihapus: 0 })
              .andWhere({ m_user_pengirim_id: user.id });
          })
          .where({ dihapus: 0 })
          .andWhere({ tipe: "draf" })
          .andWhere({ m_user_id: user.id })
          .paginate();
      } else if (tipe == "disposisi") {
        if (nav == "semua") {
          surel = await MDisposisi.query()
            .with("surat")
            .with("pelaporanDisposisi")
            .where({ dihapus: 0 })
            .andWhere({ m_user_id: user.id })
            .paginate();
        } else if (nav == "belum selesai") {
          surel = await MDisposisi.query()
            .with("surat")
            .with("pelaporanDisposisi")
            .where({ dihapus: 0 })
            .andWhere({ m_user_id: user.id })
            .andWhere({ status: 0 })
            .paginate();
        } else if (nav == "selesai") {
          surel = await MDisposisi.query()
            .with("surat")
            .with("pelaporanDisposisi")
            .where({ dihapus: 0 })
            .andWhere({ m_user_id: user.id })
            .andWhere({ status: 1 })
            .paginate();
        }
      }
    }

    return response.ok({
      surel,
      jumlahMasuk,
      jumlahDraf,
      arsip,
      jumlahArsip,
      pin,
    });
  }

  async detailSurel({ response, request, auth, params: { surel_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const dibaca = await TkTipeSurel.query()
      .where({ m_surel_id: surel_id })
      .update({
        dibaca: 1,
      });
    // const { rombel_id } = request.post();
    const surel = await MSurel.query()
      .with("userPengirim", (builder) => {
        builder.select("id", "nama", "email");
      })
      .with("userTujuan", (builder) => {
        builder.select("id", "nama", "email");
      })
      .with("komen", (builder) => {
        builder.with("user", (builder) => {
          builder.select("id", "nama");
        });
      })
      .where({ id: surel_id })
      .first();

    return response.ok({
      surel,
    });
  }

  async postSurel({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const useremail = await User.query().where({ id: user.id }).first();

    // return useremail;

    const { nama, perihal, isi, lampiran, email } = request.post();
    const rules = {
      nama: "required",
      perihal: "required",
      email: "required|email",
      isi: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "perihal.required": "Perihal harus diisi",
      "email.required": "Alamat email harus diisi",
      "email.email": "Alamat email harus benar",
      "isi.required": "Pesan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const tujuan = await User.query()
      .where({ email: email })
      .andWhere({ dihapus: 0 })
      .ids();

    const surel = await MSurel.create({
      nama,
      perihal,
      m_user_pengirim_id: user.id,
      m_user_tujuan_id: `${tujuan ? tujuan : null}`,
      isi,
      lampiran,
      dihapus: 0,
    });

    const masuk = await TkTipeSurel.create({
      m_surel_id: surel.id,
      tipe: "masuk",
      m_user_id: `${tujuan ? tujuan : null}`,
    });

    const terkirim = await TkTipeSurel.create({
      m_surel_id: surel.id,
      tipe: "terkirim",
      m_user_id: user.id,
    });

    // const gmail = await Mail.raw(`${perihal}` ,(message)=>{
    //   message
    //   .to(email)
    //   .from(useremail.email)
    //   .subject(perihal)
    //   .text(`${isi} ${lampiran}`)
    // })

    // if (gmail) {
    //   return response.ok({
    //     message: messageEmailSuccess,
    //   });
    // }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async postSurelDraf({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, perihal, isi, lampiran, email } = request.post();

    const tujuan = await User.query()
      .where({ email: email })
      .andWhere({ dihapus: 0 })
      .ids();

    const surel = await MSurel.create({
      nama,
      perihal,
      m_user_pengirim_id: user.id,
      m_user_tujuan_id: `${tujuan ? tujuan : "-"}`,
      isi,
      lampiran,
      dihapus: 0,
    });

    const draf = await TkTipeSurel.create({
      m_surel_id: surel.id,
      tipe: "draf",
      m_user_id: user.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  // ============ POST Rekap Tugas =================

  async putSurel({ response, request, auth, params: { surel_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, perihal, isi, lampiran, email } = request.post();

    const rules = {
      nama: "required",
      perihal: "required",
      email: "required|email",
      isi: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "email.required": "Alamat email harus diisi",
      "email.email": "Alamat email harus benar",
      "perihal.required": "Perihal harus diisi",
      "isi.required": "Pesan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const tujuan = await User.query()
      .where({ email: email })
      .andWhere({ dihapus: 0 })
      .ids();

    const surel = await MSurel.query()
      .where({ id: surel_id })
      .update({
        nama,
        perihal,
        m_user_tujuan_id: `${tujuan ? tujuan : "-"}`,
        isi,
        lampiran,
        dihapus: 0,
      });

    const hapus = await TkTipeSurel.query()
      .where({ m_surel_id: surel_id })
      .delete();

    const masuk = await TkTipeSurel.create({
      m_surel_id: surel_id,
      tipe: "masuk",
      m_user_id: `${tujuan ? tujuan : null}`,
    });

    const terkirim = await TkTipeSurel.create({
      m_surel_id: surel_id,
      tipe: "terkirim",
      m_user_id: user.id,
    });

    if (!surel) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async putSurelDraf({ response, request, auth, params: { surel_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, perihal, isi, lampiran, email } = request.post();
    const tujuan = await User.query()
      .where({ email: email })
      .andWhere({ dihapus: 0 })
      .ids();
    const surel = await MSurel.query()
      .where({ id: surel_id })
      .update({
        nama,
        perihal,
        m_user_tujuan_id: `${tujuan ? tujuan : "-"}`,
        isi,
        lampiran,
        dihapus: 0,
      });

    if (!surel) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteSurel({ response, request, auth, params: { surel_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const surel = await MSurel.query().where({ id: surel_id }).update({
      dihapus: 1,
    });

    const tipe = await TkTipeSurel.query()
      .where({ m_surel_id: surel_id })
      .update({
        dihapus: 1,
      });

    if (!surel) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async deleteSurelTipe({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const { tipe_surel_id } = request.post();

    const tipe = await Promise.all(
      tipe_surel_id.map(async (d) => {
        await TkTipeSurel.query().where({ id: d }).update({
          dihapus: 1,
        });
      })
    );

    if (!tipe) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async dibacaSurelTipe({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const { tipe_surel_id } = request.post();

    const tipe = await Promise.all(
      tipe_surel_id.map(async (d) => {
        await TkTipeSurel.query().where({ id: d }).update({
          dibaca: 1,
        });
      })
    );

    if (!tipe) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({});
  }

  async postSurelKomen({ response, request, auth, params: { surel_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { komen, lampiran } = request.post();

    const surelKomen = await MSurelKomen.create({
      komen,
      lampiran,
      m_user_id: user.id,
      m_surel_id: surel_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putSurelArsip({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const { tipe_surel_id, arsip_id } = request.post();

    const tipe = await Promise.all(
      tipe_surel_id.map(async (d) => {
        await TkTipeSurel.query().where({ id: d }).update({
          tipe: "arsip",
          m_folder_arsip_id: arsip_id,
        });
      })
    );

    if (!tipe) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async postFolderArsip({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama } = request.post();

    const arsip = await MFolderArsip.create({
      nama,
      m_user_id: user.id,
      pin: 0,
      dihapus: 0,
    });

    const rules = {
      nama: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putFolderArsip({ response, request, auth, params: { arsip_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama } = request.post();

    const rules = {
      nama: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const arsip = await MFolderArsip.query().where({ id: arsip_id }).update({
      nama,
      dihapus: 0,
    });

    if (!arsip) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async putPinFolderArsip({ response, request, auth, params: { arsip_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const check = await MFolderArsip.query().where({ id: arsip_id }).first();

    const arsip = await MFolderArsip.query().where({ id: arsip_id }).update({
      pin: !check.pin,
      dihapus: 0,
    });

    if (!arsip) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteFolderArsip({ response, request, auth, params: { arsip_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // mengambil data user
    const user = await auth.getUser();

    const arsip = await MFolderArsip.query().where({ id: arsip_id }).update({
      dihapus: 1,
    });

    if (!arsip) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async detailArsipSurel({ response, request, auth, params: { arsip_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { tanggal_awal, tanggal_akhir } = request.post();

    const jumlahDraf = await TkTipeSurel.query()
      .where({ dihapus: 0 })
      .andWhere({ dibaca: 0 })
      .andWhere({ tipe: "draf" })
      .andWhere({ m_user_id: user.id })
      .count("* as total");

    const jumlahMasuk = await TkTipeSurel.query()
      .where({ dihapus: 0 })
      .andWhere({ dibaca: 0 })
      .andWhere({ tipe: "masuk" })
      .andWhere({ m_user_id: user.id })
      .count("* as total");
    let arsip;
    if (tanggal_awal) {
      arsip = await MFolderArsip.query()
        .with("tipe", (builder) => {
          builder
            .with("surel", (builder) => {
              builder
                .with("userPengirim", (builder) => {
                  builder.select("id", "nama", "email");
                })
                .withCount("komen", (builder) => {
                  builder.where({ dihapus: 0 });
                })
                .where({ dihapus: 0 })
                .andWhere({ m_user_pengirim_id: user.id });
            })
            .whereBetween("created_at", [`${tanggal_awal}`, `${tanggal_akhir}`])
            .andWhere({ dihapus: 0 });
        })
        .where({ dihapus: 0 })
        .andWhere({ id: arsip_id })
        .andWhere({ m_user_id: user.id })
        .first();
    } else {
      arsip = await MFolderArsip.query()
        .with("tipe", (builder) => {
          builder
            .with("surel", (builder) => {
              builder
                .with("userPengirim", (builder) => {
                  builder.select("id", "nama", "email");
                })
                .withCount("komen", (builder) => {
                  builder.where({ dihapus: 0 });
                })
                .where({ dihapus: 0 })
                .andWhere({ m_user_pengirim_id: user.id });
            })
            .where({ dihapus: 0 });
        })
        .where({ dihapus: 0 })
        .andWhere({ id: arsip_id })
        .andWhere({ m_user_id: user.id })
        .first();
    }
    // .whereBetween("created_at", [`${tanggal_awal}`, `${tanggal_akhir}`])
    return response.ok({
      jumlahMasuk,
      jumlahDraf,
      arsip,
    });
  }

  // SARANA PRASARANA SERVICE
  async getLokasi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let { search, page } = request.get();

    page = page ? parseInt(page) : 1;

    let lokasi;

    lokasi = MLokasi.query()
      .withCount("barang as total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id });

    if (search) {
      lokasi.andWhere("nama", "like", `%${search}%`);
    }

    return response.ok({
      lokasi: await lokasi.paginate(page, 25),
    });
  }

  async detailLokasi({ response, request, params: { lokasi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const lokasi = await MLokasi.query()
      .with("barang")
      .where({ id: lokasi_id })
      .first();

    return response.ok({
      lokasi: lokasi,
    });
  }

  async getBarang({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let { page, search } = request.get();

    page = page ? parseInt(page) : 1;

    let barang;

    barang = MBarang.query()
      .with("lokasi")
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id });

    if (search) {
      barang.andWhere("nama", "like", `%${search}%`);
    }

    const lokasi = MLokasi.query()
      .select("id", "nama")
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    return response.ok({
      barang: await barang.paginate(page, 25),
      lokasi,
    });
  }

  async detailBarang({ response, request, params: { barang_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const barang = await MBarang.query()
      .with("lokasi")
      .where({ id: barang_id })
      .first();

    return response.ok({
      barang: barang,
    });
  }

  async postLokasi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let { jenis, nama, no_regis, lebar, panjang, foto } = request.post();

    foto = foto ? foto.toString() : null;

    const rules = {
      jenis: "required",
      nama: "required",
      no_regis: "required",
      lebar: "required",
      panjang: "required",
    };
    const message = {
      "jenis.required": "Jenis harus diisi",
      "nama.required": "Nama harus diisi",
      "no_regis.required": "Nomor Registrasi harus diisi",
      "lebar.required": "Lebar harus diisi",
      "panjang.required": "Panjang harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const lokasi = await MLokasi.create({
      jenis,
      nama,
      no_regis,
      lebar,
      foto,
      panjang,
      dihapus: 0,
      m_sekolah_id: sekolah.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putLokasi({ response, request, auth, params: { lokasi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let { jenis, nama, no_regis, lebar, panjang, foto } = request.post();

    foto = foto ? foto.toString() : null;

    const rules = {
      jenis: "required",
      nama: "required",
      no_regis: "required",
      lebar: "required",
      panjang: "required",
    };
    const message = {
      "jenis.required": "Jenis harus diisi",
      "nama.required": "Nama harus diisi",
      "no_regis.required": "Nomor Registrasi harus diisi",
      "lebar.required": "Lebar harus diisi",
      "panjang.required": "Panjang harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    foto = foto ? foto.toString() : null;

    const lokasi = await MLokasi.query().where({ id: lokasi_id }).update({
      jenis,
      nama,
      no_regis,
      lebar,
      panjang,
      foto,
    });

    if (!lokasi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteLokasi({ response, request, auth, params: { lokasi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const lokasi = await MLokasi.query().where({ id: lokasi_id }).update({
      dihapus: 1,
    });

    if (!lokasi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async postBarang({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      foto,
      nama,
      merk,
      kode_barang,
      tahun_beli,
      asal,
      deskripsi,
      jumlah,
      harga,
      kepemilikan,
      nama_pemilik,
      m_lokasi_id,
      baik,
      rusak,
    } = request.post();

    let foto1 = foto ? foto.toString() : null;

    const rules = {
      kode_barang: "required",
      nama: "required",
      // foto1: "required",
      merk: "required",
      tahun_beli: "required",
      asal: "required",
      harga: "required",
      deskripsi: "required",
      jumlah: "required",
      kepemilikan: "required",
      // nama_pemilik: "required",
      m_lokasi_id: "required",
    };
    const message = {
      "kode_barang.required": "Jenis harus diisi",
      "nama.required": "Nama harus diisi",
      // "foto1.required": "Foto harus diisi",
      "merk.required": "Nomor Registrasi harus diisi",
      "tahun_beli.required": "Lebar harus diisi",
      "asal.required": "Panjang harus diisi",
      "harga.required": "Harga harus diisi",
      "deskripsi.required": "Spesifikasi harus diisi",
      "jumlah.required": "Jumlah harus diisi",
      "kepemilikan.required": "Kepemilikan harus diisi",
      // "nama_pemilik.required": "Nama Pemilik harus diisi",
      "m_lokasi_id.required": "Lokasi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const barang = await MBarang.create({
      kode_barang,
      nama,
      merk,
      tahun_beli,
      asal,
      harga,
      jumlah,
      deskripsi,
      foto: foto1,
      kepemilikan,
      nama_pemilik,
      m_lokasi_id,
      dihapus: 0,
      baik: baik || jumlah,
      rusak: rusak || 0,
      m_sekolah_id: sekolah.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putBarang({ response, request, auth, params: { barang_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      foto,
      nama,
      merk,
      kode_barang,
      tahun_beli,
      asal,
      deskripsi,
      jumlah,
      harga,
      kepemilikan,
      nama_pemilik,
      m_lokasi_id,
      baik,
      rusak,
    } = request.post();

    const foto1 = foto ? foto.toString() : null;

    const rules = {
      kode_barang: "required",
      nama: "required",
      // foto: "required",
      merk: "required",
      tahun_beli: "required",
      asal: "required",
      harga: "required",
      deskripsi: "required",
      jumlah: "required",
      kepemilikan: "required",
      // nama_pemilik: "required",
      m_lokasi_id: "required",
    };
    const message = {
      "kode_barang.required": "Jenis harus diisi",
      "nama.required": "Nama harus diisi",
      // "foto.required": "Foto harus diisi",
      "merk.required": "Nomor Registrasi harus diisi",
      "tahun_beli.required": "Lebar harus diisi",
      "asal.required": "Panjang harus diisi",
      "harga.required": "Harga harus diisi",
      "deskripsi.required": "Spesifikasi harus diisi",
      "jumlah.required": "Jumlah harus diisi",
      "kepemilikan.required": "Kepemilikan harus diisi",
      // "nama_pemilik.required": "Nama Pemilik harus diisi",
      "m_lokasi_id.required": "Lokasi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const barang = await MBarang.query().where({ id: barang_id }).update({
      kode_barang,
      nama,
      merk,
      tahun_beli,
      asal,
      harga,
      jumlah,
      deskripsi,
      foto: foto1,
      kepemilikan,
      nama_pemilik,
      m_lokasi_id,
      baik,
      rusak,
    });

    if (!barang) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteBarang({ response, request, auth, params: { barang_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    if (
      user.role != "admin" ||
      user.role == "guru" ||
      user.m_sekolah_id != sekolah.id
    ) {
      return response.forbidden({ message: messageForbidden });
    }

    const barang = await MBarang.query().where({ id: barang_id }).update({
      dihapus: 1,
    });

    if (!barang) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  // =========== IMPORT Alumni SERVICE ================
  async importLokasiServices(filelocation, sekolah) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar Lokasi");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber > 5) {
        data.push({
          jenis: explanation.getCell("B" + rowNumber).value,
          no_regis: explanation.getCell("C" + rowNumber).value,
          nama: explanation.getCell("D" + rowNumber).value,
          lebar: explanation.getCell("E" + rowNumber).value,
          panjang: explanation.getCell("F" + rowNumber).value,
        });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        const lokasi = await MLokasi.create({
          jenis: d.jenis,
          nama: d.nama,
          no_regis: d.no_regis,
          lebar: parseInt(d.lebar),
          panjang: parseInt(d.panjang),
          m_sekolah_id: sekolah.id,
          dihapus: 0,
        });

        return;
      })
    );

    return result;
  }

  async importLokasi({ request, response, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importLokasiServices(`tmp/uploads/${fname}`, sekolah);
  }

  async downloadLokasi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const lokasi = await MLokasi.query().where({ dihapus: 0 }).fetch();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Daftar Lokasi`);
    worksheet.mergeCells("A1:F1");
    worksheet.mergeCells("A2:F2");
    worksheet.getCell(
      "A3"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.addConditionalFormatting({
      ref: "A1:F2",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });
    worksheet.addConditionalFormatting({
      ref: "A4:F4",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });
    await Promise.all(
      lokasi.toJSON().map(async (d, idx) => {
        worksheet.getCell("A1").value = "Rekap Lokasi";
        worksheet.getCell("A2").value = sekolah.nama;
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 4}:F${(idx + 1) * 1 + 4}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 4}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        // add column headers
        worksheet.getRow(4).values = [
          "No",
          "Jenis",
          "Nama",
          "Nomor Registrasi",
          "Lebar",
          "Panjang",
        ];
        worksheet.columns = [
          { key: "no" },
          { key: "jenis" },
          { key: "nama" },
          { key: "no_regis" },
          { key: "lebar" },
          { key: "panjang" },
        ];

        // Add row using key mapping to columns
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          jenis: d ? d.jenis : "-",
          nama: d ? d.nama : "-",
          no_regis: d ? d.no_regis : "-",
          lebar: d ? d.lebar : "-",
          panjang: d ? d.panjang : "-",
        });
      })
    );
    let namaFile = `/uploads/rekap-Lokasi-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async importBarangServices(filelocation, sekolah) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar Barang");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber > 5) {
        data.push({
          kode_barang: explanation.getCell("B" + rowNumber).value,
          nama: explanation.getCell("C" + rowNumber).value,
          merk: explanation.getCell("D" + rowNumber).value,
          tahun_beli: explanation.getCell("E" + rowNumber).value,
          asal: explanation.getCell("F" + rowNumber).value,
          harga: explanation.getCell("G" + rowNumber).value,
          deskripsi: explanation.getCell("H" + rowNumber).value,
          jumlah: explanation.getCell("I" + rowNumber).value,
          kepemilikan: explanation.getCell("J" + rowNumber).value,
          nama_pemilik: explanation.getCell("K" + rowNumber).value,
        });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        const barang = await MBarang.create({
          kode_barang: d.kode_barang,
          nama: d.nama,
          merk: d.merk,
          tahun_beli: d.tahun_beli,
          asal: d.asal,
          harga: d.harga,
          deskripsi: d.deskripsi,
          jumlah: d.jumlah,
          kepemilikan: d.kepemilikan,
          nama_pemilik: d.nama_pemilik,
          dihapus: 0,
          m_sekolah_id: sekolah.id,
          baik: d.jumlah,
        });

        return;
      })
    );

    return result;
  }

  async importBarang({ request, response, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importBarangServices(`tmp/uploads/${fname}`, sekolah);
  }

  async downloadBarang({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const barang = await MBarang.query()
      .with("lokasi", (builder) => {
        builder.where({ m_sekolah_id: sekolah.id }).andWhere({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .fetch();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Daftar Barang`);
    worksheet.mergeCells("A1:K1");
    worksheet.mergeCells("A2:K2");
    worksheet.getCell(
      "A3"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.addConditionalFormatting({
      ref: "A1:K2",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });
    worksheet.addConditionalFormatting({
      ref: "A4:K4",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });
    await Promise.all(
      barang.toJSON().map(async (d, idx) => {
        worksheet.getCell("A1").value = "Rekap Barang";
        worksheet.getCell("A2").value = sekolah.nama;
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 4}:K${(idx + 1) * 1 + 4}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 4}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        // add column headers
        worksheet.getRow(4).values = [
          "No",
          "Kode Barang",
          "Nama",
          "Merk",
          "Tahun dibeli",
          "Asal",
          "Harga",
          "Deskripsi",
          "Status",
          "Kepemilikan",
          "Lokasi",
        ];
        worksheet.columns = [
          { key: "no" },
          { key: "kode_barang" },
          { key: "nama" },
          { key: "merk" },
          { key: "tahun_beli" },
          { key: "asal" },
          { key: "harga" },
          { key: "deskripsi" },
          { key: "status" },
          { key: "kepemilikan" },
          { key: "lokasi" },
        ];

        // Add row using key mapping to columns
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          kode_barang: d ? d.kode_barang : "-",
          nama: d ? d.nama : "-",
          merk: d ? d.merk : "-",
          tahun_beli: d ? d.tahun_beli : "-",
          asal: d ? d.asal : "-",
          harga: d ? d.harga : "-",
          deskripsi: d ? d.deskripsi : "-",
          status: d ? d.status : "-",
          kepemilikan: d ? d.kepemilikan : "-",
          lokasi: d.lokasi ? d.lokasi.nama : "-",
        });
      })
    );
    let namaFile = `/uploads/rekap-Barang-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  // Tata Tertib Service

  async getTataTertib({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const penghargaan = await MPenghargaan.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    const kategori = await MKategoriPelanggaran.query()
      .withCount("pelanggaran as total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .with("pelanggaran", (builder) => {
        builder
          .withCount("siswa", (builder) => {
            builder.where({ dihapus: 0 });
          })
          .where({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    return response.ok({
      kategori,
      penghargaan,
    });
  }

  //Pelanggaran Service
  async getKategoriPelanggaran({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const kategori = await MKategoriPelanggaran.query()
      .withCount("pelanggaran as total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    return response.ok({
      kategori,
    });
  }

  async detailKategoriPelanggaran({
    response,
    request,
    params: { kategori_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const kategori = await MKategoriPelanggaran.query()
      .with("pelanggaran", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .withCount("pelanggaran as total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ id: kategori_id })
      .andWhere({ m_sekolah_id: sekolah.id })
      .first();

    return response.ok({
      kategori: kategori,
    });
  }

  async postKategoriPelanggaran({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama } = request.post();
    const rules = {
      nama: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const kategori = await MKategoriPelanggaran.create({
      nama,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putKategoriPelanggaran({
    response,
    request,
    auth,
    params: { kategori_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama } = request.post();
    const rules = {
      nama: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const kategori = await MKategoriPelanggaran.query()
      .where({ id: kategori_id })
      .update({
        nama,
      });

    if (!kategori) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteKategoriPelanggaran({
    response,
    request,
    auth,
    params: { kategori_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const kategori = await MKategoriPelanggaran.query()
      .where({ id: kategori_id })
      .update({
        dihapus: 1,
      });

    if (!kategori) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async postPelanggaran({ response, request, auth, params: { kategori_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, poin } = request.post();
    const rules = {
      nama: "required",
      poin: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "poin.required": "Poin harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const kategori = await MPelanggaran.create({
      nama,
      poin,
      m_kategori_pelanggaran_id: kategori_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPelanggaran({
    response,
    request,
    auth,
    params: { pelanggaran_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, poin } = request.post();
    const rules = {
      nama: "required",
      poin: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "poin.required": "Poin harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const pelanggaran = await MPelanggaran.query()
      .where({ id: pelanggaran_id })
      .update({
        nama,
        poin,
      });

    if (!pelanggaran) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePelanggaran({
    response,
    request,
    auth,
    params: { pelanggaran_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const pelanggaran = await MPelanggaran.query()
      .where({ id: pelanggaran_id })
      .update({
        dihapus: 1,
      });

    if (!pelanggaran) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  // sanksi Service
  async getSanksiPelanggaran({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { search, page } = request.get();

    const sanksi = await MSanksiPelanggaran.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    const data = await MSanksiSiswa.query()
      .with("sanksi")
      .with("bukti")
      .with("user", (builder) => {
        builder
          .select("id", "nama")
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: sekolah.id });
        if (search) {
          builder.andWhere("nama", "like", `%${search}%`);
        }
      })
      .where({ dihapus: 0 })
      .orderBy("created_at", "desc")
      .paginate(page, 10);

    const siswa = await Promise.all(
      data.toJSON().data.filter((d) => d.user != null)
    );
    // .andWhere({ m_sanksi_pelanggaran_id: d.id })
    // const siswa = await Promise.all(
    //   sanksi.toJSON().map(async (d) => {
    //     return siswa;
    //   })
    // );

    return response.ok({
      sanksi,
      siswa,
    });
  }

  async postSanksiPelanggaran({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, poin_bawah, poin_atas, tindak_lanjut } = request.post();
    const rules = {
      nama: "required",
      poin_bawah: "required",
      poin_atas: "required",
      tindak_lanjut: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "poin_bawah.required": "Poin bawah harus diisi",
      "poin_atas.required": "Poin atas harus diisi",
      "tindak_lanjut.required": "Tindak lanjut harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const sanksi = await MSanksiPelanggaran.create({
      nama,
      poin_bawah,
      poin_atas,
      tindak_lanjut,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putSanksiPelanggaran({
    response,
    request,
    auth,
    params: { sanksi_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, poin_bawah, poin_atas, tindak_lanjut } = request.post();
    const rules = {
      nama: "required",
      poin_bawah: "required",
      poin_atas: "required",
      tindak_lanjut: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "poin_bawah.required": "Poin bawah harus diisi",
      "poin_atas.required": "Poin atas harus diisi",
      "tindak_lanjut.required": "Tindak lanjut harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const sanksi = await MSanksiPelanggaran.query()
      .where({ id: sanksi_id })
      .update({
        nama,
        poin_bawah,
        poin_atas,
        tindak_lanjut,
      });

    if (!sanksi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteSanksiPelanggaran({
    response,
    request,
    auth,
    params: { sanksi_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const sanksi = await MSanksiPelanggaran.query()
      .where({ id: sanksi_id })
      .update({
        dihapus: 1,
      });

    if (!sanksi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getTataTertibRombel({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    const { search, page } = request.get();

    const rombel = await MRombel.query()
      .select("id", "nama", "tingkat")
      .withCount("anggotaRombel as total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .fetch();

    let siswa;

    siswa = User.query()
      .with("pelanggaranSiswa")
      .with("anggotaRombel", (builder) => {
        builder
          .where({ dihapus: 0 })
          .select("id", "m_rombel_id", "m_user_id")
          .with("rombel", (builder) => {
            builder
              .select("id", "nama", "m_ta_id", "m_sekolah_id", "m_jurusan_id")
              .with("jurusan", (builder) => {
                builder.select("id", "nama");
              })
              .where({ m_ta_id: ta.id })
              .andWhere({ m_sekolah_id: sekolah.id });
          });
      })
      .with("profil", (builder) => {
        builder.select("m_user_id", "nisn");
      })
      .select("id", "nama", "whatsapp")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ role: "siswa" });
    if (search) {
      siswa.andWhere("nama", "like", `%${search}%`);
    }

    return response.ok({
      rombel,
      siswa: await siswa.paginate(page, 15),
    });
  }

  async detailTataTertibRombel({ response, request, params: { rombel_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const rombel = await MRombel.query()
      .with("jurusan", (builder) => {
        builder.select("id", "nama");
      })
      .select("id", "nama", "m_jurusan_id")
      .with("anggotaRombel", (builder) => {
        builder
          .where({ dihapus: 0 })
          .with("user", (builder) => {
            builder
              .select("id", "nama")
              .withCount("pelanggaranSiswa as Total", (builder) => {
                builder.where({ dihapus: 0 });
              })
              .with("pelanggaranSiswa", (builder) => {
                builder.where({ dihapus: 0 });
              })
              .with("sanksiSiswa", (builder) => {
                builder.where({ dihapus: 0 });
              });
          })
          .select("id", "m_user_id", "m_rombel_id")
          .where({ dihapus: 0 });
      })
      .withCount("anggotaRombel as total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ id: rombel_id })
      .first();

    return response.ok({
      rombel,
    });
  }

  async detailTataTertibSiswa({ response, request, params: { user_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const pelanggaran = await MKategoriPelanggaran.query()
      .with("pelanggaran", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    const penghargaan = await MPenghargaan.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    const sanksi = await MSanksiPelanggaran.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    const siswa = await User.query()
      .select("id", "nama")
      .withCount("pelanggaranSiswa as Total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .with("pelanggaranSiswa", (builder) => {
        builder
          .with("pelanggaran")
          .with("userPelapor", (builder) => {
            builder.select("id", "nama");
          })
          .where({ dihapus: 0 });
      })
      .with("sanksiSiswa", (builder) => {
        builder.with("bukti").where({ dihapus: 0 });
      })
      .with("prestasi", (builder) => {
        builder.with("tingkatPrestasi").where({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ id: user_id })
      .first();

    return response.ok({
      siswa,
      pelanggaran,
      sanksi,
      penghargaan,
    });
  }

  async postPelanggaranSiswa({ response, request, auth, params: { user_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { m_pelanggaran_id, catatan, tanggal_pelanggaran, poin } =
      request.post();
    const rules = {
      m_pelanggaran_id: "required",
      catatan: "required",
      tanggal_pelanggaran: "required",
      poin: "required",
    };
    const message = {
      "m_pelanggaran_id.required": "Bentuk Pelanggaran harus diisi",
      "catatan.required": "Catatan harus diisi",
      "tanggal_pelanggaran.required": "Tanggal Pelanggaran harus diisi",
      "poin.required": "Poin harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const siswa = await TkSiswaPelanggaran.create({
      m_pelanggaran_id,
      catatan,
      tanggal_pelanggaran,
      poin,
      m_user_pelapor_id: user.id,
      m_user_id: user_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPelanggaranSiswa({
    response,
    request,
    auth,
    params: { pelanggaran_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { m_pelanggaran_id, catatan, tanggal_pelanggaran, poin } =
      request.post();
    const rules = {
      m_pelanggaran_id: "required",
      catatan: "required",
      tanggal_pelanggaran: "required",
      poin: "required",
    };
    const message = {
      "m_pelanggaran_id.required": "Bentuk Pelanggaran harus diisi",
      "catatan.required": "Catatan harus diisi",
      "tanggal_pelanggaran.required": "Tanggal Pelanggaran harus diisi",
      "poin.required": "Poin harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const pelanggaran = await TkSiswaPelanggaran.query()
      .where({ id: pelanggaran_id })
      .update({
        m_pelanggaran_id,
        catatan,
        tanggal_pelanggaran,
        poin,
        dihapus: 0,
      });

    if (!pelanggaran) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePelanggaranSiswa({
    response,
    request,
    auth,
    params: { pelanggaran_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const pelanggaran = await TkSiswaPelanggaran.query()
      .where({ id: pelanggaran_id })
      .update({
        dihapus: 1,
      });

    if (!pelanggaran) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postSanksiSiswa({ response, request, auth, params: { user_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { m_sanksi_pelanggaran_id, keterangan, lampiran, link } =
      request.post();
    const rules = {
      m_sanksi_pelanggaran_id: "required",
      keterangan: "required",
    };
    const message = {
      "m_sanksi_pelanggaran_id.required": "Sanksi harus diisi",
      "keterangan.required": "Keterangan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const siswa = await MSanksiSiswa.create({
      m_sanksi_pelanggaran_id,
      keterangan,
      lampiran: lampiran.toString(),
      link: link.toString(),
      m_user_id: user_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putSanksiSiswa({ response, request, auth, params: { sanksi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { m_sanksi_pelanggaran_id, keterangan, lampiran, link } =
      request.post();
    const rules = {
      m_sanksi_pelanggaran_id: "required",
      keterangan: "required",
    };
    const message = {
      "m_sanksi_pelanggaran_id.required": "Sanksi harus diisi",
      "keterangan.required": "Keterangan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const sanksi = await MSanksiSiswa.query().where({ id: sanksi_id }).update({
      m_sanksi_pelanggaran_id,
      keterangan,
      lampiran: lampiran.toString(),
      link: link.toString(),
      dihapus: 0,
    });

    if (!sanksi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteSanksiSiswa({ response, request, auth, params: { sanksi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const sanksi = await MSanksiSiswa.query().where({ id: sanksi_id }).update({
      dihapus: 1,
    });

    if (!sanksi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postBuktiSanksiSiswa({ response, request, auth, params: { user_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { m_sanksi_siswa_id, lampiran, link } = request.post();
    const rules = {
      m_sanksi_siswa_id: "required",
    };
    const message = {
      "m_sanksi_siswa_id.required": "Sanksi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const siswa = await MBuktiPelaksanaanSanksi.create({
      m_sanksi_siswa_id,
      lampiran: lampiran.toString(),
      link: link.toString(),
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putBuktiSanksiSiswa({
    response,
    request,
    auth,
    params: { sanksi_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { konfirmasi, lampiran, link } = request.post();

    let sanksi;
    if (konfirmasi) {
      sanksi = await MBuktiPelaksanaanSanksi.query()
        .where({ id: sanksi_id })
        .update({
          konfirmasi,
        });
    } else {
      sanksi = await MBuktiPelaksanaanSanksi.query()
        .where({ id: sanksi_id })
        .update({
          lampiran: lampiran.toString(),
          link: link.toString(),
          dihapus: 0,
        });
    }

    if (!sanksi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteBuktiSanksiSiswa({
    response,
    request,
    auth,
    params: { sanksi_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const sanksi = await MBuktiPelaksanaanSanksi.query()
      .where({ id: sanksi_id })
      .update({
        dihapus: 1,
      });

    if (!sanksi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  // Peraturan Service
  async getBabPeraturan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const bab = await MBabPeraturan.query()
      .withCount("pasal as total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    return response.ok({
      bab,
    });
  }

  async postBabPeraturan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama } = request.post();
    const rules = {
      nama: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const bab = await MBabPeraturan.create({
      nama,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putBabPeraturan({ response, request, auth, params: { bab_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama } = request.post();
    const rules = {
      nama: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const bab = await MBabPeraturan.query().where({ id: bab_id }).update({
      nama,
    });

    if (!bab) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteBabPeraturan({ response, request, auth, params: { bab_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const bab = await MBabPeraturan.query().where({ id: bab_id }).update({
      dihapus: 1,
    });

    if (!bab) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  // Peraturan Service
  async detailBabPeraturan({ response, request, auth, params: { bab_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const bab = await MBabPeraturan.query()
      .with("pasal", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ dihapus: 0 })
      .andWhere({ id: bab_id })
      .first();

    return response.ok({
      bab,
    });
  }

  async postPasalPeraturan({ response, request, auth, params: { bab_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, isi, foto } = request.post();
    const rules = {
      nama: "required",
      isi: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "isi.required": "Isi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const pasal = await MPasalPeraturan.create({
      nama,
      isi,
      foto,
      m_bab_id: bab_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPasalPeraturan({ response, request, auth, params: { pasal_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { nama, isi, foto } = request.post();
    const rules = {
      nama: "required",
      isi: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "isi.required": "Isi harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const pasal = await MPasalPeraturan.query().where({ id: pasal_id }).update({
      nama,
      isi,
      foto,
    });

    if (!pasal) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePasalPeraturan({
    response,
    request,
    auth,
    params: { pasal_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const pasal = await MPasalPeraturan.query().where({ id: pasal_id }).update({
      dihapus: 1,
    });

    if (!pasal) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postPenghargaan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { tingkat, poin } = request.post();
    const rules = {
      tingkat: "required",
      poin: "required",
    };
    const message = {
      "tingkat.required": "Tingkat harus diisi",
      "poin.required": "Poin harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const penghargaan = await MPenghargaan.create({
      tingkat,
      poin,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPenghargaan({
    response,
    request,
    auth,
    params: { penghargaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { tingkat, poin } = request.post();
    const rules = {
      tingkat: "required",
      poin: "required",
    };
    const message = {
      "tingkat.required": "Tingkat harus diisi",
      "poin.required": "Poin harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const penghargaan = await MPenghargaan.query()
      .where({ id: penghargaan_id })
      .update({
        tingkat,
        poin,
      });

    if (!penghargaan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePenghargaan({
    response,
    request,
    auth,
    params: { penghargaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const penghargaan = await MPenghargaan.query()
      .where({ id: penghargaan_id })
      .update({
        dihapus: 1,
      });

    if (!penghargaan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postPenghargaanSiswa({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      nama,
      tingkat,
      peringkat,
      lembaga,
      tanggal_terbit,
      sertifikat_kadaluarsa,
      tanggal_kadaluarsa,
      id_sertifikat,
      lampiran,
      link,
      user_id,
    } = request.post();
    // const rules = {
    //   tingkat: "required",
    //   poin: "required",
    // };
    // const message = {
    //   "tingkat.required": "Tingkat harus diisi",
    //   "poin.required": "Poin harus diisi",
    // };
    // const validation = await validate(request.all(), rules, message);
    // if (validation.fails()) {
    //   return response.unprocessableEntity(validation.messages());
    // }
    // user_id = user_id.length ? user_id : [];

    if (user_id.length) {
      await Promise.all(
        user_id.map(async (d) => {
          const penghargaan = await MPrestasi.create({
            nama,
            tingkat,
            peringkat,
            lembaga,
            tanggal_terbit,
            sertifikat_kadaluarsa,
            tanggal_kadaluarsa,
            id_sertifikat,
            lampiran: lampiran.toString(),
            link: link.toString(),
            m_sekolah_id: sekolah.id,
            m_user_id: d,
            m_ta_id: ta.id,
            dihapus: 0,
          });
        })
      );
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPenghargaanSiswa({
    response,
    request,
    auth,
    params: { penghargaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      nama,
      tingkat,
      peringkat,
      lembaga,
      tanggal_terbit,
      sertifikat_kadaluarsa,
      tanggal_kadaluarsa,
      id_sertifikat,
      lampiran,
      link,
      user_id,
    } = request.post();
    // const rules = {
    //   tingkat: "required",
    //   poin: "required",
    // };
    // const message = {
    //   "tingkat.required": "Tingkat harus diisi",
    //   "poin.required": "Poin harus diisi",
    // };
    // const validation = await validate(request.all(), rules, message);
    // if (validation.fails()) {
    //   return response.unprocessableEntity(validation.messages());
    // }

    const penghargaan = await MPrestasi.query()
      .where({ id: penghargaan_id })
      .update({
        nama,
        tingkat,
        peringkat,
        lembaga,
        tanggal_terbit,
        sertifikat_kadaluarsa,
        tanggal_kadaluarsa,
        id_sertifikat,
        lampiran: lampiran.toString(),
        link: link.toString(),
      });

    if (!penghargaan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deletePenghargaanSiswa({
    response,
    request,
    auth,
    params: { penghargaan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const penghargaan = await MPrestasi.query()
      .where({ id: penghargaan_id })
      .update({
        dihapus: 1,
      });

    if (!penghargaan) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async getBukuTamu({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { tanggal } = request.post();

    let buku;

    if (tanggal) {
      buku = await MBukuTamu.query()
        .whereBetween("tanggal_dibuat", [`${tanggal}`, `${tanggal}`])
        .andWhere({ dihapus: 0 })
        .fetch();
    } else {
      buku = await MBukuTamu.query().where({ dihapus: 0 }).paginate(25);
    }

    return response.ok({
      buku,
    });
  }

  async detailBukuTamu({ response, request, auth, params: { buku_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const buku = await MBukuTamu.query()
      .where({ dihapus: 0 })
      .andWhere({ id: buku_id })
      .first();

    return response.ok({
      buku,
    });
  }

  async getPostBukuTamu({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    // const provinsi = Province.query().fetch();
    // const kota = Regency.query().fetch();

    return response.ok({
      provinsi,
      kota,
    });
  }

  async postBukuTamu({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      nama,
      no_hp,
      instansi,
      bidang,
      alamat,
      province_id,
      regency_id,
      kodepos,
      keterangan,
      ttd,
      tanggal_dibuat,
    } = request.post();
    const rules = {
      nama: "required",
      no_hp: "required",
      instansi: "required",
      bidang: "required",
      alamat: "required",
      province_id: "required",
      regency_id: "required",
      kodepos: "required",
      keterangan: "required",
      ttd: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "no_hp.required": "Nomor Telepon harus diisi",
      "instansi.required": "Asal Instansi harus diisi",
      "bidang.required": "Bidang harus diisi",
      "alamat.required": "Alamat harus diisi",
      "province_id.required": "Provinsi harus diisi",
      "regency_id.required": "Kota/Kabupaten harus diisi",
      "kodepos.required": "Kode Pos harus diisi",
      "keterangan.required": "Keterangan harus diisi",
      "ttd.required": "Tanda Tangan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    // const jadwalMengajar = await MJadwalMengajar.query()
    //   .with("mataPelajaran")
    //   .where({ id: 14521 })
    //   .first();

    // const data = [jadwalMengajar, user];

    const buku = await MBukuTamu.create({
      nama,
      no_hp,
      instansi,
      bidang,
      alamat,
      province_id,
      regency_id,
      kodepos,
      keterangan,
      ttd,
      tanggal_dibuat,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
    });
    // const gmail = await Mail.send(
    //   `emails.sppbayar`,
    //   user.toJSON(),
    //   (message) => {
    //     message
    //       .to(`raihanvans@gmail.com`)
    //       .from("no-reply@smarteschool.id")
    //       .subject("SPP terkonfirmasi");
    //   }
    // );
    // if (gmail) {
    //   return response.ok({
    //     message: messageEmailSuccess,
    //   });
    // }

    return response.ok({
      message: messagePostSuccess,
    });
  }
  async downloadBukuTamu({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const buku = await MBukuTamu.query().where({ dihapus: 0 }).fetch();

    // const province = await this.getProvince("1");
    // return province;

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Daftar Buku Tamu`);
    worksheet.mergeCells("A1:L1");
    worksheet.mergeCells("A2:L2");
    worksheet.getCell(
      "A3"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.addConditionalFormatting({
      ref: "A1:L2",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });
    worksheet.addConditionalFormatting({
      ref: "A4:L4",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });
    worksheet.getCell("A1").value = "Rekap Buku Tamu";
    worksheet.getCell("A2").value = sekolah.nama;
    await Promise.all(
      buku.toJSON().map(async (d, idx) => {
        // add column headers
        worksheet.getRow(4).values = [
          "No",
          "Nama",
          "Nomor Telepon",
          "Asal Instansi",
          "Bidang Instansi",
          "Alamat",
          "Provinsi",
          "Regency",
          "Kode Pos",
          "Tanggal Kehadiran",
          "Keterangan",
          "Tanda Tangan",
        ];
        worksheet.columns = [
          { key: "no" },
          { key: "nama" },
          { key: "no_hp" },
          { key: "instansi" },
          { key: "bidang" },
          { key: "alamat" },
          { key: "province_id" },
          { key: "regency_id" },
          { key: "kodepos" },
          { key: "created_at" },
          { key: "keterangan" },
          { key: "ttd" },
        ];

        // Add row using key mapping to columns
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          nama: d ? d.nama : "-",
          instansi: d ? d.instansi : "-",
          no_hp: d ? d.no_hp : "-",
          bidang: d ? d.bidang : "-",
          alamat: d ? d.alamat : "-",
          province_id: d ? d.province_id : "-",
          regency_id: d ? d.regency_id : "-",
          deskripsi: d ? d.deskripsi : "-",
          created_at: d ? d.created_at : "-",
          kodepos: d ? d.kodepos : "-",
          keterangan: d ? d.keterangan : "-",
          ttd: d ? d.ttd : "-",
        });
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 4}:L${(idx + 1) * 1 + 4}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 4}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
      })
    );
    let namaFile = `/uploads/rekap-Buku-Tamu-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async postCron({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { date, time } = request.post();

    const jadwalMengajar = await MJadwalMengajar.query()
      .with("mataPelajaran")
      .where({ id: 14521 })
      .first();

    const tanggal = moment(date).format(`DD`);
    const bulan = moment(date).format(`M`);
    const waktu = `${date} ${time}`;
    const jam = moment(waktu).format(`H`);
    const menit = moment(waktu).format(`mm`);

    // return response.ok({
    //   tanggal,
    //   bulan,
    //   waktu,
    //   jam,
    //   menit,
    // });
    // const data = [jadwalMengajar, user];

    // const task = cron.schedule(
    //   `${menit} ${jam} ${tanggal} ${bulan} *`,
    //   () => {
    //     Mail.send(`emails.sppbayar`, user.toJSON(), (message) => {
    //       message
    //         .to(`raihanvans@gmail.com`)
    //         .from("no-reply@smarteschool.id")
    //         .subject("SPP terkonfirmasi");
    //     });
    //   },
    //   {
    //     scheduled: true,
    //     timezone: "Asia/Jakarta",
    //   }
    // );

    // const gmail = await Mail.send(
    //   `emails.sppbayar`,
    //   user.toJSON(),
    //   (message) => {
    //     message
    //       .to(`raihanvans@gmail.com`)
    //       .from("no-reply@smarteschool.id")
    //       .subject("SPP terkonfirmasi");
    //   }
    // );

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async downloadMonev({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await Mta.query().where({ m_sekolah_id: sekolah.id }).first();

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const { tanggal_awal, tanggal_akhir } = request.post();

    const tanggalDistinct = await Database.raw(
      "SELECT DISTINCT DATE_FORMAT(tanggal_pembagian, '%Y-%m-%d') as tanggalDistinct from m_timeline WHERE tanggal_pembagian BETWEEN ? AND  ? ",
      [tanggal_awal, tanggal_akhir]
    );

    let workbook = new Excel.Workbook();

    await Promise.all(
      tanggalDistinct[0].map(async (e) => {
        const checkDataTimeline = await MTimeline.query()
          .with("user", (builder) => {
            builder.select("id", "nama").with("mataPelajaran", (builder) => {
              builder
                .where({ dihapus: 0 })
                .andWhere({ m_sekolah_id: sekolah.id });
            });
          })
          .with("rombel", (builder) => {
            builder.withCount("anggotaRombel as totalSiswa", (builder) => {
              builder.where({ dihapus: 0 });
            });
          })
          .withCount("tkTimeline as total", (builder) => {
            builder
              .where({ tipe: "absen" })
              .andWhere({ absen: "hadir" })
              .andWhere({ dihapus: 0 });
          })
          .withCount("tkTimeline as totalAlpa", (builder) => {
            builder
              .whereNot({ absen: "hadir" })
              .andWhere({ tipe: "absen" })
              .andWhere({ dihapus: 0 });
          })
          .where({ tipe: "absen" })
          .whereNotNull("id")
          .andWhere({ tanggal_pembagian: e.tanggalDistinct })
          .fetch();

        const hariIni = moment(e.tanggalDistinct).format(`DD-MMMM-YYYY`);
        let worksheet = workbook.addWorksheet(`${hariIni}`);
        worksheet.mergeCells("A1:K1");
        worksheet.mergeCells("A2:K2");
        worksheet.mergeCells("A3:K3");
        // worksheet.getCell(
        //   "A10"
        // ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
        worksheet.addConditionalFormatting({
          ref: "A1:K3",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Calibri",
                  family: 4,
                  size: 14,
                  bold: true,
                },
                // fill: {
                //   type: "pattern",
                //   pattern: "solid",
                //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
                // },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                // border: {
                //   top: { style: "thin" },
                //   left: { style: "thin" },
                //   bottom: { style: "thin" },
                //   right: { style: "thin" },
                // },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: "A5:K9",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Calibri",
                  family: 4,
                  size: 13,
                  bold: true,
                },
                // fill: {
                //   type: "pattern",
                //   pattern: "solid",
                //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
                // },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                // border: {
                //   top: { style: "thin" },
                //   left: { style: "thin" },
                //   bottom: { style: "thin" },
                //   right: { style: "thin" },
                // },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: "A11:K11",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 12,
                  bold: true,
                },
                fill: {
                  type: "pattern",
                  pattern: "solid",
                  bgColor: { argb: "ffff00", fgColor: { argb: "ffff00" } },
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                  wrapText: true,
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.getCell("A1").value =
          "MONITORING KEGIATAN PEMBELAJARAN DIRUMAH (HOME LEARNING)";
        worksheet.getCell(
          "A2"
        ).value = `DALAM RANGKA MENINGKATKAN KEWASPADAAN PENYEBARAN COVID 19`;
        worksheet.getCell(
          "A3"
        ).value = `SUDIN PENDIDIKAN WILAYAH ${sekolah.kabupaten}`;
        worksheet.getCell("B5").value = `HARI/TANGGAL`;
        worksheet.getCell("B6").value = `NAMA PETUGAS MONITORING`;
        worksheet.getCell("B7").value = `NAMA SEKOLAH`;
        worksheet.getCell("B8").value = `NAMA KEPALA SEKOLAH`;
        worksheet.getCell("B9").value = `ALAMAT SEKOLAH`;

        worksheet.getCell("D5").value = `:`;
        worksheet.getCell("D6").value = `:`;
        worksheet.getCell("D7").value = `:`;
        worksheet.getCell("D8").value = `:`;
        worksheet.getCell("D9").value = `:`;

        worksheet.getCell("E5").value = `${hariIni}`;
        worksheet.getCell("E6").value = `${user.nama}`;
        worksheet.getCell("E7").value = `${sekolah.nama}`;
        worksheet.getCell("E8").value = `${ta.nama_kepsek}`;
        worksheet.getCell("E9").value = `${sekolah.alamat}`;
        worksheet.getRow(11).height = 45;
        worksheet.getColumn("A").width = 13;
        worksheet.getColumn("B").width = 18;
        worksheet.getColumn("C").width = 18;
        worksheet.getColumn("D").width = 13;
        worksheet.getColumn("E").width = 28;
        worksheet.getColumn("F").width = 20;
        worksheet.getColumn("G").width = 18;
        worksheet.getColumn("H").width = 13;
        worksheet.getColumn("I").width = 18;
        worksheet.getColumn("J").width = 12;
        worksheet.getColumn("K").width = 19;

        const dataFilter = await Promise.all(
          checkDataTimeline.toJSON().filter((timeline) => timeline != null)
        );
        await Promise.all(
          dataFilter.map(async (d, idx) => {
            // add column headers
            worksheet.getRow(11).values = [
              "No",
              "Nama Guru",
              "Mengajar Kelas",
              "Jumlah Siswa",
              "Mapel dan Tujuan Pembelajaran",
              "Materi Pembelajaran",
              "Mode/Teknik Pembelajaran",
              "Jumlah Siswa Hadir",
              "Hasil Pembelajaran",
              "Jumlah Siswa Alpa",
              "Kendala dan Tindak Lanjut",
            ];

            worksheet.columns = [
              { key: "no" },
              { key: "nama" },
              { key: "kelas" },
              { key: "jumsiswa" },
              { key: "mapel" },
              { key: "materi" },
              { key: "moda" },
              { key: "jsiswa" },
              { key: "hasil" },
              { key: "jsiswax" },
              { key: "kendala" },
            ];

            // Add row using key mapping to columns
            let row = worksheet.addRow({
              no: `${idx + 1}`,
              nama: d.user ? d.user.nama : "-",
              kelas: d.rombel ? d.rombel.nama : "-",
              jumsiswa: d.rombel.__meta__ ? d.rombel.__meta__.totalSiswa : "-",
              mapel: d.user.mataPelajaran[0]
                ? d.user.mataPelajaran[0].nama
                : "-",
              materi: d ? d.jurnal : "-",
              moda: "Smarteschool",
              jsiswa: d.__meta__ ? d.__meta__.total : "-",
              hasil: d ? d.jurnal : "-",
              jsiswax: d.__meta__ ? d.__meta__.totalAlpa : "-",
              kendala: "-",
            });
            if (idx == dataFilter.length - 1) {
              worksheet.getCell(`A${idx + 16}`).value = `Kepala....`;
              worksheet.getCell(`A${idx + 23}`).value = `…………………………………………………….`;
              worksheet.getCell(`A${idx + 24}`).value = `NIP :`;
              worksheet.mergeCells(`I${idx + 15}:K${idx + 15}`);
              worksheet.mergeCells(`I${idx + 16}:K${idx + 16}`);
              worksheet.mergeCells(`I${idx + 17}:K${idx + 17}`);
              worksheet.mergeCells(`I${idx + 18}:K${idx + 18}`);
              worksheet.mergeCells(`I${idx + 23}:K${idx + 23}`);
              worksheet.mergeCells(`I${idx + 24}:K${idx + 24}`);
              worksheet.getCell(`I${idx + 15}`).value = `${hariIni}`;
              worksheet.getCell(`I${idx + 16}`).value = `Petugas Monitoring`;
              worksheet.getCell(
                `I${idx + 17}`
              ).value = `Kepala Satuan Pelaksana Pendidikan`;
              worksheet.getCell(
                `I${idx + 18}`
              ).value = `Kecamatan ${sekolah.kecamatan}`;
              worksheet.getCell(`I${idx + 23}`).value = `${user.nama}`;
              worksheet.getCell(`I${idx + 24}`).value = `NIP : ${user.nip}`;
              worksheet.addConditionalFormatting({
                ref: `I${idx + 15}:I${idx + 24}`,
                rules: [
                  {
                    type: "expression",
                    formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                    style: {
                      font: {
                        name: "Calibri",
                        family: 4,
                        size: 11,
                        // bold: true,
                      },
                      alignment: {
                        vertical: "middle",
                        horizontal: "center",
                      },
                    },
                  },
                ],
              });
            }
            worksheet.addConditionalFormatting({
              ref: `B${(idx + 1) * 1 + 11}:K${(idx + 1) * 1 + 11}`,
              rules: [
                {
                  type: "expression",
                  formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                  style: {
                    font: {
                      name: "Calibri",
                      family: 4,
                      size: 11,
                      // bold: true,
                    },
                    alignment: {
                      vertical: "middle",
                      horizontal: "center",
                      wrapText: true,
                    },
                    border: {
                      top: { style: "thin" },
                      left: { style: "thin" },
                      bottom: { style: "thin" },
                      right: { style: "thin" },
                    },
                  },
                },
              ],
            });
            worksheet.addConditionalFormatting({
              ref: `A${(idx + 1) * 1 + 11}`,
              rules: [
                {
                  type: "expression",
                  formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                  style: {
                    font: {
                      name: "Calibri",
                      family: 4,
                      size: 11,
                      // bold: true,
                    },
                    alignment: {
                      vertical: "middle",
                      horizontal: "center",
                    },
                    border: {
                      top: { style: "thin" },
                      left: { style: "thin" },
                      bottom: { style: "thin" },
                      right: { style: "thin" },
                    },
                  },
                },
              ],
            });
          })
        );
      })
    );

    let namaFile = `/uploads/rekap-Monev-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async downloadMonev1({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await Mta.query().where({ m_sekolah_id: sekolah.id }).first();

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const { tanggal_awal, tanggal_akhir } = request.post();

    const tanggalDistinct = await Database.raw(
      "SELECT DISTINCT DATE_FORMAT(tanggal_pembagian, '%Y-%m-%d') as tanggalDistinct from m_timeline WHERE tanggal_pembagian BETWEEN ? AND  ? ",
      [tanggal_awal, tanggal_akhir]
    );

    // const checkDataTimeline = await MTimeline.query()
    // .with("user", (builder) => {
    //   builder
    //     .select("id", "nama", "m_sekolah_id")
    //     .with("mataPelajaran", (builder) => {
    //       builder
    //         .where({ dihapus: 0 })
    //         .andWhere({ m_sekolah_id: sekolah.id });
    //     });
    // })
    // .with("rombel", (builder) => {
    //   builder.withCount("anggotaRombel as totalSiswa", (builder) => {
    //     builder.where({ dihapus: 0 });
    //   });
    // })
    // .withCount("tkTimeline as total", (builder) => {
    //   builder
    //     .where({ tipe: "absen" })
    //     .andWhere({ absen: "hadir" })
    //     .andWhere({ dihapus: 0 });
    // })
    // .withCount("tkTimeline as totalAlpa", (builder) => {
    //   builder
    //     .whereNot({ absen: "hadir" })
    //     .andWhere({ tipe: "absen" })
    //     .andWhere({ dihapus: 0 });
    // })
    // .where({ tipe: "absen" })
    // .whereNotNull("id")
    // .andWhere({ tanggal_pembagian: tanggal_awal })
    // .fetch();
    // const dataFilter = await Promise.all(
    //   checkDataTimeline.toJSON().filter((timeline) => timeline != null)
    // );
    // return dataFilter;
    let workbook = new Excel.Workbook();

    await Promise.all(
      tanggalDistinct[0].map(async (e) => {
        const allUser = await User.query()
          .with("pertemuan", (builder) => {
            builder
              .with("user", (builder) => {
                builder.select("id", "nama", "m_sekolah_id");
              })
              .with("mataPelajaran", (builder) => {
                builder
                  .where({ dihapus: 0 })
                  .andWhere({ m_sekolah_id: sekolah.id });
              })
              .with("rombel", (builder) => {
                builder.withCount("anggotaRombel as totalSiswa", (builder) => {
                  builder.where({ dihapus: 0 });
                });
              })
              .withCount("tkTimeline as total", (builder) => {
                builder
                  .where({ tipe: "absen" })
                  .andWhere({ absen: "hadir" })
                  .andWhere({ dihapus: 0 });
              })
              .withCount("tkTimeline as totalAlpa", (builder) => {
                builder
                  .whereNot({ absen: "hadir" })
                  .andWhere({ tipe: "absen" })
                  .andWhere({ dihapus: 0 });
              })
              .where({ tipe: "absen" })
              .whereNotNull("id")
              .whereBetween("tanggal_pembagian", [
                `${e.tanggalDistinct} 00:00:00`,
                `${e.tanggalDistinct} 23:59:59`,
              ]);
            // .andWhere({ tanggal_pembagian: tanggal_awal });
          })
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: sekolah.id })
          .andWhere({ role: "guru" })
          .fetch();
        // const checkDataTimeline = await MTimeline.query()
        //   .with("user", (builder) => {
        //     builder.select("id", "nama").with("mataPelajaran", (builder) => {
        //       builder
        //         .where({ dihapus: 0 })
        //         .andWhere({ m_sekolah_id: sekolah.id });
        //     });
        //   })
        //   .with("rombel", (builder) => {
        //     builder.withCount("anggotaRombel as totalSiswa", (builder) => {
        //       builder.where({ dihapus: 0 });
        //     });
        //   })
        //   .withCount("tkTimeline as total", (builder) => {
        //     builder
        //       .where({ tipe: "absen" })
        //       .andWhere({ absen: "hadir" })
        //       .andWhere({ dihapus: 0 });
        //   })
        //   .withCount("tkTimeline as totalAlpa", (builder) => {
        //     builder
        //       .whereNot({ absen: "hadir" })
        //       .andWhere({ tipe: "absen" })
        //       .andWhere({ dihapus: 0 });
        //   })
        //   .where({ tipe: "absen" })
        //   .whereNotNull("id")
        //   .andWhere({ tanggal_pembagian: e.tanggalDistinct })
        //   .fetch();

        const hariIni = moment(e.tanggalDistinct).format(`DD MMMM YYYY`);
        let worksheet = workbook.addWorksheet(`${hariIni}`);
        worksheet.mergeCells("A1:K1");
        worksheet.mergeCells("A2:K2");
        worksheet.mergeCells("A3:K3");
        // worksheet.getCell(
        //   "A10"
        // ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
        worksheet.addConditionalFormatting({
          ref: "A1:K3",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Calibri",
                  family: 4,
                  size: 14,
                  bold: true,
                },
                // fill: {
                //   type: "pattern",
                //   pattern: "solid",
                //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
                // },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                // border: {
                //   top: { style: "thin" },
                //   left: { style: "thin" },
                //   bottom: { style: "thin" },
                //   right: { style: "thin" },
                // },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: "A5:K9",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Calibri",
                  family: 4,
                  size: 13,
                  bold: true,
                },
                // fill: {
                //   type: "pattern",
                //   pattern: "solid",
                //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
                // },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                // border: {
                //   top: { style: "thin" },
                //   left: { style: "thin" },
                //   bottom: { style: "thin" },
                //   right: { style: "thin" },
                // },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: "A11:K11",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 12,
                  bold: true,
                },
                fill: {
                  type: "pattern",
                  pattern: "solid",
                  bgColor: { argb: "ffff00", fgColor: { argb: "ffff00" } },
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                  wrapText: true,
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.getCell("A1").value =
          "MONITORING KEGIATAN PEMBELAJARAN DIRUMAH (HOME LEARNING)";
        worksheet.getCell(
          "A2"
        ).value = `DALAM RANGKA MENINGKATKAN KEWASPADAAN PENYEBARAN COVID 19`;
        worksheet.getCell(
          "A3"
        ).value = `SUDIN PENDIDIKAN WILAYAH ${sekolah.kabupaten}`;
        worksheet.getCell("B5").value = `HARI/TANGGAL`;
        worksheet.getCell("B6").value = `NAMA PETUGAS MONITORING`;
        worksheet.getCell("B7").value = `NAMA SEKOLAH`;
        worksheet.getCell("B8").value = `NAMA KEPALA SEKOLAH`;
        worksheet.getCell("B9").value = `ALAMAT SEKOLAH`;

        worksheet.getCell("D5").value = `:`;
        worksheet.getCell("D6").value = `:`;
        worksheet.getCell("D7").value = `:`;
        worksheet.getCell("D8").value = `:`;
        worksheet.getCell("D9").value = `:`;

        worksheet.getCell("E5").value = `${hariIni}`;
        worksheet.getCell("E6").value = `${user.nama}`;
        worksheet.getCell("E7").value = `${sekolah.nama}`;
        worksheet.getCell("E8").value = `${ta.nama_kepsek}`;
        worksheet.getCell("E9").value = `${sekolah.alamat}`;
        worksheet.getRow(11).height = 45;
        worksheet.getColumn("A").width = 13;
        worksheet.getColumn("B").width = 18;
        worksheet.getColumn("C").width = 18;
        worksheet.getColumn("D").width = 13;
        worksheet.getColumn("E").width = 28;
        worksheet.getColumn("F").width = 20;
        worksheet.getColumn("G").width = 18;
        worksheet.getColumn("H").width = 13;
        worksheet.getColumn("I").width = 18;
        worksheet.getColumn("J").width = 12;
        worksheet.getColumn("K").width = 19;

        // const dataFilter = await Promise.all(
        //   checkDataTimeline.toJSON().filter((timeline) => timeline != null)
        // );
        // return dataFilter;
        await Promise.all(
          allUser.toJSON().map(async (d, idx) => {
            worksheet.getRow(11).values = [
              "No",
              "Nama Guru",
              "Mengajar Kelas",
              "Jumlah Siswa",
              "Mapel dan Tujuan Pembelajaran",
              "Materi Pembelajaran",
              "Mode/Teknik Pembelajaran",
              "Jumlah Siswa Hadir",
              "Hasil Pembelajaran",
              "Jumlah Siswa Alpa",
              "Kendala dan Tindak Lanjut",
            ];

            worksheet.columns = [
              { key: "no" },
              { key: "nama" },
              { key: "status" },
            ];

            // Add row using key mapping to columns
            if (d.pertemuan.length == 0) {
              let row = worksheet.addRow({
                no: `${idx + 1}`,
                nama: d ? d.nama : "-",
                status: "Guru ini tidak ada Jadwal Mengajar",
              });
            } else {
              // let row = worksheet.addRow({
              //   no: `${idx + 1}`,
              //   nama: d ? d.nama : "-",
              // });
              await Promise.all(
                d.pertemuan.map(async (a, nox) => {
                  worksheet.getRow(11).values = [
                    "No",
                    "Nama Guru",
                    "Mengajar Kelas",
                    "Jumlah Siswa",
                    "Mapel dan Tujuan Pembelajaran",
                    "Materi Pembelajaran",
                    "Mode/Teknik Pembelajaran",
                    "Jumlah Siswa Hadir",
                    "Hasil Pembelajaran",
                    "Jumlah Siswa Alpa",
                    "Kendala dan Tindak Lanjut",
                  ];

                  worksheet.columns = [
                    { key: "no" },
                    { key: "nama" },
                    { key: "kelas" },
                    { key: "jumsiswa" },
                    { key: "mapel" },
                    { key: "materi" },
                    { key: "moda" },
                    { key: "jsiswa" },
                    { key: "hasil" },
                    { key: "jsiswax" },
                    { key: "kendala" },
                  ];

                  // Add row using key mapping to columns
                  let row = worksheet.addRow({
                    no: `${idx + 1}`,
                    nama: d ? d.nama : "-",
                    kelas: a.rombel ? a.rombel.nama : "-",
                    jumsiswa: a.rombel.__meta__
                      ? a.rombel.__meta__.totalSiswa
                      : "-",
                    mapel: a.user.mataPelajaran
                      ? a.user.mataPelajaran.nama
                      : "-",
                    materi: a ? a.jurnal : "-",
                    moda: "Smarteschool",
                    jsiswa: a.__meta__ ? a.__meta__.total : "-",
                    hasil: a ? a.jurnal : "-",
                    jsiswax: a.__meta__ ? a.__meta__.totalAlpa : "-",
                    kendala: "-",
                  });

                  worksheet.addConditionalFormatting({
                    ref: `B${(idx + 1) * 1 + 11}:K${(idx + 1) * 1 + 11}`,
                    rules: [
                      {
                        type: "expression",
                        formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                        style: {
                          font: {
                            name: "Calibri",
                            family: 4,
                            size: 11,
                            // bold: true,
                          },
                          alignment: {
                            vertical: "middle",
                            horizontal: "center",
                            wrapText: true,
                          },
                          border: {
                            top: { style: "thin" },
                            left: { style: "thin" },
                            bottom: { style: "thin" },
                            right: { style: "thin" },
                          },
                        },
                      },
                    ],
                  });
                  worksheet.addConditionalFormatting({
                    ref: `A${(idx + 1) * 1 + 11}`,
                    rules: [
                      {
                        type: "expression",
                        formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                        style: {
                          font: {
                            name: "Calibri",
                            family: 4,
                            size: 11,
                            // bold: true,
                          },
                          alignment: {
                            vertical: "middle",
                            horizontal: "center",
                          },
                          border: {
                            top: { style: "thin" },
                            left: { style: "thin" },
                            bottom: { style: "thin" },
                            right: { style: "thin" },
                          },
                        },
                      },
                    ],
                  });
                })
              );
            }
            worksheet.addConditionalFormatting({
              ref: `B${(idx + 1) * 1 + 11}:K${(idx + 1) * 1 + 11}`,
              rules: [
                {
                  type: "expression",
                  formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                  style: {
                    font: {
                      name: "Calibri",
                      family: 4,
                      size: 11,
                      // bold: true,
                    },
                    alignment: {
                      vertical: "middle",
                      horizontal: "center",
                      wrapText: true,
                    },
                    border: {
                      top: { style: "thin" },
                      left: { style: "thin" },
                      bottom: { style: "thin" },
                      right: { style: "thin" },
                    },
                  },
                },
              ],
            });
            worksheet.addConditionalFormatting({
              ref: `A${(idx + 1) * 1 + 11}`,
              rules: [
                {
                  type: "expression",
                  formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                  style: {
                    font: {
                      name: "Calibri",
                      family: 4,
                      size: 11,
                      // bold: true,
                    },
                    alignment: {
                      vertical: "middle",
                      horizontal: "center",
                    },
                    border: {
                      top: { style: "thin" },
                      left: { style: "thin" },
                      bottom: { style: "thin" },
                      right: { style: "thin" },
                    },
                  },
                },
              ],
            });
            // add column headers

            if (idx == allUser.length - 1) {
              worksheet.getCell(`A${idx + 16}`).value = `Kepala....`;
              worksheet.getCell(`A${idx + 23}`).value = `…………………………………………………….`;
              worksheet.getCell(`A${idx + 24}`).value = `NIP :`;
              worksheet.mergeCells(`I${idx + 15}:K${idx + 15}`);
              worksheet.mergeCells(`I${idx + 16}:K${idx + 16}`);
              worksheet.mergeCells(`I${idx + 17}:K${idx + 17}`);
              worksheet.mergeCells(`I${idx + 18}:K${idx + 18}`);
              worksheet.mergeCells(`I${idx + 23}:K${idx + 23}`);
              worksheet.mergeCells(`I${idx + 24}:K${idx + 24}`);
              worksheet.getCell(`I${idx + 15}`).value = `${hariIni}`;
              worksheet.getCell(`I${idx + 16}`).value = `Petugas Monitoring`;
              worksheet.getCell(
                `I${idx + 17}`
              ).value = `Kepala Satuan Pelaksana Pendidikan`;
              worksheet.getCell(
                `I${idx + 18}`
              ).value = `Kecamatan ${sekolah.kecamatan}`;
              worksheet.getCell(`I${idx + 23}`).value = `${user.nama}`;
              worksheet.getCell(`I${idx + 24}`).value = `NIP : ${user.nip}`;
              worksheet.addConditionalFormatting({
                ref: `I${idx + 15}:I${idx + 24}`,
                rules: [
                  {
                    type: "expression",
                    formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                    style: {
                      font: {
                        name: "Calibri",
                        family: 4,
                        size: 11,
                        // bold: true,
                      },
                      alignment: {
                        vertical: "middle",
                        horizontal: "center",
                      },
                    },
                  },
                ],
              });
            }
          })
        );
      })
    );

    let namaFile = `/uploads/rekap-Monev-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async changeBase64ToAscii({ response, request, auth }) {
    const data = await TkMateriKesimpulan.query()
      .select("id", "kesimpulan")
      .whereBetween("id", [40001, 50000])
      .fetch();

    await Promise.all(
      data.toJSON().map(async (d) => {
        await TkMateriKesimpulan.query()
          .where("id", d.id)
          .update({
            kesimpulan: d.kesimpulan
              ? Buffer(d.kesimpulan, "base64").toString("ascii")
              : "",
          });
      })
    );

    return "sukses";
  }

  async downloadAbsenRombel({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }
    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const { role, tanggal, rombel_id } = request.post();

    const rombel = await MRombel.query()
      .with("user")
      .with("anggotaRombel", (builder) => {
        builder.where({ dihapus: 0 }).with("user", (builder) => {
          builder.with("absen", (builder) => {
            builder.where("created_at", "like", `%${tanggal}%`);
          });
        });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ id: rombel_id })
      .fetch();

    const rombelNama = await MRombel.query()
      .select("id", "nama", "dihapus", "m_sekolah_id", "m_ta_id")
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ id: rombel_id })
      .first();
    // return rombel;
    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`${rombelNama.nama}`);
    worksheet.mergeCells("A1:H1");
    worksheet.mergeCells("A2:H2");
    worksheet.mergeCells("A3:H3");
    worksheet.getCell(
      "A5"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.addConditionalFormatting({
      ref: "A1:H3",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });
    worksheet.addConditionalFormatting({
      ref: "A6:H6",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });
    const tanggalFormat = moment(tanggal).format("DD MMMM YYYY");
    worksheet.getCell("A1").value = `Rekap Absensi ${rombelNama.nama}`;
    worksheet.getCell("A2").value = `${tanggalFormat}`;
    worksheet.getCell("A3").value = sekolah.nama;
    await Promise.all(
      rombel.toJSON().map(async (d) => {
        await Promise.all(
          d.anggotaRombel.map(async (anggota, idx) => {
            // add column headers
            worksheet.getRow(6).values = [
              "Nama",
              "Absen",
              "Keterangan",
              "Lampiran",
              "Foto Masuk",
              "Waktu Masuk",
              "Foto Pulang",
              "Waktu Pulang",
            ];

            worksheet.columns = [
              { key: "user" },
              { key: "absen" },
              { key: "keterangan" },
              { key: "lampiran" },
              { key: "foto_masuk" },
              { key: "created_at" },
              { key: "foto_pulang" },
              { key: "waktu_pulang" },
            ];

            // Add row using key mapping to columns
            let row = worksheet.addRow({
              user: anggota.user ? anggota.user.nama : "-",
              absen: anggota.user
                ? anggota.user.absen
                  ? anggota.user.absen.length
                    ? anggota.user.absen[0].absen
                    : "-"
                  : "-"
                : "-",
              keterangan: anggota.user
                ? anggota.user.absen
                  ? anggota.user.absen.length
                    ? anggota.user.absen[0].keterangan
                    : "-"
                  : "-"
                : "-",
              lampiran: anggota.user
                ? anggota.user.absen
                  ? anggota.user.absen.length
                    ? anggota.user.absen[0].lampiran
                    : "-"
                  : "-"
                : "-",
              foto_masuk: anggota.user
                ? anggota.user.absen
                  ? anggota.user.absen.length
                    ? anggota.user.absen[0].foto_masuk
                    : "-"
                  : "-"
                : "-",
              created_at: anggota.user
                ? anggota.user.absen
                  ? anggota.user.absen.length
                    ? anggota.user.absen[0].created_at
                    : "-"
                  : "-"
                : "-",
              foto_pulang: anggota.user
                ? anggota.user.absen
                  ? anggota.user.absen.length
                    ? anggota.user.absen[0].foto_pulang
                    : "-"
                  : "-"
                : "-",
              waktu_pulang: anggota.user
                ? anggota.user.absen
                  ? anggota.user.absen.length
                    ? anggota.user.absen[0].waktu_pulang
                    : "-"
                  : "-"
                : "-",
            });

            worksheet.addConditionalFormatting({
              ref: `B${(idx + 1) * 1 + 6}:H${(idx + 1) * 1 + 6}`,
              rules: [
                {
                  type: "expression",
                  formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                  style: {
                    font: {
                      name: "Times New Roman",
                      family: 4,
                      size: 11,
                      // bold: true,
                    },
                    alignment: {
                      vertical: "middle",
                      horizontal: "left",
                    },
                    border: {
                      top: { style: "thin" },
                      left: { style: "thin" },
                      bottom: { style: "thin" },
                      right: { style: "thin" },
                    },
                  },
                },
              ],
            });
            worksheet.addConditionalFormatting({
              ref: `A${(idx + 1) * 1 + 6}`,
              rules: [
                {
                  type: "expression",
                  formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                  style: {
                    font: {
                      name: "Times New Roman",
                      family: 4,
                      size: 11,
                      // bold: true,
                    },
                    alignment: {
                      vertical: "middle",
                      horizontal: "center",
                    },
                    border: {
                      top: { style: "thin" },
                      left: { style: "thin" },
                      bottom: { style: "thin" },
                      right: { style: "thin" },
                    },
                  },
                },
              ],
            });
          })
        );
      })
    );

    let namaFile = `/uploads/rekap-absen-siswa-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async downloadAbsenRombelTanggal({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const user = await auth.getUser();
    const { tanggal_awal, tanggal_akhir, rombel_id } = request.post();

    const tanggalDistinct = await Database.raw(
      "SELECT DISTINCT DATE_FORMAT(created_at, '%Y-%m-%d') as tanggalDistinct from m_absen WHERE created_at BETWEEN ? AND  ? ",
      [tanggal_awal, tanggal_akhir]
    );

    let workbook = new Excel.Workbook();
    const result = await Promise.all(
      tanggalDistinct[0].map(async (e) => {
        const rombel = await MRombel.query()
          .with("user")
          .with("anggotaRombel", (builder) => {
            builder.where({ dihapus: 0 }).with("user", (builder) => {
              builder
                .select("id", "nama", "whatsapp")
                .with("absen", (builder) => {
                  builder.whereBetween("created_at", [
                    `${e.tanggalDistinct} 00:00:00`,
                    `${e.tanggalDistinct} 23:59:59`,
                  ]);
                });
            });
          })
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: sekolah.id })
          .andWhere({ m_ta_id: ta.id })
          .andWhere({ id: rombel_id })
          .fetch();

        let worksheet = workbook.addWorksheet(
          `${rombel.nama} ${e.tanggalDistinct}`
        );

        // return rombel;
        worksheet.mergeCells("A1:H1");
        worksheet.mergeCells("A2:H2");
        worksheet.mergeCells("A3:H3");
        worksheet.getCell(
          "A5"
        ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
        worksheet.addConditionalFormatting({
          ref: "A1:H3",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 16,
                  bold: true,
                },
                // fill: {
                //   type: "pattern",
                //   pattern: "solid",
                //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
                // },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                // border: {
                //   top: { style: "thin" },
                //   left: { style: "thin" },
                //   bottom: { style: "thin" },
                //   right: { style: "thin" },
                // },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: "A6:H6",
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 12,
                  bold: true,
                },
                fill: {
                  type: "pattern",
                  pattern: "solid",
                  bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        const tanggalFormat = moment(`${e.tanggalDistinct}`).format(
          "DD MMMM YYYY"
        );
        worksheet.getCell("A1").value = `Rekap Absensi ${rombel.nama}`;
        worksheet.getCell("A2").value = `${tanggalFormat}`;
        worksheet.getCell("A3").value = sekolah.nama;
        await Promise.all(
          rombel.toJSON().map(async (d) => {
            await Promise.all(
              d.anggotaRombel.map(async (anggota, idx) => {
                // add column headers
                worksheet.getRow(6).values = [
                  "Nama",
                  "Absen",
                  "Keterangan",
                  "Lampiran",
                  "Foto Masuk",
                  "Waktu Masuk",
                  "Foto Pulang",
                  "Waktu Pulang",
                ];

                worksheet.columns = [
                  { key: "user" },
                  { key: "absen" },
                  { key: "keterangan" },
                  { key: "lampiran" },
                  { key: "foto_masuk" },
                  { key: "created_at" },
                  { key: "foto_pulang" },
                  { key: "waktu_pulang" },
                ];

                // Add row using key mapping to columns
                let row = worksheet.addRow({
                  user: anggota.user ? anggota.user.nama : "-",
                  absen: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].absen
                        : "-"
                      : "-"
                    : "-",
                  keterangan: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].keterangan
                        : "-"
                      : "-"
                    : "-",
                  lampiran: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].lampiran
                        : "-"
                      : "-"
                    : "-",
                  foto_masuk: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].foto_masuk
                        : "-"
                      : "-"
                    : "-",
                  created_at: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].waktu_masuk
                        : "-"
                      : "-"
                    : "-",
                  foto_pulang: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].foto_pulang
                        : "-"
                      : "-"
                    : "-",
                  waktu_pulang: anggota.user
                    ? anggota.user.absen
                      ? anggota.user.absen.length
                        ? anggota.user.absen[0].waktu_pulang
                        : "-"
                      : "-"
                    : "-",
                });

                worksheet.addConditionalFormatting({
                  ref: `B${(idx + 1) * 1 + 6}:H${(idx + 1) * 1 + 6}`,
                  rules: [
                    {
                      type: "expression",
                      formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                      style: {
                        font: {
                          name: "Times New Roman",
                          family: 4,
                          size: 11,
                          // bold: true,
                        },
                        alignment: {
                          vertical: "middle",
                          horizontal: "left",
                        },
                        border: {
                          top: { style: "thin" },
                          left: { style: "thin" },
                          bottom: { style: "thin" },
                          right: { style: "thin" },
                        },
                      },
                    },
                  ],
                });
                worksheet.addConditionalFormatting({
                  ref: `A${(idx + 1) * 1 + 6}`,
                  rules: [
                    {
                      type: "expression",
                      formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                      style: {
                        font: {
                          name: "Times New Roman",
                          family: 4,
                          size: 11,
                          // bold: true,
                        },
                        alignment: {
                          vertical: "middle",
                          horizontal: "center",
                        },
                        border: {
                          top: { style: "thin" },
                          left: { style: "thin" },
                          bottom: { style: "thin" },
                          right: { style: "thin" },
                        },
                      },
                    },
                  ],
                });
              })
            );
          })
        );
      })
    );
    let namaFile = `/uploads/rekap-absen-siswa-${keluarantanggalseconds}.xlsx`;
    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async importGPDSServices(filelocation) {
    var workbook = new Excel.Workbook();

    try {
      workbook = await workbook.xlsx.readFile(filelocation);
    } catch (err) {
      return "Format File Tidak Sesuai";
    }

    let explanation = workbook.getWorksheet("Sheet1");

    if (!explanation) {
      return "Format File Tidak Sesuai";
    }

    let colComment = explanation.getColumn("A");
    if (!colComment) {
      return "Format File Tidak Sesuai";
    }
    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber >= 3) {
        const sekolah = explanation.getCell("B" + rowNumber).value
          ? explanation.getCell("B" + rowNumber).value
          : "-";
        const bentuk = explanation.getCell("C" + rowNumber).value
          ? explanation.getCell("C" + rowNumber).value
          : "-";
        const nama1 = explanation.getCell("D" + rowNumber).value
          ? explanation.getCell("D" + rowNumber).value
          : "-";
        const no1 = explanation.getCell("E" + rowNumber).value
          ? explanation.getCell("E" + rowNumber).value
          : "-";
        const email = explanation.getCell("F" + rowNumber).value
          ? explanation.getCell("F" + rowNumber).value
          : "-";

        data.push({ email, nama1, no1, sekolah, bentuk });
      }
    });

    await Promise.all(
      data
        .filter(
          (d, idx, self) => self.findIndex((e) => e.sekolah == d.sekolah) == idx
        )
        .map(async (d, idx) => {
          const check = await MSekolah.query()
            .where("nama", "like", `%${d.sekolah}%`)
            .first();

          if (!check) {
            await MSekolah.create({
              nama: d.sekolah,
              domain: `https://${slugify(d.sekolah, {
                replacement: "", // replace spaces with replacement character, defaults to `-`
                remove: /[*+~.()'"!:@]/g,
                lower: true, // convert to lower case, defaults to `false`
              })}.smarteschool.id`,
              status: "N",
              tingkat: d.bentuk,
              integrasi: "whatsapp",
              diintegrasi: 1,
              trial: 1,
            });
          }
        })
    );

    const result = await Promise.all(
      data.map(async (d, idx) => {
        const check = await MSekolah.query()
          .where("nama", "like", `%${d.sekolah}%`)
          .first();

        if (
          !(await User.query()
            .where({ whatsapp: `${d.no1}?admin` })
            .andWhere({ m_sekolah_id: check.id })
            .first())
        ) {
          const admin = await User.create({
            nama: d.nama1,
            whatsapp: `${d.no1}?admin`,
            gender: "L",
            password: "gpdsntt",
            role: "admin",
            m_sekolah_id: check.id,
            dihapus: 0,
          });
        }
        if (
          !(await User.query()
            .where({ whatsapp: d.no1 })
            .andWhere({ m_sekolah_id: check.id })
            .first())
        ) {
          const guru = await User.create({
            nama: d.nama1,
            whatsapp: d.no1,
            gender: "L",
            password: "gpdsntt",
            role: "guru",
            m_sekolah_id: check.id,
            dihapus: 0,
          });
        }
      })
    );

    return result;
  }

  async importGPDS({ request, response, auth }) {
    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importGPDSServices(`tmp/uploads/${fname}`);
  }

  async getDashboardTugas({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }
    const user = await auth.getUser();

    const { limit = 25, order = "created_at", sort = "desc" } = request.get();

    let timeline;
    if (user.role == "guru") {
      const timeline1 = await MTimeline.query()
        .with("tugas", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .with("user")
        .with("rombel")
        .with("komen", (builder) => {
          builder.with("user").where({ dihapus: 0 });
        })
        .withCount("tkTimeline as total_respon", (builder) => {
          builder.whereNotNull("waktu_pengumpulan");
        })
        .withCount("tkTimeline as total_absen", (builder) => {
          builder.whereNotNull("waktu_absen");
        })
        .withCount("tkTimeline as total_siswa")
        .withCount("komen as total_komen", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .whereNull("m_mata_pelajaran_id")
        .whereNot({ tipe: "diskusi" })
        .andWhere({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        // .whereIn("m_tugas_id", tugasIds)
        .orderBy(order, sort)
        .limit(parseInt(limit))
        .offset(0)
        .fetch();

      const timeline2 = await MTimeline.query()
        .with("tugas", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .with("user")
        .with("rombel")
        .with("mataPelajaran", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .with("komen", (builder) => {
          builder.with("user").where({ dihapus: 0 });
        })
        .withCount("tkTimeline as total_respon", (builder) => {
          builder.whereNotNull("waktu_pengumpulan");
        })
        .withCount("tkTimeline as total_absen", (builder) => {
          builder.whereNotNull("waktu_absen");
        })
        .withCount("tkTimeline as total_siswa")
        .withCount("komen as total_komen", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .whereNot({ tipe: "diskusi" })
        .whereNotNull("m_mata_pelajaran_id")
        .andWhere({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        // .whereIn("m_tugas_id", tugasIds)
        .orderBy(order, sort)
        .limit(parseInt(limit))
        .offset(0)
        .fetch();

      timeline = [
        ...timeline2.toJSON().filter((item) => {
          if (item.m_tugas_id && !item.tugas) {
            return false;
          }
          if (item.m_mata_pelajaran_id && !item.mataPelajaran) {
            return false;
          } else {
            return true;
          }
        }),
        ...timeline1.toJSON().filter((item) => {
          if (item.m_tugas_id) {
            return item.tugas ? true : false;
          } else {
            return true;
          }
        }),
      ];

      const timelineData = timeline.filter((d) => {
        if (d.tipe == "absen") {
          if (
            moment(d.tanggal_pertemuan, "DD MMMM YYYY") <
            moment().subtract(3, "days")
          ) {
            return false;
          } else if (d.__meta__.total_siswa != d.__meta__.total_absen) {
            return true;
          } else if (d.jurnal == null) {
            return false;
          }
        } else {
          if (d.__meta__.total_siswa != d.__meta__.total_respon) {
            return true;
          }
        }
        return false;
      });
      timeline = timelineData;
    } else if (user.role == "siswa") {
      const timelineData = await TkTimeline.query()
        .with("timeline", (builder) => {
          builder
            .with("tugas")
            .with("rombel")
            .with("mataPelajaran")
            .withCount("komen as total_komen", (builder) => {
              builder.where({ dihapus: 0 });
            })
            .with("komen", (builder) => {
              builder.with("user").where({ dihapus: 0 });
            })
            .with("user");
        })
        .with("user")
        .where({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .orderBy(order, sort)
        .limit(parseInt(limit))
        .offset(0)
        .fetch();

      timeline = timelineData.toJSON().filter((d) => {
        if (d.timeline.tipe == "diskusi") {
          return false;
        } else if (d.timeline.tipe == "absen") {
          if (moment(d.timeline.tanggal_pembagian) < moment()) {
            return true;
          } else {
            return false;
          }
        } else if (d.timeline.tipe == "tugas") {
          if (
            moment(
              moment(d.timeline.tugas.tanggal_pembagian)
                .add(7, "hours")
                .format("YYYY-MM-DD") +
                " " +
                d.timeline.tugas.waktu_pembagian
            ) <= moment() ||
            d.timeline.tugas.waktu_pembagian == null
          ) {
            return true;
          } else {
            return false;
          }
        }
      });
    }

    return response.ok({
      timeline,
    });
  }

  async getDashboardAbsen({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const user = await auth.getUser();

    const { kode_hari } = request.get();

    if (user.role == "guru") {
      const mataPelajaranIds = await MMataPelajaran.query()
        .where({ m_user_id: user.id })
        .ids();

      const jamMengajarIds = await MJamMengajar.query()
        .where({ kode_hari: kode_hari })
        .andWhere({ m_sekolah_id: sekolah.id })
        .andWhere({ m_ta_id: ta.id })
        .ids();

      const rombelIds = await MJadwalMengajar.query()
        .select("m_rombel_id")
        .with("rombel", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .with("mataPelajaran")
        .where({ m_ta_id: ta.id })
        .whereIn("m_mata_pelajaran_id", mataPelajaranIds)
        .whereIn("m_jam_mengajar_id", jamMengajarIds)
        .fetch();

      const rombelMengajar = await MJadwalMengajar.query()
        .with("rombel", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .with("jamMengajar")
        .with("mataPelajaran")
        .whereIn("m_mata_pelajaran_id", mataPelajaranIds)
        .whereIn("m_jam_mengajar_id", jamMengajarIds)
        .fetch();

      const janganUlangRombel = [];
      const rombel = rombelMengajar.toJSON().filter((d) => {
        if (
          !janganUlangRombel.find(
            (e) =>
              e.m_rombel_id == d.m_rombel_id &&
              e.m_mata_pelajaran_id == d.m_mata_pelajaran_id
          )
        ) {
          janganUlangRombel.push(d);
          return true;
        } else {
          return false;
        }
      });

      const noDuplicate = new Set(rombelIds.toJSON().map((d) => d.m_rombel_id));

      const today = new Date();
      const absen = await MTimeline.query()
        .where({ tipe: "absen" })
        .whereIn("m_rombel_id", [...noDuplicate])
        .whereBetween("tanggal_pembagian", [
          `${today.getFullYear()}-${
            today.getMonth() + 1
          }-${today.getDate()} 00:00:00`,
          `${today.getFullYear()}-${
            today.getMonth() + 1
          }-${today.getDate()} 23:59:59`,
        ])
        .andWhere({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .fetch();

      return response.ok({
        absen,
        rombel,
      });
    } else if (user.role == "siswa") {
      const rombelIds = await MRombel.query()
        .where({ m_ta_id: ta.id })
        .andWhere({ dihapus: 0 })
        .ids();

      const anggotaRombelId = await MAnggotaRombel.query()
        .where({ m_user_id: user.id })
        .andWhere({ dihapus: 0 })
        .whereIn("m_rombel_id", rombelIds)
        .pluck("m_rombel_id");

      if (!anggotaRombelId) {
        return response.notFound({
          message: messageNotFound,
        });
      }

      const jamMengajarIds = await MJamMengajar.query()
        .where({ kode_hari: kode_hari })
        .andWhere({ m_sekolah_id: sekolah.id })
        .andWhere({ m_ta_id: ta.id })
        .ids();

      const rombelMengajar = await MJadwalMengajar.query()
        .with("rombel", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .with("jamMengajar")
        .with("mataPelajaran")
        .whereIn("m_rombel_id", anggotaRombelId)
        .whereIn("m_jam_mengajar_id", jamMengajarIds)
        .fetch();

      const janganUlangRombel = [];
      const rombel = rombelMengajar.toJSON().filter((d) => {
        if (!d.m_mata_pelajaran_id) {
          return false;
        }
        if (!janganUlangRombel.includes(d.m_mata_pelajaran_id)) {
          janganUlangRombel.push(d.m_mata_pelajaran_id);
          return true;
        } else {
          return false;
        }
      });

      const jadwalMengajar = await MJadwalMengajar.query()
        .with("rombel", (builder) => {
          builder.where({ dihapus: 0 });
        })
        .with("jamMengajar")
        .with("mataPelajaran", (builder) => {
          builder.with("user").andWhere({ dihapus: 0 });
        })
        .whereNotNull("m_mata_pelajaran_id")
        .whereIn("m_rombel_id", anggotaRombelId)
        .fetch();

      const today = new Date();
      const absen = await MTimeline.query()
        .with("tkTimeline", (builder) => {
          builder.where({ m_user_id: user.id });
        })
        .where({ tipe: "absen" })
        .whereIn(
          "m_rombel_id",
          jadwalMengajar.toJSON().map((d) => d.rombel.id)
        )
        .whereBetween("tanggal_pembagian", [
          `${today.getFullYear()}-${
            today.getMonth() + 1
          }-${today.getDate()} 00:00:00`,
          `${today.getFullYear()}-${today.getMonth() + 1}-${
            today.getDate() + 1
          } 00:00:00`,
        ])
        .andWhere({ dihapus: 0 })
        .fetch();

      return response.ok({
        absen,
        rombel,
      });
    }
  }

  async gpdsUsername() {
    const sekolah = await MSekolah.query()
      .select("nama", "id")
      .where("trial", 1)
      .andWhere("created_at", "like", "%2021-08-12%")
      .offset(0)
      .limit(1000)
      .fetch();

    const result = await Promise.all(
      sekolah.toJSON().map(async (d) => {
        const check = await User.query()
          .where({
            whatsapp: slugify(d.nama, {
              replacement: "-",
              remove: /[*+~.()'"!:@]/g,
              lower: true, // convert to lower case, defaults to `false`
            }),
          })
          .andWhere({
            role: "admin",
          })
          .first();
        if (!check) {
          await User.create({
            nama: d.nama,
            whatsapp: slugify(d.nama, {
              replacement: "-",
              remove: /[*+~.()'"!:@]/g,
              lower: true, // convert to lower case, defaults to `false`
            }),
            password: `siapgpds`,
            role: "admin",
            m_sekolah_id: d.id,
            dihapus: 0,
          });
        }
        return "success";
      })
    );

    return result.length;
  }
  async getSurat({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      page = 1,
      tipe,
      search,
      nav = "semua",
      tanggal_awal,
      tanggal_akhir,
    } = request.get();

    let surat;

    if (user.role == "admin") {
      if (tipe != "disposisi") {
        surat = MSurat.query()
          .where({ dihapus: 0 })
          .andWhere({ m_user_id: user.id });
        if (tipe == "keluar") {
          surat.andWhere({ tipe: "keluar" });
        } else if (tipe == "masuk") {
          surat.andWhere({ tipe: "masuk" });
        } else if (tipe == "keputusan") {
          surat.andWhere({ tipe: "keputusan" });
        }
      } else {
        surat = MDisposisi.query()
          .with("surat", (builder) => {
            builder
              .where({ m_sekolah_id: sekolah.id })
              .andWhere({ dihapus: 0 });
            if (search) {
              builder.where("perihal", "like", `%${search}%`);
            }
          })
          .with("pelaporanDisposisi")
          .where({ dihapus: 0 })
          .andWhere({ m_user_id: user.id });
        if (nav == "belum selesai") {
          surat.andWhere({ status: 0 });
        } else if (nav == "selesai") {
          surat.andWhere({ status: 1 });
        }
      }
    } else if (user.role == "kepsek") {
      if (tipe != "disposisi") {
        surat = MSurat.query()
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: sekolah.id });
        if (tipe == "keluar") {
          surat.andWhere({ tipe: "keluar" });
        } else if (tipe == "masuk") {
          surat
            .with("disposisi")
            .andWhere({ tipe: "masuk" })
            .andWhere({ teruskan: 1 });
        } else if (tipe == "keputusan") {
          surat
            .with("disposisi")
            .andWhere({ tipe: "keputusan" })
            .andWhere({ teruskan: 1 });
        }
      } else if (tipe == "disposisi") {
        surat = MDisposisi.query()
          .with("surat", (builder) => {
            builder
              .where({ m_sekolah_id: sekolah.id })
              .andWhere({ dihapus: 0 });
            if (search) {
              builder.where("perihal", "like", `%${search}%`);
            }
          })
          .with("pelaporanDisposisi")
          .where({ dihapus: 0 });
        if (nav == "belum selesai") {
          surat.andWhere({ status: 0 });
        } else if (nav == "selesai") {
          surat.andWhere({ status: 1 });
        }
      }
    }
    if (tipe != "disposisi") {
      if (search) {
        surat.andWhere("perihal", "like", `%${search}%`);
      }
      if ((tanggal_awal, tanggal_akhir)) {
        surat.whereBetween("created_at", [
          `${tanggal_awal} 00:00:00`,
          `${tanggal_akhir} 23:59:59`,
        ]);
      }
    }
    surat = await surat.paginate(page, 10);

    if (tipe == "disposisi") {
      surat.data = await Promise.all(
        surat.toJSON().data.filter(async (d) => {
          if (d.surat == null) {
            return false;
          }
          return true;
        })
      );
    }

    return response.ok({
      surat,
    });
  }

  async postSurat({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();
    const year = dateObj.getFullYear();

    const { tipe, asal, nomor, tanggal, perihal, keamanan, isi, file } =
      request.post();
    const rules = {
      tipe: "required",
      asal: "required",
      nomor: "required",
      tanggal: "required",
      perihal: "required",
      keamanan: "required",
      isi: "required",
      // file: "required",
    };
    const message = {
      "tipe.required": "Tipe harus diisi",
      "asal.required": "Asal Surat harus diisi",
      "nomor.required": "Nomor Surat harus diisi",
      "tanggal.required": "Tanggal Surat harus diisi",
      "perihal.required": "Perihal harus diisi",
      "keamanan.required": "Tingkat Keamanan harus dipilih",
      "isi.required": "Isi Ringakasan Surat harus diisi",
      // "file.required": "harus diisi",
    };

    if (tipe != "keputusan") {
      const validation = await validate(request.all(), rules, message);
      if (validation.fails()) {
        return response.unprocessableEntity(validation.messages());
      }
    }

    let surat;
    let total;
    if (tipe == "masuk") {
      total = await MSurat.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ tipe: "masuk" })
        .whereBetween("created_at", [
          `${dateObj.getFullYear()}-${dateObj.getMonth() + 1}-1`,
          `${dateObj.getFullYear()}-${dateObj.getMonth() + 2}-1 `,
        ])
        .getCount();

      surat = await MSurat.create({
        tipe,
        asal,
        nomor,
        tanggal,
        perihal,
        keamanan,
        isi,
        file,
        kode: `SM.${total + 1}.${dateObj.getMonth() + 1}.${year}`,
        m_user_id: user.id,
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
    } else if (tipe == "keluar") {
      total = await MSurat.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ tipe: "keluar" })
        .whereBetween("created_at", [
          `${dateObj.getFullYear()}-${dateObj.getMonth() + 1}-1`,
          `${dateObj.getFullYear()}-${dateObj.getMonth() + 2}-1 `,
        ])
        .getCount();
      surat = await MSurat.create({
        tipe,
        asal,
        nomor,
        tanggal,
        perihal,
        keamanan,
        isi,
        file,
        kode: `SK.${total + 1}.${month}.${year}`,
        m_user_id: user.id,
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
    } else if (tipe == "keputusan") {
      total = await MSurat.query()
        .where({ m_sekolah_id: sekolah.id })
        .andWhere({ tipe: "keputusan" })
        .whereBetween("created_at", [
          `${dateObj.getFullYear()}-${dateObj.getMonth() + 1}-1`,
          `${dateObj.getFullYear()}-${dateObj.getMonth() + 2}-1 `,
        ])
        .getCount();
      surat = await MSurat.create({
        tipe,
        isi,
        file,
        kode: `SKEP.${total + 1}.${month}.${year}`,
        m_user_id: user.id,
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putSurat({ response, request, auth, params: { surat_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      tipe,
      asal,
      nomor,
      tanggal,
      perihal,
      keamanan,
      isi,
      teruskan = 0,
      file,
    } = request.post();

    if (teruskan) {
      const surat = await MSurat.query().where({ id: surat_id }).update({
        teruskan,
      });
      if (!surat) {
        return response.notFound({
          message: messageNotFound,
        });
      }

      return response.ok({
        message: messagePutSuccess,
      });
    }

    const rules = {
      tipe: "required",
      asal: "required",
      nomor: "required",
      tanggal: "required",
      perihal: "required",
      keamanan: "required",
      isi: "required",
      // file: "required",
    };
    const message = {
      "tipe.required": "Tipe harus diisi",
      "asal.required": "Asal Surat harus diisi",
      "nomor.required": "Nomor Surat harus diisi",
      "tanggal.required": "Tanggal Surat harus diisi",
      "perihal.required": "Perihal harus diisi",
      "keamanan.required": "Tingkat Keamanan harus dipilih",
      "isi.required": "Isi Ringakasan Surat harus diisi",
      // "file.required": "harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const surat = await MSurat.query().where({ id: surat_id }).update({
      tipe,
      asal,
      nomor,
      tanggal,
      perihal,
      keamanan,
      isi,
      file,
    });

    if (!surat) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteSurat({ response, request, auth, params: { surat_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const surat = await MSurat.query().where({ id: surat_id }).update({
      dihapus: 1,
    });

    if (!surat) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async detailDisposisi({ response, request, auth, params: { disposisi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // const { rombel_id } = request.post();
    const disposisi = await MDisposisi.query()
      .with("surat")
      .with("pelaporanDisposisi")
      .where({ id: disposisi_id })
      .first();

    return response.ok({
      disposisi,
    });
  }

  async postPelaporanDisposisi({
    response,
    request,
    auth,
    params: { disposisi_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { keterangan, lampiran } = request.post();

    const disposisi = await MPelaporanDisposisi.query()
      .where({ m_disposisi_id: disposisi_id })
      .first();

    if (disposisi) {
      await MPelaporanDisposisi.query()
        .where({ m_disposisi_id: disposisi_id })
        .update({
          keterangan,
          lampiran,
        });

      await MDisposisi.query().where({ id: disposisi_id }).update({
        status: 1,
      });
    } else {
      await MPelaporanDisposisi.create({
        keterangan,
        lampiran,
        m_disposisi_id: disposisi_id,
        status: 1,
        dihapus: 0,
      });
      await MDisposisi.query().where({ id: disposisi_id }).update({
        status: 1,
      });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async postDisposisi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      penanganan,
      tanggal_pengembalian,
      isi,
      ttd,
      m_user_id,
      m_surat_id,
    } = request.post();
    const rules = {
      penanganan: "required",
      tanggal_pengembalian: "required",
      isi: "required",
      ttd: "required",
      m_user_id: "required",
      m_surat_id: "required",
    };
    const message = {
      "penanganan.required": "Penanganan harus diisi",
      "tanggal_pengembalian.required": "Tanggal Pengembalian harus diisi",
      "isi.required": "Isi harus diisi",
      "ttd.required": "TTD harus diisi",
      "m_user_id.required": "Disposisi kepada harus dipilih",
      "m_surat_id.required": "Disposisi kepada harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const disposisi = await MDisposisi.create({
      penanganan,
      tanggal_pengembalian,
      isi,
      ttd,
      m_user_id,
      m_surat_id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putDisposisi({ response, request, auth, params: { disposisi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { penanganan, tanggal_pengembalian, isi, ttd, m_user_id } =
      request.post();
    const rules = {
      penanganan: "required",
      tanggal_pengembalian: "required",
      isi: "required",
      ttd: "required",
      m_user_id: "required",
    };
    const message = {
      "penanganan.required": "Penanganan harus diisi",
      "tanggal_pengembalian.required": "Tanggal Pengembalian harus diisi",
      "isi.required": "Isi harus diisi",
      "ttd.required": "TTD harus diisi",
      "m_user_id.required": "Disposisi kepada harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const disposisi = await MDisposisi.query()
      .where({ id: disposisi_id })
      .update({
        penanganan,
        tanggal_pengembalian,
        isi,
        ttd,
        m_user_id,
      });

    if (!disposisi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteDisposisi({ response, request, auth, params: { disposisi_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const disposisi = await MDisposisi.query()
      .where({ id: disposisi_id })
      .update({
        dihapus: 1,
      });

    if (!disposisi) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async dummyGPDS({ response, request }) {
    const sekolah = await MSekolah.query()
      .select("id", "tingkat")
      .where({ trial: 1 })
      .andWhere("created_at", ">=", "2021-08-08")
      .offset(0)
      .limit(1500)
      .fetch();

    const result = await Promise.all(
      sekolah.toJSON().map(async (d) => {
        const checkta = await Mta.query()
          .where({ dihapus: 0 })
          .andWhere({ aktif: 1 })
          .andWhere({ m_sekolah_id: d.id })
          .first();
        if (!checkta) {
          const ta = await Mta.create({
            tahun: "2021-2022",
            semester: "1",
            nama_kepsek: "-",
            nip_kepsek: "-",
            aktif: 1,
            m_sekolah_id: d.id,
            dihapus: 0,
          });
          const jamMengajar = [];

          for (let i = 0; i <= 6; i++) {
            jamMengajar.push(
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 1,
                jam_mulai: "06:45:00",
                jam_selesai: "07:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 2,
                jam_mulai: "07:30:00",
                jam_selesai: "08:15:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 3,
                jam_mulai: "08:15:00",
                jam_selesai: "09:00:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 4,
                jam_mulai: "09:00:00",
                jam_selesai: "09:45:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 0,
                jam_mulai: "09:45:00",
                jam_selesai: "10:00:00",
                istirahat: 1,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 5,
                jam_mulai: "10:00:00",
                jam_selesai: "10:45:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 6,
                jam_mulai: "10:45:00",
                jam_selesai: "11:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 0,
                jam_mulai: "12:15:00",
                jam_selesai: "12:30:00",
                istirahat: 1,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 7,
                jam_mulai: "12:30:00",
                jam_selesai: "13:15:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 8,
                jam_mulai: "13:15:00",
                jam_selesai: "14:00:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 9,
                jam_mulai: "14:00:00",
                jam_selesai: "14:45:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 10,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 11,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 12,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 13,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 14,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 15,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 16,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 17,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 18,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 19,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 20,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              }
            );
          }

          const jamMengajar1 = await MJamMengajar.createMany(jamMengajar);

          const guru1 = await User.create({
            nama: "guru1",
            whatsapp: "guru1",
            password: await Hash.make("siapgpds"),
            role: "guru",
            dihapus: 0,
            m_sekolah_id: d.id,
          });
          const guru2 = await User.create({
            nama: "guru2",
            whatsapp: "guru2",
            password: await Hash.make("siapgpds"),
            role: "guru",
            dihapus: 0,
            m_sekolah_id: d.id,
          });
          const guru3 = await User.create({
            nama: "guru3",
            whatsapp: "guru3",
            password: await Hash.make("siapgpds"),
            role: "guru",
            dihapus: 0,
            m_sekolah_id: d.id,
          });
          const guru4 = await User.create({
            nama: "guru4",
            whatsapp: "guru4",
            password: await Hash.make("siapgpds"),
            role: "guru",
            dihapus: 0,
            m_sekolah_id: d.id,
          });
          await MMataPelajaran.create({
            nama: "Workshop GPDS",
            kode: "GPDS",
            kelompok: "A",
            dihapus: 0,
            kkm: 80,
            m_user_id: guru1.id,
            m_ta_id: ta.id,
            m_sekolah_id: d.id,
          });
          await MMataPelajaran.create({
            nama: "Workshop GPDS",
            kode: "GPDS",
            kelompok: "A",
            dihapus: 0,
            kkm: 80,
            m_user_id: guru2.id,
            m_ta_id: ta.id,
            m_sekolah_id: d.id,
          });
          await MMataPelajaran.create({
            nama: "Workshop GPDS",
            kode: "GPDS",
            kelompok: "A",
            dihapus: 0,
            kkm: 80,
            m_user_id: guru3.id,
            m_ta_id: ta.id,
            m_sekolah_id: d.id,
          });
          await MMataPelajaran.create({
            nama: "Workshop GPDS",
            kode: "GPDS",
            kelompok: "A",
            dihapus: 0,
            kkm: 80,
            m_user_id: guru4.id,
            m_ta_id: ta.id,
            m_sekolah_id: d.id,
          });
          const siswa1 = await User.create({
            nama: "siswa1",
            whatsapp: "siswa1",
            password: await Hash.make("siapgpds"),
            role: "siswa",
            dihapus: 0,
            m_sekolah_id: d.id,
          });
          const siswa2 = await User.create({
            nama: "siswa2",
            whatsapp: "siswa2",
            password: await Hash.make("siapgpds"),
            role: "siswa",
            dihapus: 0,
            m_sekolah_id: d.id,
          });
          const siswa3 = await User.create({
            nama: "siswa3",
            whatsapp: "siswa3",
            password: await Hash.make("siapgpds"),
            role: "siswa",
            dihapus: 0,
            m_sekolah_id: d.id,
          });
          const siswa4 = await User.create({
            nama: "siswa4",
            whatsapp: "siswa4",
            password: await Hash.make("siapgpds"),
            role: "siswa",
            dihapus: 0,
            m_sekolah_id: d.id,
          });
          const jurusan = await MJurusan.create({
            nama: "-",
            kode: "-",
            m_sekolah_id: d.id,
            dihapus: 0,
          });
          if (d.tingkat == "SMP") {
            const rombel = await MRombel.create({
              tingkat: "8",
              nama: "8-A",
              m_jurusan_id: jurusan.id,
              m_sekolah_id: d.id,
              m_ta_id: ta.id,
              m_user_id: guru1.id,
              kelompok: "reguler",
              dihapus: 0,
            });

            // const jamMengajar = await MJamMengajar.query()
            //   .select("id")
            //   .where({ m_sekolah_id: d.id })
            //   .andWhere({ m_ta_id: ta.id })
            //   .fetch();

            const jadwalMengajarData = await Promise.all(
              jamMengajar1.map(async (data) => {
                data.m_mata_pelajaran_id = null;
                data.m_rombel_id = rombel.id;
                data.m_jam_mengajar_id = data.id;
                data.m_sekolah_id = d.id;
                data.m_ta_id = ta.id;
                delete data.id;
                delete data.jamFormat;

                return data;
              })
            );

            await MJadwalMengajar.createMany(jadwalMengajarData);
            await MAnggotaRombel.create({
              role: "anggota",
              dihapus: 0,
              m_user_id: siswa1.id,
              m_rombel_id: rombel.id,
            });
            await MAnggotaRombel.create({
              role: "anggota",
              dihapus: 0,
              m_user_id: siswa2.id,
              m_rombel_id: rombel.id,
            });
            await MAnggotaRombel.create({
              role: "anggota",
              dihapus: 0,
              m_user_id: siswa3.id,
              m_rombel_id: rombel.id,
            });
            await MAnggotaRombel.create({
              role: "anggota",
              dihapus: 0,
              m_user_id: siswa4.id,
              m_rombel_id: rombel.id,
            });
          }
          // } else {
          //   const guru1 = await User.create({
          //     nama: "guru1",
          //     whatsapp: "guru1",
          //     password: await Hash.make("siapgpds"),
          //     role: "guru",
          //     dihapus: 0,
          //     m_sekolah_id: d.id,
          //   });
          //   const guru2 = await User.create({
          //     nama: "guru2",
          //     whatsapp: "guru2",
          //     password: await Hash.make("siapgpds"),
          //     role: "guru",
          //     dihapus: 0,
          //     m_sekolah_id: d.id,
          //   });
          //   const guru3 = await User.create({
          //     nama: "guru3",
          //     whatsapp: "guru3",
          //     password: await Hash.make("siapgpds"),
          //     role: "guru",
          //     dihapus: 0,
          //     m_sekolah_id: d.id,
          //   });
          //   const guru4 = await User.create({
          //     nama: "guru4",
          //     whatsapp: "guru4",
          //     password: await Hash.make("siapgpds"),
          //     role: "guru",
          //     dihapus: 0,
          //     m_sekolah_id: d.id,
          //   });
          //   await MMataPelajaran.create({
          //     nama: "Workshop GPDS",
          //     kode: "GPDS",
          //     kelompok: "A",
          //     dihapus: 0,
          //     kkm: 80,
          //     m_user_id: guru1.id,
          //     m_ta_id: checkta.id,
          //     m_sekolah_id: d.id,
          //   });
          //   await MMataPelajaran.create({
          //     nama: "Workshop GPDS",
          //     kode: "GPDS",
          //     kelompok: "A",
          //     dihapus: 0,
          //     kkm: 80,
          //     m_user_id: guru2.id,
          //     m_ta_id: checkta.id,
          //     m_sekolah_id: d.id,
          //   });
          //   await MMataPelajaran.create({
          //     nama: "Workshop GPDS",
          //     kode: "GPDS",
          //     kelompok: "A",
          //     dihapus: 0,
          //     kkm: 80,
          //     m_user_id: guru3.id,
          //     m_ta_id: checkta.id,
          //     m_sekolah_id: d.id,
          //   });
          //   await MMataPelajaran.create({
          //     nama: "Workshop GPDS",
          //     kode: "GPDS",
          //     kelompok: "A",
          //     dihapus: 0,
          //     kkm: 80,
          //     m_user_id: guru4.id,
          //     m_ta_id: checkta.id,
          //     m_sekolah_id: d.id,
          //   });
          //   const siswa1 = await User.create({
          //     nama: "siswa1",
          //     whatsapp: "siswa1",
          //     password: await Hash.make("siapgpds"),
          //     role: "siswa",
          //     dihapus: 0,
          //     m_sekolah_id: d.id,
          //   });
          //   const siswa2 = await User.create({
          //     nama: "siswa2",
          //     whatsapp: "siswa2",
          //     password: await Hash.make("siapgpds"),
          //     role: "siswa",
          //     dihapus: 0,
          //     m_sekolah_id: d.id,
          //   });
          //   const siswa3 = await User.create({
          //     nama: "siswa3",
          //     whatsapp: "siswa3",
          //     password: await Hash.make("siapgpds"),
          //     role: "siswa",
          //     dihapus: 0,
          //     m_sekolah_id: d.id,
          //   });
          //   const siswa4 = await User.create({
          //     nama: "siswa4",
          //     whatsapp: "siswa4",
          //     password: await Hash.make("siapgpds"),
          //     role: "siswa",
          //     dihapus: 0,
          //     m_sekolah_id: d.id,
          //   });
          //   const jurusan = await MJurusan.create({
          //     nama: "-",
          //     kode: "-",
          //     m_sekolah_id: d.id,
          //     dihapus: 0,
          //   });
          //   if (d.tingkat == "SMP") {
          //     const rombel = await MRombel.create({
          //       tingkat: "8",
          //       nama: "8-A",
          //       m_jurusan_id: jurusan.id,
          //       m_sekolah_id: d.id,
          //       m_ta_id: checkta.id,
          //       m_user_id: guru1.id,
          //       kelompok: "reguler",
          //       dihapus: 0,
          //     });

          //     const jamMengajar = await MJamMengajar.query()
          //       .select("id")
          //       .where({ m_sekolah_id: d.id })
          //       .andWhere({ m_ta_id: checkta.id })
          //       .fetch();

          //     const jadwalMengajarData = await Promise.all(
          //       jamMengajar.toJSON().map(async (data) => {
          //         data.m_mata_pelajaran_id = null;
          //         data.m_rombel_id = rombel.id;
          //         data.m_jam_mengajar_id = data.id;
          //         data.m_sekolah_id = d.id;
          //         data.m_ta_id = checkta.id;
          //         delete data.id;
          //         delete data.jamFormat;

          //         return data;
          //       })
          //     );

          //     await MJadwalMengajar.createMany(jadwalMengajarData);
          //     await MAnggotaRombel.create({
          //       role: "anggota",
          //       dihapus: 0,
          //       m_user_id: siswa1.id,
          //       m_rombel_id: rombel.id,
          //     });
          //     await MAnggotaRombel.create({
          //       role: "anggota",
          //       dihapus: 0,
          //       m_user_id: siswa2.id,
          //       m_rombel_id: rombel.id,
          //     });
          //     await MAnggotaRombel.create({
          //       role: "anggota",
          //       dihapus: 0,
          //       m_user_id: siswa3.id,
          //       m_rombel_id: rombel.id,
          //     });
          //     await MAnggotaRombel.create({
          //       role: "anggota",
          //       dihapus: 0,
          //       m_user_id: siswa4.id,
          //       m_rombel_id: rombel.id,
          //     });
          //   } else if (d.tingkat == "SD") {
          //     const rombel = await MRombel.create({
          //       tingkat: "6",
          //       nama: "6-A",
          //       m_jurusan_id: jurusan.id,
          //       m_sekolah_id: d.id,
          //       m_ta_id: checkta.id,
          //       m_user_id: guru1.id,
          //       kelompok: "reguler",
          //       dihapus: 0,
          //     });

          //     const jamMengajar = await MJamMengajar.query()
          //       .select("id")
          //       .where({ m_sekolah_id: d.id })
          //       .andWhere({ m_ta_id: checkta.id })
          //       .fetch();

          //     const jadwalMengajarData = await Promise.all(
          //       jamMengajar.toJSON().map(async (data) => {
          //         data.m_mata_pelajaran_id = null;
          //         data.m_rombel_id = rombel.id;
          //         data.m_jam_mengajar_id = data.id;
          //         data.m_sekolah_id = d.id;
          //         data.m_ta_id = checkta.id;
          //         delete data.id;
          //         delete data.jamFormat;

          //         return data;
          //       })
          //     );

          //     await MJadwalMengajar.createMany(jadwalMengajarData);
          //     await MAnggotaRombel.create({
          //       role: "anggota",
          //       dihapus: 0,
          //       m_user_id: siswa1.id,
          //       m_rombel_id: rombel.id,
          //     });
          //     await MAnggotaRombel.create({
          //       role: "anggota",
          //       dihapus: 0,
          //       m_user_id: siswa2.id,
          //       m_rombel_id: rombel.id,
          //     });
          //     await MAnggotaRombel.create({
          //       role: "anggota",
          //       dihapus: 0,
          //       m_user_id: siswa3.id,
          //       m_rombel_id: rombel.id,
          //     });
          //     await MAnggotaRombel.create({
          //       role: "anggota",
          //       dihapus: 0,
          //       m_user_id: siswa4.id,
          //       m_rombel_id: rombel.id,
          //     });
          //   }
        }
        return;
      })
    );

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async dummyGPDS2({ response, request }) {
    const sekolah = await MSekolah.query()
      .select("id", "tingkat")
      .where({ trial: 1 })
      .andWhere("created_at", ">=", "2021-08-08")
      .offset(0)
      .limit(1500)
      .fetch();

    const result = await Promise.all(
      sekolah.toJSON().map(async (d) => {
        const checkta = await Mta.query()
          .where({ dihapus: 0 })
          .andWhere({ aktif: 1 })
          .andWhere({ m_sekolah_id: d.id })
          .first();

        const checkGuru1 = await User.query()
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: d.id })
          .andWhere({ whatsapp: "guru1" })
          .first();
        const checkGuru2 = await User.query()
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: d.id })
          .andWhere({ whatsapp: "guru2" })
          .first();
        const checkGuru3 = await User.query()
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: d.id })
          .andWhere({ whatsapp: "guru3" })
          .first();
        const checkGuru4 = await User.query()
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: d.id })
          .andWhere({ whatsapp: "guru4" })
          .first();
        const checkJurusan = await MJurusan.query()
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: d.id })
          .andWhere({ nama: "-" })
          .first();
        const checkSiswa1 = await User.query()
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: d.id })
          .andWhere({ whatsapp: "siswa1" })
          .first();
        const checkSiswa2 = await User.query()
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: d.id })
          .andWhere({ whatsapp: "siswa2" })
          .first();
        const checkSiswa3 = await User.query()
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: d.id })
          .andWhere({ whatsapp: "siswa3" })
          .first();
        const checkSiswa4 = await User.query()
          .where({ dihapus: 0 })
          .andWhere({ m_sekolah_id: d.id })
          .andWhere({ whatsapp: "siswa4" })
          .first();

        let checkRombel;
        if ((checkJurusan, checkGuru1)) {
          checkRombel = await MRombel.query()
            .where({ dihapus: 0 })
            .andWhere({ m_sekolah_id: d.id })
            .andWhere({ m_jurusan_id: checkJurusan.id })
            .andWhere({ m_user_id: checkGuru1.id })
            .first();
        }

        let rombel;

        if (!checkta) {
          const ta = await Mta.create({
            tahun: "2021-2022",
            semester: "1",
            nama_kepsek: "-",
            nip_kepsek: "-",
            aktif: 1,
            m_sekolah_id: d.id,
            dihapus: 0,
          });
          const jamMengajar = [];

          for (let i = 0; i <= 6; i++) {
            jamMengajar.push(
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 1,
                jam_mulai: "06:45:00",
                jam_selesai: "07:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 2,
                jam_mulai: "07:30:00",
                jam_selesai: "08:15:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 3,
                jam_mulai: "08:15:00",
                jam_selesai: "09:00:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 4,
                jam_mulai: "09:00:00",
                jam_selesai: "09:45:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 0,
                jam_mulai: "09:45:00",
                jam_selesai: "10:00:00",
                istirahat: 1,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 5,
                jam_mulai: "10:00:00",
                jam_selesai: "10:45:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 6,
                jam_mulai: "10:45:00",
                jam_selesai: "11:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 0,
                jam_mulai: "12:15:00",
                jam_selesai: "12:30:00",
                istirahat: 1,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 7,
                jam_mulai: "12:30:00",
                jam_selesai: "13:15:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 8,
                jam_mulai: "13:15:00",
                jam_selesai: "14:00:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 9,
                jam_mulai: "14:00:00",
                jam_selesai: "14:45:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 10,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 11,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 12,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 13,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 14,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 15,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 16,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 17,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 18,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 19,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              },
              {
                kode_hari: i,
                hari: hari[i],
                jam_ke: 20,
                jam_mulai: "14:45:00",
                jam_selesai: "15:30:00",
                istirahat: 0,
                m_ta_id: ta.id,
                m_sekolah_id: d.id,
              }
            );
          }

          const jamMengajar1 = await MJamMengajar.createMany(jamMengajar);
          if (!checkGuru1) {
            const guru1 = await User.create({
              nama: "guru1",
              whatsapp: "guru1",
              password: await Hash.make("siapgpds"),
              role: "guru",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MMataPelajaran.create({
              nama: "Workshop GPDS1",
              kode: "GPDS",
              kelompok: "A",
              dihapus: 0,
              kkm: 80,
              m_user_id: guru1.id,
              m_ta_id: ta.id,
              m_sekolah_id: d.id,
            });
          }
          if (!checkGuru2) {
            const guru2 = await User.create({
              nama: "guru2",
              whatsapp: "guru2",
              password: await Hash.make("siapgpds"),
              role: "guru",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MMataPelajaran.create({
              nama: "Workshop GPDS2",
              kode: "GPDS",
              kelompok: "A",
              dihapus: 0,
              kkm: 80,
              m_user_id: guru2.id,
              m_ta_id: ta.id,
              m_sekolah_id: d.id,
            });
          }
          if (!checkGuru3) {
            const guru3 = await User.create({
              nama: "guru3",
              whatsapp: "guru3",
              password: await Hash.make("siapgpds"),
              role: "guru",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MMataPelajaran.create({
              nama: "Workshop GPDS3",
              kode: "GPDS",
              kelompok: "A",
              dihapus: 0,
              kkm: 80,
              m_user_id: guru3.id,
              m_ta_id: ta.id,
              m_sekolah_id: d.id,
            });
          }
          if (!checkGuru4) {
            const guru4 = await User.create({
              nama: "guru4",
              whatsapp: "guru4",
              password: await Hash.make("siapgpds"),
              role: "guru",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MMataPelajaran.create({
              nama: "Workshop GPDS4",
              kode: "GPDS",
              kelompok: "A",
              dihapus: 0,
              kkm: 80,
              m_user_id: guru4.id,
              m_ta_id: ta.id,
              m_sekolah_id: d.id,
            });
          }
          if (!checkJurusan) {
            const jurusan = await MJurusan.create({
              nama: "-",
              kode: "-",
              m_sekolah_id: d.id,
              dihapus: 0,
            });
            if (d.tingkat == "SMP") {
              rombel = await MRombel.create({
                tingkat: "7",
                nama: "7-Smarteschool",
                m_jurusan_id: jurusan.id,
                m_sekolah_id: d.id,
                m_ta_id: ta.id,
                m_user_id: guru1.id,
                kelompok: "reguler",
                dihapus: 0,
              });

              // const jamMengajar = await MJamMengajar.query()
              //   .select("id")
              //   .where({ m_sekolah_id: d.id })
              //   .andWhere({ m_ta_id: ta.id })
              //   .fetch();

              const jadwalMengajarData = await Promise.all(
                jamMengajar1.map(async (data) => {
                  data.m_mata_pelajaran_id = null;
                  data.m_rombel_id = rombel.id;
                  data.m_jam_mengajar_id = data.id;
                  data.m_sekolah_id = d.id;
                  data.m_ta_id = ta.id;
                  delete data.id;
                  delete data.jamFormat;

                  return data;
                })
              );

              await MJadwalMengajar.createMany(jadwalMengajarData);
            } else if (d.tingkat == "SD") {
              rombel = await MRombel.create({
                tingkat: "6",
                nama: "6-A",
                m_jurusan_id: jurusan.id,
                m_sekolah_id: d.id,
                m_ta_id: ta.id,
                m_user_id: guru1.id,
                kelompok: "reguler",
                dihapus: 0,
              });

              // const jamMengajar = await MJamMengajar.query()
              //   .select("id")
              //   .where({ m_sekolah_id: d.id })
              //   .andWhere({ m_ta_id: ta.id })
              //   .fetch();

              const jadwalMengajarData = await Promise.all(
                jamMengajar1.map(async (data) => {
                  data.m_mata_pelajaran_id = null;
                  data.m_rombel_id = rombel.id;
                  data.m_jam_mengajar_id = data.id;
                  data.m_sekolah_id = d.id;
                  data.m_ta_id = ta.id;
                  delete data.id;
                  delete data.jamFormat;

                  return data;
                })
              );

              await MJadwalMengajar.createMany(jadwalMengajarData);
            }
          } else {
            if (!checkRombel) {
              if (d.tingkat == "SMP") {
                rombel = await MRombel.create({
                  tingkat: "7",
                  nama: "7-Smarteschool",
                  m_jurusan_id: checkJurusan.id,
                  m_sekolah_id: d.id,
                  m_ta_id: checkta.id,
                  m_user_id: guru1.id,
                  kelompok: "reguler",
                  dihapus: 0,
                });

                const jamMengajar = await MJamMengajar.query()
                  .select("id")
                  .where({ m_sekolah_id: d.id })
                  .andWhere({ m_ta_id: checkta.id })
                  .fetch();

                const jadwalMengajarData = await Promise.all(
                  jamMengajar.toJSON().map(async (data) => {
                    data.m_mata_pelajaran_id = null;
                    data.m_rombel_id = rombel.id;
                    data.m_jam_mengajar_id = data.id;
                    data.m_sekolah_id = d.id;
                    data.m_ta_id = checkta.id;
                    delete data.id;
                    delete data.jamFormat;

                    return data;
                  })
                );

                await MJadwalMengajar.createMany(jadwalMengajarData);
              } else if (d.tingkat == "SD") {
                rombel = await MRombel.create({
                  tingkat: "6",
                  nama: "6-Smarteschool",
                  m_jurusan_id: checkJurusan.id,
                  m_sekolah_id: d.id,
                  m_ta_id: checkta.id,
                  m_user_id: guru1.id,
                  kelompok: "reguler",
                  dihapus: 0,
                });

                const jamMengajar = await MJamMengajar.query()
                  .select("id")
                  .where({ m_sekolah_id: d.id })
                  .andWhere({ m_ta_id: checkta.id })
                  .fetch();

                const jadwalMengajarData = await Promise.all(
                  jamMengajar.toJSON().map(async (data) => {
                    data.m_mata_pelajaran_id = null;
                    data.m_rombel_id = rombel.id;
                    data.m_jam_mengajar_id = data.id;
                    data.m_sekolah_id = d.id;
                    data.m_ta_id = checkta.id;
                    delete data.id;
                    delete data.jamFormat;

                    return data;
                  })
                );

                await MJadwalMengajar.createMany(jadwalMengajarData);
              }
            }
          }
        } else {
          if (!checkGuru1) {
            const guru1 = await User.create({
              nama: "guru1",
              whatsapp: "guru1",
              password: await Hash.make("siapgpds"),
              role: "guru",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MMataPelajaran.create({
              nama: "Workshop GPDS1",
              kode: "GPDS",
              kelompok: "A",
              dihapus: 0,
              kkm: 80,
              m_user_id: guru1.id,
              m_ta_id: checkta.id,
              m_sekolah_id: d.id,
            });
          }
          if (!checkGuru2) {
            const guru2 = await User.create({
              nama: "guru2",
              whatsapp: "guru2",
              password: await Hash.make("siapgpds"),
              role: "guru",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MMataPelajaran.create({
              nama: "Workshop GPDS2",
              kode: "GPDS",
              kelompok: "A",
              dihapus: 0,
              kkm: 80,
              m_user_id: guru2.id,
              m_ta_id: checkta.id,
              m_sekolah_id: d.id,
            });
          }
          if (!checkGuru3) {
            const guru3 = await User.create({
              nama: "guru3",
              whatsapp: "guru3",
              password: await Hash.make("siapgpds"),
              role: "guru",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MMataPelajaran.create({
              nama: "Workshop GPDS3",
              kode: "GPDS",
              kelompok: "A",
              dihapus: 0,
              kkm: 80,
              m_user_id: guru3.id,
              m_ta_id: checkta.id,
              m_sekolah_id: d.id,
            });
          }
          if (!checkGuru4) {
            const guru4 = await User.create({
              nama: "guru4",
              whatsapp: "guru4",
              password: await Hash.make("siapgpds"),
              role: "guru",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MMataPelajaran.create({
              nama: "Workshop GPDS4",
              kode: "GPDS",
              kelompok: "A",
              dihapus: 0,
              kkm: 80,
              m_user_id: guru4.id,
              m_ta_id: checkta.id,
              m_sekolah_id: d.id,
            });
          }

          if (!checkJurusan) {
            const jurusan = await MJurusan.create({
              nama: "-",
              kode: "-",
              m_sekolah_id: d.id,
              dihapus: 0,
            });
            if (!checkGuru1) {
              if (d.tingkat == "SMP") {
                rombel = await MRombel.create({
                  tingkat: "7",
                  nama: "7-Smarteschool",
                  m_jurusan_id: jurusan.id,
                  m_sekolah_id: d.id,
                  m_ta_id: checkta.id,
                  m_user_id: guru1.id,
                  kelompok: "reguler",
                  dihapus: 0,
                });

                const jamMengajar = await MJamMengajar.query()
                  .select("id")
                  .where({ m_sekolah_id: d.id })
                  .andWhere({ m_ta_id: checkta.id })
                  .fetch();

                const jadwalMengajarData = await Promise.all(
                  jamMengajar.toJSON().map(async (data) => {
                    data.m_mata_pelajaran_id = null;
                    data.m_rombel_id = rombel.id;
                    data.m_jam_mengajar_id = data.id;
                    data.m_sekolah_id = d.id;
                    data.m_ta_id = checkta.id;
                    delete data.id;
                    delete data.jamFormat;

                    return data;
                  })
                );

                await MJadwalMengajar.createMany(jadwalMengajarData);
              } else if (d.tingkat == "SD") {
                rombel = await MRombel.create({
                  tingkat: "6",
                  nama: "6-Smarteschool",
                  m_jurusan_id: jurusan.id,
                  m_sekolah_id: d.id,
                  m_ta_id: checkta.id,
                  m_user_id: guru1.id,
                  kelompok: "reguler",
                  dihapus: 0,
                });

                const jamMengajar = await MJamMengajar.query()
                  .select("id")
                  .where({ m_sekolah_id: d.id })
                  .andWhere({ m_ta_id: checkta.id })
                  .fetch();

                const jadwalMengajarData = await Promise.all(
                  jamMengajar.toJSON().map(async (data) => {
                    data.m_mata_pelajaran_id = null;
                    data.m_rombel_id = rombel.id;
                    data.m_jam_mengajar_id = data.id;
                    data.m_sekolah_id = d.id;
                    data.m_ta_id = checkta.id;
                    delete data.id;
                    delete data.jamFormat;

                    return data;
                  })
                );

                await MJadwalMengajar.createMany(jadwalMengajarData);
              }
            } else {
              if (d.tingkat == "SMP") {
                rombel = await MRombel.create({
                  tingkat: "7",
                  nama: "7-Smarteschool",
                  m_jurusan_id: jurusan.id,
                  m_sekolah_id: d.id,
                  m_ta_id: checkta.id,
                  m_user_id: checkGuru1.id,
                  kelompok: "reguler",
                  dihapus: 0,
                });

                const jamMengajar = await MJamMengajar.query()
                  .select("id")
                  .where({ m_sekolah_id: d.id })
                  .andWhere({ m_ta_id: checkta.id })
                  .fetch();

                const jadwalMengajarData = await Promise.all(
                  jamMengajar.toJSON().map(async (data) => {
                    data.m_mata_pelajaran_id = null;
                    data.m_rombel_id = rombel.id;
                    data.m_jam_mengajar_id = data.id;
                    data.m_sekolah_id = d.id;
                    data.m_ta_id = checkta.id;
                    delete data.id;
                    delete data.jamFormat;

                    return data;
                  })
                );

                await MJadwalMengajar.createMany(jadwalMengajarData);
              } else if (d.tingkat == "SD") {
                rombel = await MRombel.create({
                  tingkat: "6",
                  nama: "6-Smarteschool",
                  m_jurusan_id: jurusan.id,
                  m_sekolah_id: d.id,
                  m_ta_id: checkta.id,
                  m_user_id: checkGuru1.id,
                  kelompok: "reguler",
                  dihapus: 0,
                });

                const jamMengajar = await MJamMengajar.query()
                  .select("id")
                  .where({ m_sekolah_id: d.id })
                  .andWhere({ m_ta_id: checkta.id })
                  .fetch();

                const jadwalMengajarData = await Promise.all(
                  jamMengajar.toJSON().map(async (data) => {
                    data.m_mata_pelajaran_id = null;
                    data.m_rombel_id = rombel.id;
                    data.m_jam_mengajar_id = data.id;
                    data.m_sekolah_id = d.id;
                    data.m_ta_id = checkta.id;
                    delete data.id;
                    delete data.jamFormat;

                    return data;
                  })
                );

                await MJadwalMengajar.createMany(jadwalMengajarData);
              }
            }
          } else {
            if (!checkRombel) {
              if (!checkGuru1) {
                if (d.tingkat == "SMP") {
                  rombel = await MRombel.create({
                    tingkat: "7",
                    nama: "7-Smarteschool",
                    m_jurusan_id: checkJurusan.id,
                    m_sekolah_id: d.id,
                    m_ta_id: checkta.id,
                    m_user_id: guru1.id,
                    kelompok: "reguler",
                    dihapus: 0,
                  });

                  const jamMengajar = await MJamMengajar.query()
                    .select("id")
                    .where({ m_sekolah_id: d.id })
                    .andWhere({ m_ta_id: checkta.id })
                    .fetch();

                  const jadwalMengajarData = await Promise.all(
                    jamMengajar.toJSON().map(async (data) => {
                      data.m_mata_pelajaran_id = null;
                      data.m_rombel_id = rombel.id;
                      data.m_jam_mengajar_id = data.id;
                      data.m_sekolah_id = d.id;
                      data.m_ta_id = checkta.id;
                      delete data.id;
                      delete data.jamFormat;

                      return data;
                    })
                  );

                  await MJadwalMengajar.createMany(jadwalMengajarData);
                } else if (d.tingkat == "SD") {
                  rombel = await MRombel.create({
                    tingkat: "6",
                    nama: "6-Smarteschool",
                    m_jurusan_id: checkJurusan.id,
                    m_sekolah_id: d.id,
                    m_ta_id: checkta.id,
                    m_user_id: guru1.id,
                    kelompok: "reguler",
                    dihapus: 0,
                  });

                  const jamMengajar = await MJamMengajar.query()
                    .select("id")
                    .where({ m_sekolah_id: d.id })
                    .andWhere({ m_ta_id: checkta.id })
                    .fetch();

                  const jadwalMengajarData = await Promise.all(
                    jamMengajar.toJSON().map(async (data) => {
                      data.m_mata_pelajaran_id = null;
                      data.m_rombel_id = rombel.id;
                      data.m_jam_mengajar_id = data.id;
                      data.m_sekolah_id = d.id;
                      data.m_ta_id = checkta.id;
                      delete data.id;
                      delete data.jamFormat;

                      return data;
                    })
                  );

                  await MJadwalMengajar.createMany(jadwalMengajarData);
                }
              } else {
                if (d.tingkat == "SMP") {
                  rombel = await MRombel.create({
                    tingkat: "7",
                    nama: "7-Smarteschool",
                    m_jurusan_id: checkJurusan.id,
                    m_sekolah_id: d.id,
                    m_ta_id: checkta.id,
                    m_user_id: checkGuru1.id,
                    kelompok: "reguler",
                    dihapus: 0,
                  });

                  const jamMengajar = await MJamMengajar.query()
                    .select("id")
                    .where({ m_sekolah_id: d.id })
                    .andWhere({ m_ta_id: checkta.id })
                    .fetch();

                  const jadwalMengajarData = await Promise.all(
                    jamMengajar.toJSON().map(async (data) => {
                      data.m_mata_pelajaran_id = null;
                      data.m_rombel_id = rombel.id;
                      data.m_jam_mengajar_id = data.id;
                      data.m_sekolah_id = d.id;
                      data.m_ta_id = checkta.id;
                      delete data.id;
                      delete data.jamFormat;

                      return data;
                    })
                  );

                  await MJadwalMengajar.createMany(jadwalMengajarData);
                } else if (d.tingkat == "SD") {
                  rombel = await MRombel.create({
                    tingkat: "6",
                    nama: "6-Smarteschool",
                    m_jurusan_id: checkJurusan.id,
                    m_sekolah_id: d.id,
                    m_ta_id: checkta.id,
                    m_user_id: checkGuru1.id,
                    kelompok: "reguler",
                    dihapus: 0,
                  });

                  const jamMengajar = await MJamMengajar.query()
                    .select("id")
                    .where({ m_sekolah_id: d.id })
                    .andWhere({ m_ta_id: checkta.id })
                    .fetch();

                  const jadwalMengajarData = await Promise.all(
                    jamMengajar.toJSON().map(async (data) => {
                      data.m_mata_pelajaran_id = null;
                      data.m_rombel_id = rombel.id;
                      data.m_jam_mengajar_id = data.id;
                      data.m_sekolah_id = d.id;
                      data.m_ta_id = checkta.id;
                      delete data.id;
                      delete data.jamFormat;

                      return data;
                    })
                  );

                  await MJadwalMengajar.createMany(jadwalMengajarData);
                }
              }
            }
          }
        }
        if (!checkRombel) {
          if (!checkSiswa1) {
            const siswa1 = await User.create({
              nama: "siswa1",
              whatsapp: "siswa1",
              password: await Hash.make("siapgpds"),
              role: "siswa",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MAnggotaRombel.create({
              role: "anggota",
              dihapus: 0,
              m_user_id: siswa1.id,
              m_rombel_id: rombel.id,
            });
          }
          await MAnggotaRombel.create({
            role: "anggota",
            dihapus: 0,
            m_user_id: checkSiswa1.id,
            m_rombel_id: rombel.id,
          });
          if (!checkSiswa2) {
            const siswa2 = await User.create({
              nama: "siswa2",
              whatsapp: "siswa2",
              password: await Hash.make("siapgpds"),
              role: "siswa",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MAnggotaRombel.create({
              role: "anggota",
              dihapus: 0,
              m_user_id: siswa2.id,
              m_rombel_id: rombel.id,
            });
          }
          await MAnggotaRombel.create({
            role: "anggota",
            dihapus: 0,
            m_user_id: checkSiswa2.id,
            m_rombel_id: rombel.id,
          });
          if (!checkSiswa3) {
            const siswa3 = await User.create({
              nama: "siswa3",
              whatsapp: "siswa3",
              password: await Hash.make("siapgpds"),
              role: "siswa",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MAnggotaRombel.create({
              role: "anggota",
              dihapus: 0,
              m_user_id: siswa3.id,
              m_rombel_id: rombel.id,
            });
          }
          await MAnggotaRombel.create({
            role: "anggota",
            dihapus: 0,
            m_user_id: checkSiswa3.id,
            m_rombel_id: rombel.id,
          });
          if (!checkSiswa4) {
            const siswa4 = await User.create({
              nama: "siswa4",
              whatsapp: "siswa4",
              password: await Hash.make("siapgpds"),
              role: "siswa",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MAnggotaRombel.create({
              role: "anggota",
              dihapus: 0,
              m_user_id: siswa4.id,
              m_rombel_id: rombel.id,
            });
          }
          await MAnggotaRombel.create({
            role: "anggota",
            dihapus: 0,
            m_user_id: checkSiswa4.id,
            m_rombel_id: rombel.id,
          });
        } else {
          if (!checkSiswa1) {
            const siswa1 = await User.create({
              nama: "siswa1",
              whatsapp: "siswa1",
              password: await Hash.make("siapgpds"),
              role: "siswa",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MAnggotaRombel.create({
              role: "anggota",
              dihapus: 0,
              m_user_id: siswa1.id,
              m_rombel_id: checkRombel.id,
            });
          }
          await MAnggotaRombel.create({
            role: "anggota",
            dihapus: 0,
            m_user_id: checkSiswa1.id,
            m_rombel_id: checkRombel.id,
          });
          if (!checkSiswa2) {
            const siswa2 = await User.create({
              nama: "siswa2",
              whatsapp: "siswa2",
              password: await Hash.make("siapgpds"),
              role: "siswa",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MAnggotaRombel.create({
              role: "anggota",
              dihapus: 0,
              m_user_id: siswa2.id,
              m_rombel_id: checkRombel.id,
            });
          }
          await MAnggotaRombel.create({
            role: "anggota",
            dihapus: 0,
            m_user_id: checkSiswa2.id,
            m_rombel_id: checkRombel.id,
          });
          if (!checkSiswa3) {
            const siswa3 = await User.create({
              nama: "siswa3",
              whatsapp: "siswa3",
              password: await Hash.make("siapgpds"),
              role: "siswa",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MAnggotaRombel.create({
              role: "anggota",
              dihapus: 0,
              m_user_id: siswa3.id,
              m_rombel_id: checkRombel.id,
            });
          }
          await MAnggotaRombel.create({
            role: "anggota",
            dihapus: 0,
            m_user_id: checkSiswa3.id,
            m_rombel_id: checkRombel.id,
          });
          if (!checkSiswa4) {
            const siswa4 = await User.create({
              nama: "siswa4",
              whatsapp: "siswa4",
              password: await Hash.make("siapgpds"),
              role: "siswa",
              dihapus: 0,
              m_sekolah_id: d.id,
            });
            await MAnggotaRombel.create({
              role: "anggota",
              dihapus: 0,
              m_user_id: siswa4.id,
              m_rombel_id: checkRombel.id,
            });
          }
          await MAnggotaRombel.create({
            role: "anggota",
            dihapus: 0,
            m_user_id: checkSiswa4.id,
            m_rombel_id: checkRombel.id,
          });

          const jamMengajar = await MJamMengajar.query()
            .select("id")
            .where({ m_sekolah_id: d.id })
            .andWhere({ m_ta_id: checkta.id })
            .fetch();

          const jadwalMengajarData = await Promise.all(
            jamMengajar.toJSON().map(async (data) => {
              data.m_mata_pelajaran_id = null;
              data.m_rombel_id = checkRombel.id;
              data.m_jam_mengajar_id = data.id;
              data.m_sekolah_id = d.id;
              data.m_ta_id = checkta.id;
              delete data.id;
              delete data.jamFormat;

              return data;
            })
          );

          await MJadwalMengajar.createMany(jadwalMengajarData);
        }
        return;
      })
    );
    return response.ok({
      message: messagePostSuccess,
    });
  }

  async importNilaiRekapRombelServices(
    filelocation,
    sekolah,
    rekapRombel_id,
    ta
  ) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar Rekap Nilai Siswa");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber > 5) {
        data.push({
          nama: explanation.getCell("B" + rowNumber).value,
          whatsapp: explanation.getCell("C" + rowNumber).value,
          nilai: explanation.getCell("D" + rowNumber).value,
        });
      }
    });

    const rekapRombel = await MRekapRombel.query()
      .with("rekap")
      .where({ id: rekapRombel_id })
      .first();

    const materi = await MMateri.query()
      .where({ id: rekapRombel.toJSON().rekap.m_materi_id })
      .first();

    const mapel = await MMataPelajaran.query()
      .with("user")
      .with("materi")
      .where({ id: materi.m_mata_pelajaran_id })
      .first();

    const result = await Promise.all(
      data.map(async (d) => {
        const userSiswa = await User.query()
          .select("id", "whatsapp", "dihapus")
          .where({ whatsapp: d.whatsapp })
          .andWhere({ dihapus: 0 })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        const checkData = await MUjianSiswa.query()
          .where({ m_user_id: userSiswa.id })
          .andWhere({ m_mata_pelajaran_id: materi.m_mata_pelajaran_id })
          .andWhere({ m_ta_id: ta.id })
          .first();

        const nilaiSiswa = await TkRekapNilai.query()
          .where({ m_rekap_rombel_id: rekapRombel_id })
          .andWhere({ m_user_id: userSiswa.id })
          .update({
            nilai: d.nilai > 100 ? 100 : d.nilai,
          });

        const nilaiSiswa1 = await TkRekapNilai.query()
          .select("id", "m_rekap_rombel_id", "m_user_id")
          .where({ m_rekap_rombel_id: rekapRombel_id })
          .andWhere({ m_user_id: userSiswa.id })
          .first();

        if (
          rekapRombel.toJSON().rekap.tipe == "tugas" ||
          rekapRombel.toJSON().rekap.tipe == "ujian"
        ) {
          const rekap = await TkRekapNilai.query()
            .with("rekapRombel", (builder) => {
              builder.with("rekap", (builder) => {
                builder
                  .where({ tipe: "tugas" })
                  .andWhere({ m_ta_id: ta.id })
                  .andWhere({ dihapus: 0 })
                  .andWhere({ m_materi_id: materi.id });
              });
            })
            .where({ m_user_id: userSiswa.id })
            .fetch();

          const rekapUjian = await TkRekapNilai.query()
            .with("rekapRombel", (builder) => {
              builder.with("rekap", (builder) => {
                builder
                  .where({ tipe: "ujian" })
                  .andWhere({ m_ta_id: ta.id })
                  .andWhere({ dihapus: 0 })
                  .andWhere({ m_materi_id: materi.id });
              });
            })
            .where({ m_user_id: userSiswa.id })
            .fetch();

          const ujian = await MUjianSiswa.query()
            .with("nilaiUAS", (builder) => {
              builder.select("id", "nilai");
            })
            .with("nilaiUTS", (builder) => {
              builder.select("id", "nilai");
            })
            .where({ m_user_id: userSiswa.id })
            .andWhere({ m_mata_pelajaran_id: mapel.id })
            .first();

          const result = await Promise.all(
            rekap.toJSON().map(async (d) => {
              if (d.rekapRombel.rekap == null) {
                return;
              }
              return d;
            })
          );

          const data = result.filter((d) => d != null);

          let jumlah1 = 0;

          result
            .filter((d) => d != null)
            .forEach((d) => {
              jumlah1 += d.nilai;
            });

          const rata = jumlah1 / data.length;

          const result1 = await Promise.all(
            rekapUjian.toJSON().map(async (d) => {
              if (d.rekapRombel.rekap == null) {
                return;
              }
              return d;
            })
          );

          const dataUjian = result1.filter((d) => d != null);

          let jumlah = 0;

          result1
            .filter((d) => d != null)
            .forEach((d) => {
              jumlah += d.nilai;
            });

          const rataUjian = jumlah / dataUjian.length;

          if (rekapRombel.toJSON().rekap.teknik == "UTS") {
            if (checkData) {
              try {
                await MUjianSiswa.query()
                  .where({ m_user_id: userSiswa.id })
                  .andWhere({ m_mata_pelajaran_id: materi.m_mata_pelajaran_id })
                  .update({
                    uts_id: nilaiSiswa1.id,
                  });
              } catch (error) {}
            } else {
              await MUjianSiswa.create({
                m_user_id: userSiswa.id,
                m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                uts_id: nilaiSiswa1.id,
                m_ta_id: ta.id,
              });
            }
          } else if (rekapRombel.toJSON().rekap.teknik == "UAS") {
            if (checkData) {
              await MUjianSiswa.query()
                .where({ m_user_id: userSiswa.id })
                .andWhere({ m_mata_pelajaran_id: materi.m_mata_pelajaran_id })
                .update({
                  uas_id: nilaiSiswa1.id,
                });
            } else {
              await MUjianSiswa.create({
                m_user_id: userSiswa.id,
                m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                uas_id: nilaiSiswa1.id,
                m_ta_id: ta.id,
              });
            }
          } else if (rekapRombel.toJSON().rekap.teknik == "US") {
            if (checkData) {
              await MUjianSiswa.query()
                .where({ m_user_id: userSiswa.id })
                .andWhere({ m_mata_pelajaran_id: materi.m_mata_pelajaran_id })
                .update({
                  us_id: nilaiSiswa1.id,
                });
            } else {
              await MUjianSiswa.create({
                m_user_id: userSiswa.id,
                m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                us_id: nilaiSiswa1.id,
                m_ta_id: ta.id,
              });
            }
          }

          let nilaiAkhir;
          if (ujian) {
            // const listNilai = [
            //   rataUjian,
            //   rata,
            //   ujian.toJSON().nilaiUAS ? ujian.toJSON().nilaiUAS?.nilai : null,
            //   ujian.toJSON().nilaiUTS ? ujian.toJSON().nilaiUTS?.nilai : null,
            // ];
            const nilaiPengetahuan1 = [rataUjian, rata];

            const nilaiSebelumAkhir = nilaiPengetahuan1.filter((nilai) => nilai)
              .length
              ? 2 *
                nilaiPengetahuan1
                  .filter((nilai) => nilai)
                  .reduce((a, b) => a + b, 0)
              : 0;

            const nilaiUTS =
              ujian.toJSON().nilaiUTS != null
                ? ujian.toJSON().nilaiUTS?.nilai
                : null;

            const nilaiUAS =
              ujian.toJSON().nilaiUAS != null
                ? ujian.toJSON().nilaiUAS?.nilai
                : null;

            const listNilai = [nilaiSebelumAkhir, nilaiUTS, nilaiUAS];

            if (listNilai.filter((nilai) => nilai != null).length == 2) {
              nilaiAkhir = listNilai.filter((nilai) => nilai != null).length
                ? listNilai
                    .filter((nilai) => nilai != null)
                    .reduce((a, b) => a + b, 0) / 3
                : 0;
            } else if (listNilai.filter((nilai) => nilai != null).length == 3) {
              nilaiAkhir = listNilai.filter((nilai) => nilai != null).length
                ? listNilai
                    .filter((nilai) => nilai != null)
                    .reduce((a, b) => a + b, 0) / 4
                : 0;
            }

            await MUjianSiswa.query().where({ id: ujian.id }).update({
              nilai: nilaiAkhir,
            });
          } else {
            const listNilai = [rataUjian, rata];
            nilaiAkhir = listNilai.filter((nilai) => nilai).length
              ? listNilai.filter((nilai) => nilai).reduce((a, b) => a + b, 0) /
                listNilai.filter((nilai) => nilai).length
              : 0;
            await MUjianSiswa.create({
              m_ta_id: ta.id,
              m_user_id: user_id,
              m_mata_pelajaran_id: mapel.id,
              nilai: nilaiAkhir,
            });
          }
        } else if (rekapRombel.toJSON().rekap.tipe == "keterampilan") {
          const rekap = await TkRekapNilai.query()
            .with("rekapRombel", (builder) => {
              builder.with("rekap", (builder) => {
                builder
                  .where({ tipe: "keterampilan" })
                  .andWhere({ m_ta_id: ta.id })
                  .andWhere({ dihapus: 0 })
                  .andWhere({ m_materi_id: materi.id });
              });
            })
            .where({ m_user_id: userSiswa.id })
            .fetch();
          const result = await Promise.all(
            rekap.toJSON().map(async (d) => {
              if (d.rekapRombel.rekap == null) {
                return;
              }
              return d;
            })
          );
          const dataKeterampilan = result.filter((d) => d != null);
          let jumlah0 = 0;
          result
            .filter((d) => d != null)
            .forEach((d) => {
              jumlah0 += d.nilai;
            });

          const rataData = dataKeterampilan.length
            ? jumlah0 / dataKeterampilan.length
            : 0;

          const rekapPraktik = await TkRekapNilai.query()
            .with("rekapRombel", (builder) => {
              builder.where({ dihapus: 0 }).with("rekap", (builder) => {
                builder
                  .where({ tipe: "keterampilan" })
                  .andWhere({ teknik: "praktik" })
                  .andWhere({ m_ta_id: ta.id })
                  .andWhere({ dihapus: 0 })
                  .andWhere({ m_materi_id: materi.id });
              });
            })
            .where({ m_user_id: userSiswa.id })
            .fetch();
          const result1 = await Promise.all(
            rekapPraktik.toJSON().map(async (d) => {
              if (d.rekapRombel.rekap == null) {
                return;
              }
              return d;
            })
          );
          let jumlah = 0;
          result1
            .filter((d) => d != null)
            .forEach((d) => {
              jumlah += d.nilai;
            });
          const data4 = result1.filter((d) => d != null);

          const praktik = jumlah / data4.length;

          const rekapProyek = await TkRekapNilai.query()
            .with("rekapRombel", (builder) => {
              builder.with("rekap", (builder) => {
                builder
                  .where({ tipe: "keterampilan" })
                  .andWhere({ teknik: "proyek" })
                  .andWhere({ m_ta_id: ta.id })
                  .andWhere({ dihapus: 0 })
                  .andWhere({ m_materi_id: materi.id });
              });
            })
            .where({ m_user_id: userSiswa.id })
            .fetch();
          const result2 = await Promise.all(
            rekapProyek.toJSON().map(async (d) => {
              if (d.rekapRombel.rekap == null) {
                return;
              }
              return d;
            })
          );
          let jumlah1 = 0;
          result2
            .filter((d) => d != null)
            .forEach((d) => {
              jumlah1 += d.nilai;
            });
          const data1 = result2.filter((d) => d != null);
          const proyek = jumlah1 / data1.length;

          const rekapPortofolio = await TkRekapNilai.query()
            .with("rekapRombel", (builder) => {
              builder.with("rekap", (builder) => {
                builder
                  .where({ tipe: "keterampilan" })
                  .andWhere({ teknik: "portofolio" })
                  .andWhere({ m_ta_id: ta.id })
                  .andWhere({ dihapus: 0 })
                  .andWhere({ m_materi_id: materi.id });
              });
            })
            .where({ m_user_id: userSiswa.id })
            .fetch();
          const result3 = await Promise.all(
            rekapPortofolio.toJSON().map(async (d) => {
              if (d.rekapRombel.rekap == null) {
                return;
              }
              return d;
            })
          );
          let jumlah2 = 0;
          result3
            .filter((d) => d != null)
            .forEach((d) => {
              jumlah2 += d.nilai;
            });
          const data2 = result3.filter((d) => d != null);
          const portofolio = jumlah2 / data2.length;

          const rekapProduk = await TkRekapNilai.query()
            .with("rekapRombel", (builder) => {
              builder.with("rekap", (builder) => {
                builder
                  .where({ tipe: "keterampilan" })
                  .andWhere({ teknik: "produk" })
                  .andWhere({ m_ta_id: ta.id })
                  .andWhere({ dihapus: 0 })
                  .andWhere({ m_materi_id: materi.id });
              });
            })
            .where({ m_user_id: userSiswa.id })
            .fetch();
          const result4 = await Promise.all(
            rekapProduk.toJSON().map(async (d) => {
              if (d.rekapRombel.rekap == null) {
                return;
              }
              return d;
            })
          );
          let jumlah3 = 0;
          result4
            .filter((d) => d != null)
            .forEach((d) => {
              jumlah3 += d.nilai;
            });
          const data3 = result4.filter((d) => d != null);
          const produk = jumlah3 / data3.length;

          const nilaiAkhirKeterampilan = await MUjianSiswa.query()
            .where({ m_user_id: userSiswa.id })
            .andWhere({
              m_mata_pelajaran_id: mapel.id,
            })
            .first();

          if (nilaiAkhirKeterampilan) {
            await MUjianSiswa.query()
              .where({ id: nilaiAkhirKeterampilan.id })
              .update({
                nilai_keterampilan: rataData,
              });
          } else {
            await MUjianSiswa.create({
              m_ta_id: ta.id,
              m_user_id: userSiswa.id,
              m_mata_pelajaran_id: mapel.id,
              nilai_keterampilan: rataData,
            });
          }
        }
        return;
      })
    );

    return result;
  }

  async importNilaiRekapRombel({
    request,
    response,
    auth,
    params: { rekapRombel_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importNilaiRekapRombelServices(
      `tmp/uploads/${fname}`,
      sekolah,
      rekapRombel_id,
      ta
    );
  }

  async downloadRekapRombel({
    response,
    request,
    auth,
    params: { rekapRombel_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const rekapan = await MRekapRombel.query()
      .with("rekap")
      .with("rombel")
      .where({ id: rekapRombel_id })
      .first();

    const rekapData = await TkRekapNilai.query()
      .with("user", (builder) => {
        builder.select("id", "nama", "whatsapp");
      })
      .where({ m_rekap_rombel_id: rekapRombel_id })
      .fetch();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Daftar Rekap Nilai Siswa`);

    worksheet.mergeCells("A1:D1");
    worksheet.mergeCells("A2:D2");
    worksheet.mergeCells("A3:D3");

    worksheet.getCell(
      "A4"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;

    worksheet.addConditionalFormatting({
      ref: "A1:D3",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });

    worksheet.addConditionalFormatting({
      ref: "A5:D5",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });

    if (rekapan.toJSON().rekap.tipe == "tugas") {
      worksheet.getCell("A1").value = "Rekapan Nilai Tugas Siswa";
    } else if (rekapan.toJSON().rekap.tipe == "keterampilan") {
      worksheet.getCell("A1").value = "Rekapan Nilai Keterampilan Siswa";
    } else if (rekapan.toJSON().rekap.tipe == "ujian") {
      worksheet.getCell("A1").value = "Rekapan Nilai Ujian Siswa";
    }
    worksheet.getCell("A2").value = rekapan.toJSON().rombel.nama;
    worksheet.getCell("A3").value = rekapan.judul;

    await Promise.all(
      rekapData
        .toJSON()
        .sort((a, b) => ("" + a.user.nama).localeCompare("" + b.user.nama))
        .map(async (d, idx) => {
          worksheet.addConditionalFormatting({
            ref: `B${(idx + 1) * 1 + 5}:C${(idx + 1) * 1 + 5}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "left",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          worksheet.addConditionalFormatting({
            ref: `A${(idx + 1) * 1 + 5}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "center",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          worksheet.addConditionalFormatting({
            ref: `D${(idx + 1) * 1 + 5}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "center",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          // add column headers
          worksheet.getRow(5).values = ["No", "Nama", "Whatsapp", "Nilai"];
          worksheet.columns = [
            { key: "no" },
            { key: "nama" },
            { key: "whatsapp" },
            { key: "nilai" },
          ];

          // Add row using key mapping to columns
          let row = worksheet.addRow({
            no: `${idx + 1}`,
            nama: d.user ? d.user.nama : "-",
            whatsapp: d.user ? d.user.whatsapp : "-",
            nilai: d ? d.nilai : "-",
          });
        })
    );
    worksheet.getColumn("A").width = 6;
    worksheet.getColumn("B").width = 20;
    worksheet.getColumn("C").width = 23;
    worksheet.getColumn("D").width = 6;

    let namaFile = `/uploads/rekapan-nilai-${
      rekapan.toJSON().rekap.tipe
    }-siswa-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async detailRPPGuru({ response, request, auth, params: { user_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    if (ta == "404") {
      return response.notFound({ message: "Tahun Ajaran belum terdaftar" });
    }

    const userAuthor = await User.query()
      .where({ dihapus: 0 })
      .andWhere({ id: user_id })
      .with("profil")
      .first();

    const rppQuery = MRpp.query()
      .with("mataPelajaran")
      .where({ m_user_id: userAuthor.id })
      .andWhere({ dihapus: 0 });

    const rpp = await MRpp.query()
      .with("mataPelajaran")
      .where({ m_user_id: userAuthor.id })
      .andWhere({ dihapus: 0 })
      .whereNull("tipe")
      .fetch();

    const silabus = await MRpp.query()
      .with("mataPelajaran")
      .where({ m_user_id: userAuthor.id })
      .andWhere({ dihapus: 0 })
      .where({ tipe: "silabus" })
      .fetch();

    const perangkat = await MRpp.query()
      .with("mataPelajaran")
      .where({ m_user_id: userAuthor.id })
      .andWhere({ dihapus: 0 })
      .where({ tipe: "perangkat" })
      .fetch();

    return response.ok({
      userAuthor,
      bukuKerja: { rpp, silabus, perangkat },
      sekolah,
    });
  }

  async getProfilGuru({ auth, response, request, params: { user_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const mataPelajaran = await MMataPelajaran.query()
      .where({ m_user_id: user_id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const userData = await User.query()
      .with("profil")
      .where({ id: user_id })
      .with("sekolah")
      .first();

    let rombel;

    if (ta != "404") {
      rombel = await MRombel.query()
        .where({ m_ta_id: ta.id })
        .andWhere({ m_user_id: user_id })
        .first();
    }

    return response.ok({
      user: userData,
      mataPelajaran: mataPelajaran,
      rombel,
      ta,
    });
  }

  async getKonsultasi({ auth, response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);
    const user = await auth.getUser();
    const { tipe, search, nav, tanggal, page } = request.get();

    let mataPelajaran;
    let bukuKunjungan;
    let totalPengunjung;
    let totalPengunjungSelesai;
    let totalPengunjungProses;
    let totalPengunjungTolak;

    if (user.role == "guru" || user.m_sekolah_id != sekolah.id) {
      bukuKunjungan = MPertemuanBk.query()
        .with("user", (builder) => {
          builder.select("id", "nama");
          if (search) {
            bukuKunjungan.where("nama", "like", `%${search}%`);
          }
        })
        .where({ m_user_guru_id: user.id });
      if (tipe == "buku") {
        if (nav == "pengajuan") {
          bukuKunjungan.andWhere({ status: null });
        } else if (nav == "diterima") {
          bukuKunjungan.andWhere({ status: 1 }).andWhere({ status_selesai: 0 });
        } else if (nav == "ditolak") {
          bukuKunjungan.andWhere({ status: 0 });
        } else if (nav == "selesai") {
          bukuKunjungan.andWhere({ status: 1 }).andWhere({ status_selesai: 1 });
        }
        if (tanggal) {
          bukuKunjungan.andWhere({ status: tanggal });
        }
        totalPengunjung = await MPertemuanBk.query()
          .with("user")
          .where({ m_user_guru_id: user.id })
          .count("* as totalPengunjung");

        totalPengunjungProses = await MPertemuanBk.query()
          .with("user")
          .where({ m_user_guru_id: user.id })
          .andWhere({ status: 1 })
          .count("* as totalDiproses");

        totalPengunjungTolak = await MPertemuanBk.query()
          .with("user")
          .where({ m_user_guru_id: user.id })
          .andWhere({ status: 0 })
          .count("* as totalDitolak");

        totalPengunjungSelesai = await MPertemuanBk.query()
          .with("user")
          .where({ m_user_guru_id: user.id })
          .andWhere({ status: 1 })
          .andWhere({ status_selesai: 1 })
          .count("* as totalSelesai");
      } else if (tipe == "konsultasi") {
        if (nav == "hari_ini") {
          bukuKunjungan
            .andWhere({ status: null })
            .whereBetween("tanggal_konsultasi", [
              `${today.getFullYear()}-${
                today.getMonth() + 1
              }-${today.getDate()} 00:00:00`,
              `${today.getFullYear()}-${today.getMonth() + 1}-${
                today.getDate() + 1
              } 00:00:00`,
            ]);
        } else if (nav == "akan_datang") {
          bukuKunjungan
            .andWhere({ status: 1 })
            .andWhere({ status_selesai: 0 })
            .andWhere(
              "tanggal_konsultasi",
              ">",
              `${today.getFullYear()}-${
                today.getMonth() + 1
              }-${today.getDate()} 00:00:00`
            );
        } else if (nav == "selesai") {
          bukuKunjungan.andWhere({ status: 1 }).andWhere({ status_selesai: 1 });
        }
      }
    } else if (user.role == "siswa" || user.m_sekolah_id != sekolah.id) {
      if (tipe == "cari") {
        mataPelajaran = await MMataPelajaran.query()
          .with("user", (builder) => {
            builder
              .with("pertemuanBk", (builder) => {
                builder
                  .where({ m_user_id: user.id })
                  .andWhere({ status_selesai: 0 });
              })
              .withCount("pertemuanBk as total", (builder) => {
                builder.where({ status_selesai: 0 }).andWhere({ status: 1 });
              })
              .select("id", "nama");
          })
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ dihapus: 0 })
          .andWhere({ kode: "BK" })
          .andWhere({ m_ta_id: ta.id })
          .fetch();
      } else if (tipe == "konsultasi") {
        bukuKunjungan = MPertemuanBk.query()
          .with("userGuru", (builder) => {
            builder.select("id", "nama");
            if (search) {
              bukuKunjungan.where("nama", "like", `%${search}%`);
            }
          })
          .where({ m_user_id: user.id });
        if (nav == "pengajuan") {
          bukuKunjungan.andWhere({ status: null });
        } else if (nav == "diterima") {
          bukuKunjungan.andWhere({ status: 1 }).andWhere({ status_selesai: 0 });
        } else if (nav == "ditolak") {
          bukuKunjungan.andWhere({ status: 0 });
        } else if (nav == "selesai") {
          bukuKunjungan.andWhere({ status: 1 }).andWhere({ status_selesai: 1 });
        }
      }
    }
    if (tipe != "cari") {
      bukuKunjungan = await bukuKunjungan.paginate(page, 10);
    }

    return response.ok({
      mataPelajaran: mataPelajaran,
      bukuKunjungan,
      totalPengunjung,
      totalPengunjungSelesai,
      totalPengunjungProses,
      totalPengunjungTolak,
    });
  }
  async detailKonsultasi({
    auth,
    response,
    request,
    params: { konsultasi_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);
    const user = await auth.getUser();

    let konsultasi;
    if (user.role == "guru" || user.m_sekolah_id != sekolah.id) {
      konsultasi = await MPertemuanBk.query()
        .with("user", (builder) => {
          builder
            .select("id", "nama", "whatsapp")
            .with("profil", (builder) => {
              builder.select("m_user_id", "alamat");
            })
            .with("anggotaRombel", (builder) => {
              builder.with("rombel");
            });
        })
        .with("userGuru", (builder) => {
          builder.select("id", "nama", "whatsapp");
        })
        .with("jadwal")
        .where({ id: konsultasi_id })
        .first();
    } else if (user.role == "siswa" || user.m_sekolah_id != sekolah.id) {
      konsultasi = await MPertemuanBk.query()
        .with("user", (builder) => {
          builder.select("id", "nama", "whatsapp");
        })
        .with("userGuru", (builder) => {
          builder.select("id", "nama", "whatsapp");
        })
        .with("jadwal")
        .where({ id: konsultasi_id })
        .first();
    }

    return response.ok({
      konsultasi,
    });
  }

  async postKonsultasi({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      keperluan,
      tanggal_konsultasi,
      media_konsultasi,
      keterangan,
      m_user_guru_id,
    } = request.post();
    const rules = {
      keperluan: "required",
      tanggal_konsultasi: "required",
      media_konsultasi: "required",
      keterangan: "required",
      m_user_guru_id: "required",
    };
    const message = {
      "keperluan.required": "Keperluan harus diisi",
      "tanggal_konsultasi.required": "Tanggal Konsultasi harus diisi",
      "media_konsultasi.required": "Media Konsultasi harus diisi",
      "keterangan.required": "Keterangan harus diisi",
      "m_user_guru_id.required": "Nama Guru BK harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const Konsultasi = await MPertemuanBk.create({
      keperluan,
      tanggal_konsultasi,
      media_konsultasi,
      keterangan,
      m_user_guru_id,
      m_user_id: user.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async postJadwalKonsultasi({
    response,
    request,
    auth,
    params: { konsultasi_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { waktu_mulai, waktu_berakhir, media, keterangan, status } =
      request.post();
    const rules = {
      keterangan: "required",
    };
    const message = {
      "keterangan.required": "Keterangan harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const Konsultasi = await MJadwalKonsultasi.create({
      waktu_mulai,
      waktu_berakhir,
      media,
      keterangan,
      m_pertemuan_bk_id: konsultasi_id,
    });

    await MPertemuanBk.query().where({ id: konsultasi_id }).update({
      status,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async postSelesaiKonsultasi({
    response,
    request,
    auth,
    params: { konsultasi_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const { status_selesai } = request.post();

    await MPertemuanBk.query().where({ id: konsultasi_id }).update({
      status_selesai,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async downloadKonsultasi({
    response,
    request,
    auth,
    params: { rekapRombel_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const bukuKunjunganPengajuan = await MPertemuanBk.query()
      .with("user", (builder) => {
        builder.select("id", "nama");
      })
      .where({ m_user_guru_id: user.id })
      .andWhere({ status: null })
      .fetch();

    const bukuKunjunganDiterima = await MPertemuanBk.query()
      .with("user", (builder) => {
        builder.select("id", "nama");
      })
      .where({ m_user_guru_id: user.id })
      .andWhere({ status: 1 })
      .andWhere({ status_selesai: 0 })
      .fetch();

    const bukuKunjunganDitolak = await MPertemuanBk.query()
      .with("user", (builder) => {
        builder.select("id", "nama");
      })
      .where({ m_user_guru_id: user.id })
      .andWhere({ status: 0 })
      .fetch();

    const bukuKunjunganSelesai = await MPertemuanBk.query()
      .with("user", (builder) => {
        builder.select("id", "nama");
      })
      .with("userGuru", (builder) => {
        builder.select("id", "nama");
      })
      .with("jadwal")
      .where({ m_user_guru_id: user.id })
      .andWhere({ status: 1 })
      .andWhere({ status_selesai: 1 })
      .fetch();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Daftar Rekap Konsultasi`);

    worksheet.mergeCells("A1:J1");
    worksheet.mergeCells("A2:J2");
    worksheet.mergeCells("A3:J3");

    worksheet.getCell(
      "A4"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;

    worksheet.addConditionalFormatting({
      ref: "A1:D3",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });

    worksheet.addConditionalFormatting({
      ref: "A5:J5",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });

    worksheet.getCell("A1").value = "Rekapan Konsultasi";

    worksheet.getCell("A2").value = sekolah.nama;
    worksheet.getCell("A3").value = user.nama;

    await Promise.all(
      bukuKunjunganSelesai.toJSON().map(async (d, idx) => {
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 5}:J${(idx + 1) * 1 + 5}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 5}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });

        // add column headers
        worksheet.getRow(5).values = [
          "No",
          "Nama Siswa",
          "Keperluan Siswa",
          "Tanggal",
          "Media",
          "Keterangan Siswa",
          "Waktu Mulai",
          "Waktu Berakhir",
          "Konsultasi",
          "Keterangan Konsultasi",
        ];
        worksheet.columns = [
          { key: "no" },
          { key: "nama" },
          { key: "keperluan" },
          { key: "tanggal" },
          { key: "media" },
          { key: "keterangan" },
          { key: "waktu_mulai" },
          { key: "waktu_berakhir" },
          { key: "konsultasi" },
          { key: "keterangan_konsultasi" },
        ];

        // Add row using key mapping to columns
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          nama: d.user ? d.user.nama : "-",
          keperluan: d ? d.keperluan : "-",
          tanggal: d ? d.tanggal_konsultasi : "-",
          media: d ? d.media_konsultasi : "-",
          keterangan: d ? d.keterangan : "-",
          waktu_mulai: d.jadwal ? d.jadwal.waktu_mulai : "-",
          waktu_berakhir: d.jadwal ? d.jadwal.waktu_berakhir : "-",
          konsultasi: d.jadwal ? d.jadwal.media : "-",
          keterangan_konsultasi: d.jadwal ? d.jadwal.keterangan : "-",
        });
      })
    );
    worksheet.getColumn("A").width = 6;
    worksheet.getColumn("B").width = 20;
    worksheet.getColumn("C").width = 23;
    worksheet.getColumn("D").width = 11;
    worksheet.getColumn("E").width = 16;
    worksheet.getColumn("F").width = 20;
    worksheet.getColumn("G").width = 15;
    worksheet.getColumn("H").width = 15;
    worksheet.getColumn("I").width = 20;
    worksheet.getColumn("J").width = 26;

    let worksheet2 = workbook.addWorksheet(`Daftar Rekap Konsultasi Ditolak`);

    worksheet2.mergeCells("A1:G1");
    worksheet2.mergeCells("A2:G2");
    worksheet2.mergeCells("A3:G3");

    worksheet2.getCell(
      "A4"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;

    worksheet2.addConditionalFormatting({
      ref: "A1:D3",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });

    worksheet2.addConditionalFormatting({
      ref: "A5:G5",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });

    worksheet2.getCell("A1").value = "Rekapan Konsultasi";

    worksheet2.getCell("A2").value = sekolah.nama;
    worksheet2.getCell("A3").value = user.nama;

    await Promise.all(
      bukuKunjunganDitolak.toJSON().map(async (d, idx) => {
        worksheet2.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 5}:G${(idx + 1) * 1 + 5}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet2.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 5}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });

        // add column headers
        worksheet2.getRow(5).values = [
          "No",
          "Nama Siswa",
          "Keperluan Siswa",
          "Tanggal",
          "Media",
          "Keterangan Siswa",
          "Keterangan Konsultasi Ditolak",
        ];
        worksheet2.columns = [
          { key: "no" },
          { key: "nama" },
          { key: "keperluan" },
          { key: "tanggal" },
          { key: "media" },
          { key: "keterangan" },
          { key: "keterangan_konsultasi" },
        ];

        // Add row using key mapping to columns
        let row = worksheet2.addRow({
          no: `${idx + 1}`,
          nama: d.user ? d.user.nama : "-",
          keperluan: d ? d.keperluan : "-",
          tanggal: d ? d.tanggal_konsultasi : "-",
          media: d ? d.media_konsultasi : "-",
          keterangan: d ? d.keterangan : "-",
          keterangan_konsultasi: d.jadwal ? d.jadwal.keterangan : "-",
        });
      })
    );
    worksheet2.getColumn("A").width = 6;
    worksheet2.getColumn("B").width = 20;
    worksheet2.getColumn("C").width = 23;
    worksheet2.getColumn("D").width = 11;
    worksheet2.getColumn("E").width = 16;
    worksheet2.getColumn("F").width = 20;
    worksheet2.getColumn("H").width = 26;

    let namaFile = `/uploads/rekapan-konsultasi-siswa-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async getKalender({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let { search, tanggal } = request.get();

    const checkLabel = await MLabelKalender.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .first();

    if (!checkLabel) {
      await MLabelKalender.create({
        nama: "Kegiatan",
        warna: "#2680EB",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });

      await MLabelKalender.create({
        nama: "Libur Nasional",
        warna: "#7986CB",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
      await MLabelKalender.create({
        nama: "Ujian",
        warna: "#FC544B",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
      await MLabelKalender.create({
        nama: "Libur Semester",
        warna: "#FFC107",
        m_sekolah_id: sekolah.id,
        dihapus: 0,
      });
    }
    let kegiatan;
    let pendidikan;

    const label = await MLabelKalender.query()
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    kegiatan = MKegiatanKalender.query()
      .with("label", (builder) => {
        builder.select("id", "warna");
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .whereBetween("tanggal_mulai", [`${tanggal + -1}`, `${tanggal + -31}`]);
    if (search) {
      kegiatan.andWhere("nama", "like", `%${search}%`);
    }
    kegiatan = await kegiatan.fetch();

    pendidikan = MKalenderPendidikan.query()
      .with("label", (builder) => {
        builder.select("id", "warna");
      })
      .where({ dihapus: 0 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .whereBetween("tanggal_awal", [`${tanggal + -1}`, `${tanggal + -31}`]);

    if (search) {
      kegiatan.andWhere("nama", "like", `%${search}%`);
    }

    pendidikan = await pendidikan.fetch();

    return response.ok({
      label,
      kegiatan,
      pendidikan,
    });
  }

  async detailKalenderPendidikan({
    response,
    request,
    params: { pendidikan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const kalender = await MKalenderPendidikan.query()
      .with("label")
      .where({ id: pendidikan_id })
      .first();

    return response.ok({
      kalender: kalender,
    });
  }

  async detailKalenderKegiatan({ response, request, params: { kegiatan_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const kalender = await MKegiatanKalender.query()
      .with("label")
      .where({ id: kegiatan_id })
      .first();

    return response.ok({
      kalender: kalender,
    });
  }

  async postLabelKalender({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let { nama, warna } = request.post();

    const rules = {
      nama: "required",
      warna: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "warna.required": "Warna harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const kalender = await MLabelKalender.create({
      nama,
      warna,
      dihapus: 0,
      m_sekolah_id: sekolah.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putLabelKalender({ response, request, auth, params: { label_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let { nama, warna } = request.post();

    const rules = {
      nama: "required",
      warna: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "warna.required": "Warna harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const label = await MLabelKalender.query().where({ id: label_id }).update({
      nama,
      warna,
    });

    if (!label) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteLabelKalender({ response, request, auth, params: { label_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const label = await MLabelKalender.query().where({ id: label_id }).update({
      dihapus: 1,
    });

    if (!label) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postKalenderPendidikan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let { nama, m_label_kalender_id, tanggal_awal, tanggal_akhir } =
      request.post();

    const rules = {
      nama: "required",
      m_label_kalender_id: "required",
      tanggal_awal: "required",
      tanggal_akhir: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "m_label_kalender_id.required": "Label harus dipilih",
      "tanggal_awal.required": "Tanggal Awal harus diisi",
      "tanggal_akhir.required": "Tanggal Akhir harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const kalender = await MKalenderPendidikan.create({
      nama,
      m_label_kalender_id,
      tanggal_awal,
      tanggal_akhir,
      dihapus: 0,
      m_sekolah_id: sekolah.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putKalenderPendidikan({
    response,
    request,
    auth,
    params: { kalender_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let { nama, m_label_kalender_id, tanggal_awal, tanggal_akhir } =
      request.post();

    const rules = {
      nama: "required",
      m_label_kalender_id: "required",
      tanggal_awal: "required",
      tanggal_akhir: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "m_label_kalender_id.required": "Label harus dipilih",
      "tanggal_awal.required": "Tanggal Awal harus diisi",
      "tanggal_akhir.required": "Tanggal Akhir harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const kalender = await MKalenderPendidikan.query()
      .where({ id: kalender_id })
      .update({
        nama,
        m_label_kalender_id,
        tanggal_awal,
        tanggal_akhir,
      });

    if (!kalender) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteKalenderPendidikan({
    response,
    request,
    auth,
    params: { kalender_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const kalender = await MKalenderPendidikan.query()
      .where({ id: kalender_id })
      .update({
        dihapus: 1,
      });

    if (!kalender) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postKegiatanKalender({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let {
      nama,
      tanggal_mulai,
      tanggal_akhir,
      waktu_mulai,
      waktu_akhir,
      media,
      isi_media,
      deskripsi,
      buku_tamu,
    } = request.post();

    const rules = {
      nama: "required",
      tanggal_mulai: "required",
      tanggal_akhir: "required",
      buku_tamu: "required",
      waktu_mulai: "required",
      waktu_akhir: "required",
      media: "required",
      deskripsi: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "label.required": "Label harus dipilih",
      "deskripsi.required": "Deskripsi harus dipilih",
      "tanggal_mulai.required": "Tanggal Mulai harus diisi",
      "tanggal_akhir.required": "Tanggal Akhir harus diisi",
      "waktu_mulai.required": "Waktu Mulai harus diisi",
      "waktu_akhir.required": "Waktu Akhir harus diisi",
      "media.required": "Media Kegiatan harus dipilih",
      "buku_tamu.required": "Buku Tamu harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const label = await MLabelKalender.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ nama: "Kegiatan" })
      .first();

    const kalender = await MKegiatanKalender.create({
      nama,
      tanggal_mulai,
      tanggal_akhir,
      waktu_mulai,
      waktu_akhir,
      media,
      isi_media,
      deskripsi,
      buku_tamu,
      m_label_kalender_id: label.id,
      dihapus: 0,
      m_sekolah_id: sekolah.id,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putKegiatanKalender({
    response,
    request,
    auth,
    params: { kegiatan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let {
      nama,
      tanggal_mulai,
      tanggal_akhir,
      waktu_mulai,
      waktu_akhir,
      media,
      isi_media,
      deskripsi,
      buku_tamu,
    } = request.post();

    const rules = {
      nama: "required",
      tanggal_mulai: "required",
      tanggal_akhir: "required",
      buku_tamu: "required",
      waktu_mulai: "required",
      waktu_akhir: "required",
      media: "required",
      deskripsi: "required",
    };
    const message = {
      "nama.required": "Nama harus diisi",
      "label.required": "Label harus dipilih",
      "deskripsi.required": "Deskripsi harus dipilih",
      "tanggal_mulai.required": "Tanggal Mulai harus diisi",
      "tanggal_akhir.required": "Tanggal Akhir harus diisi",
      "waktu_mulai.required": "Waktu Mulai harus diisi",
      "waktu_akhir.required": "Waktu Akhir harus diisi",
      "media.required": "Media Kegiatan harus dipilih",
      "buku_tamu.required": "Buku Tamu harus dipilih",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const kalender = await MKegiatanKalender.query()
      .where({ id: kegiatan_id })
      .update({
        nama,
        tanggal_mulai,
        tanggal_akhir,
        waktu_mulai,
        waktu_akhir,
        media,
        deskripsi,
        isi_media,
        buku_tamu,
      });

    if (!kalender) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteKegiatanKalender({
    response,
    request,
    auth,
    params: { kegiatan_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    // if ((user.role != "admin" || user.role  == 'kurikulum') || user.m_sekolah_id != sekolah.id) {
    //   return response.forbidden({ message: messageForbidden });
    // }

    const kalender = await MKegiatanKalender.query()
      .where({ id: kegiatan_id })
      .update({
        dihapus: 1,
      });

    if (!kalender) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async getCekNomorWhatsapp({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let { search, page } = request.get();

    page = page ? parseInt(page) : 1;
    let user;

    if (search) {
      user = await User.query()
        .with("anggotaRombel", (builder) => {
          builder
            .select("m_user_id", "m_rombel_id", "dihapus")
            .with("rombel", (builder) => {
              builder.select("id", "nama").where({ dihapus: 0 });
            })
            .where({ dihapus: 0 });
        })
        .select("nama", "id", "whatsapp", "avatar", "gender", "role")
        .where({ m_sekolah_id: sekolah.id })
        .whereIn("role", ["guru", "siswa"])
        .andWhere({ dihapus: 0 })
        .andWhere("nama", "like", `%${search}%`)
        .paginate(page, 10);
    } else {
      user;
    }

    return response.ok({
      user: user,
    });
  }

  async detailCekNomorWhatsapp({
    response,
    request,
    auth,
    params: { user_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await User.query()
      .select("id", "nama", "whatsapp", "email")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ id: user_id })
      .first();

    let email1;
    let email;
    let emailTutup;
    let belakangEmail;

    if (user.email != null) {
      email1 = user.email.split("@", 1)[0];
      email = email1.slice(-2);
      emailTutup = email1.length - 2;
      belakangEmail = user.email.split("@")[1];
    }
    const nomor = user.whatsapp.slice(-4);
    const nomorTutup = user.whatsapp.length - 4;
    const nama = user.nama;

    return response.ok({
      nomor,
      nomorTutup,
      nama,
      email,
      emailTutup,
      belakangEmail,
    });
  }

  async postEmailCekNomorWhatsapp({
    response,
    request,
    auth,
    params: { user_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let { email } = request.post();

    const rules = {
      email: "required",
    };
    const message = {
      "email.required": "Email harus diisi",
    };
    const validation = await validate(request.all(), rules, message);
    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const user = await User.query()
      .select("id", "nama", "whatsapp", "email")
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ id: user_id })
      .first();

    if (user.email == email) {
      try {
        const gmail = Mail.send(`emails.lupapw`, user.toJSON(), (message) => {
          message
            .to(`${email}`)
            .from("raihanvans@gmail.com")
            .subject("Lupa Password");
        });
        if (gmail) {
          return response.ok({
            message: messageEmailSuccess,
          });
        }
      } catch (error) {
        // console.log(error);
      }
    } else {
      return "Email tidak sesuai";
    }

    // return response.ok({
    //   message: messagePostSuccess,
    // });
  }

  async postUserBaru({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      gender,
      nama,
      whatsapp,
      email,
      rombel_id,
      mapel_id,
      password,
      avatar,
      role,
    } = request.post();

    let validation = await validate(
      request.post(),
      rulesUserPost,
      messagesUser
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const check = await User.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ whatsapp: whatsapp })
      .first();
    if (!check) {
      const user = await User.create({
        nama,
        whatsapp,
        gender,
        password: password,
        role,
        m_sekolah_id: sekolah.id,
        dihapus: 0,
        avatar,
      });

      if (role == "siswa") {
        await MAnggotaRombel.create({
          role: "anggota",
          dihapus: 0,
          m_user_id: user.id,
          m_rombel_id: rombel_id,
        });
      }
    } else {
      const guru = await User.query()
        .where({ id: check.toJSON().id })
        .update({ dihapus: 0 });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async postUserCDC({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const {
      nama,
      whatsapp,
      password,
      jurusan,
      tahun_lulus,
      nama_perusahaan,
      posisi,
      tanggal_mulai,
      alamar,
      province_id,
      regency_id,
      kode_pos,
      nama_perguruan_tinggi,
      program_pendidikan,
      fakultas,
      prodi,
      gender,
      email,
      rombel_id,
      mapel_id,
      avatar,
      role,
    } = request.post();

    let validation = await validate(
      request.post(),
      rulesUserPost,
      messagesUser
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const check = await User.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ whatsapp: whatsapp })
      .first();
    if (!check) {
      const user = await User.create({
        nama,
        whatsapp,
        gender,
        password: password,
        role,
        m_sekolah_id: sekolah.id,
        dihapus: 0,
        avatar,
      });

      if (role == "siswa") {
        await MAnggotaRombel.create({
          role: "anggota",
          dihapus: 0,
          m_user_id: user.id,
          m_rombel_id: rombel_id,
        });
      }
    } else {
      const guru = await User.query()
        .where({ id: check.toJSON().id })
        .update({ dihapus: 0 });
    }

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async detailSekolah({ response, request, auth, params: { sekolah_id } }) {
    const domain = request.headers().origin;

    const ta = await Mta.query()
      .where({ m_sekolah_id: sekolah_id })
      .andWhere({ dihapus: 0 })
      .andWhere({ aktif: 1 })
      .first();

    const user = await auth.getUser();
    // const { rombel_id } = request.post();
    const sekolah = await MSekolah.query()
      .with("informasi")
      .with("jurusan", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .with("rombel", (builder) => {
        builder
          .where({ dihapus: 0 })
          .andWhere({ kelompok: "ekskul" })
          .andWhere({ m_ta_id: ta.id });
      })
      .where({ id: sekolah_id })
      .first();

    const prestasi = await MPrestasi.query()
      .with("tingkatPrestasi", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ m_sekolah_id: sekolah_id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const tingkat = await MPenghargaan.query()
      .withCount("prestasi as tingkatnya", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ m_sekolah_id: sekolah_id })
      .fetch();

    return response.ok({
      sekolah,
      prestasi,
      tingkat,
    });
  }

  async importLunasPembayaranServices(filelocation, sekolah, pembayaran) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("sheet1");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber > 7) {
        data.push({
          nama: explanation.getCell("B" + rowNumber).value,
          whatsapp: explanation.getCell("C" + rowNumber).value,
          nominal: explanation.getCell("D" + rowNumber).value,
        });
      }
    });

    const rekSekolah = await MRekSekolah.query()
      .where({ m_sekolah_id: sekolah.id })
      .first();

    let jumlahLunas = 0;

    const result = await Promise.all(
      data.map(async (d) => {
        // return d.nominal;
        if (d.nominal > 0) {
          const user = await User.query()
            .select("id", "nama", "whatsapp")
            .with("anggotaRombel", (builder) => {
              builder.where({ dihapus: 0 });
            })
            .where({ whatsapp: d.whatsapp })
            .andWhere({ m_sekolah_id: sekolah.id })
            .andWhere({ dihapus: 0 })
            .first();

          const pembayaranRombel = await TkPembayaranRombel.query()
            .where({ m_pembayaran_id: pembayaran.id })
            .andWhere({ dihapus: 0 })
            .andWhere({ m_sekolah_id: sekolah.id })
            .andWhere({ m_rombel_id: user.toJSON().anggotaRombel.m_rombel_id })
            .with("siswa")
            .first();

          const checkPembayaranSiswa = await MPembayaranSiswa.query()
            .where({ m_user_id: user.id })
            .andWhere({ m_sekolah_id: sekolah.id })
            .andWhere({ tk_pembayaran_rombel_id: pembayaranRombel.id })
            .first();

          // return checkPembayaranSiswa;

          if (checkPembayaranSiswa.status == "belum lunas") {
            const pembayaranSiswa = await MPembayaranSiswa.query()
              .where({ m_user_id: user.id })
              .andWhere({ m_sekolah_id: sekolah.id })
              .andWhere({ tk_pembayaran_rombel_id: pembayaranRombel.id })
              .with("riwayat")
              .with("user", (builder) => {
                builder.select("id", "nama");
              })
              .with("rombelPembayaran", (builder) => {
                builder.with("pembayaran");
              })
              .first();

            await MRiwayatPembayaranSiswa.create({
              bank: rekSekolah ? rekSekolah.bank : "",
              norek: rekSekolah ? rekSekolah.norek : "",
              nama_pemilik: rekSekolah ? rekSekolah.nama : "",
              nominal: d.nominal,
              dikonfirmasi: 1,
              dihapus: 0,
              m_pembayaran_siswa_id: pembayaranSiswa.id,
            });

            const mutasi = await MMutasi.create({
              tipe: "kredit",
              nama: `Pembayaran ${pembayaran.nama} ${
                pembayaran.jenis == "spp" ? pembayaran.bulan : ""
              }-${user.nama}`,
              kategori: `pembayaran ${pembayaran.jenis}`,
              nominal: d.nominal,
              dihapus: 0,
              m_sekolah_id: sekolah.id,
              waktu_dibuat: pembayaranSiswa.updated_at,
            });

            const totalDibayar =
              pembayaranSiswa
                .toJSON()
                .riwayat.reduce((a, b) => a + b.nominal, 0) + d.nominal;
            const totalTagihan =
              pembayaranSiswa.toJSON().rombelPembayaran?.pembayaran?.nominal;
            if (totalDibayar < totalTagihan) {
              await MPembayaranSiswa.query()
                .where({ id: pembayaranSiswa.id })
                .update({
                  status: "belum lunas",
                });
            } else {
              if (
                !pembayaranSiswa
                  .toJSON()
                  .riwayat.some((item) => !item.dikonfirmasi)
              ) {
                await MPembayaranSiswa.query()
                  .where({ id: pembayaranSiswa.id })
                  .update({
                    status: "lunas",
                  });
              }
            }
            return d.nominal;
          }
          return;
        }
      })
    );

    if (rekSekolah) {
      await MRekSekolah.query()
        .where({ m_sekolah_id: sekolah.id })
        .update({
          pemasukan:
            rekSekolah.pemasukan +
            result.filter((item) => item).reduce((a, b) => a + b, 0),
        });
    }

    return result;
  }

  async importLunasPembayaran({
    request,
    response,
    auth,
    params: { pembayaran_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    const pembayaran = await MPembayaran.query()
      .where({ id: pembayaran_id })
      .first();

    return await this.importLunasPembayaranServices(
      `tmp/uploads/${fname}`,
      sekolah,
      pembayaran
    );
  }

  async downloadLunasPembayaran({
    response,
    request,
    auth,
    params: { tk_pembayaran_rombel_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const pembayaran = await TkPembayaranRombel.query()
      // .with("rombel",(builder)=>{
      //   builder.with("anggotaRombel",(builder)=>{
      //     builder.with("user",(builder)=>{
      //       builder.select("id","whatsapp","nama")
      //     })
      //   })
      // })
      .with("siswa", (builder) => {
        builder.with("user", (builder) => {
          builder.select("id", "whatsapp", "nama");
        });
      })
      .where({ dihapus: 0 })
      .andWhere({ id: tk_pembayaran_rombel_id })
      .first();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`sheet1`);
    worksheet.mergeCells("A1:D1");
    worksheet.mergeCells("A2:D2");
    worksheet.getCell("A4").value = `note : Isi nominal dengan angka`;
    worksheet.getCell(
      "A6"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.addConditionalFormatting({
      ref: "A1:K2",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });
    worksheet.addConditionalFormatting({
      ref: "A7:D7",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });
    worksheet.getCell("A1").value = "Import Pembayaran";
    worksheet.getCell("A2").value = sekolah.nama;
    await Promise.all(
      pembayaran
        .toJSON()
        .siswa.sort((a, b) => ("" + a.user.nama).localeCompare(b.user.nama))
        .map(async (d, idx) => {
          worksheet.addConditionalFormatting({
            ref: `B${(idx + 1) * 1 + 7}:D${(idx + 1) * 1 + 7}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "left",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          worksheet.addConditionalFormatting({
            ref: `A${(idx + 1) * 1 + 7}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "center",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          // add column headers
          worksheet.getRow(7).values = ["No", "Nama", "Whatsapp", "Nominal"];
          worksheet.columns = [
            { key: "no" },
            { key: "nama" },
            { key: "whatsapp" },
            { key: "nominal" },
          ];

          // Add row using key mapping to columns
          let row = worksheet.addRow({
            no: `${idx + 1}`,
            nama: d.user ? d.user.nama : "-",
            whatsapp: d.user ? d.user.whatsapp : "-",
            nominal: 0,
          });
        })
    );

    worksheet.getColumn("A").width = 6;
    worksheet.getColumn("B").width = 30;
    worksheet.getColumn("C").width = 20;
    worksheet.getColumn("D").width = 13;

    let namaFile = `/uploads/import-Pembayaran-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async getSuperAdmin({ response, request, auth }) {
    const user = await User.query().count("* as total");
    // const { rombel_id } = request.post();
    const sekolah = await MSekolah.query().count("* as total");

    return response.ok({
      sekolah,
      prestasi,
      tingkat,
    });
  }

  async getSuperAdminSekolah({ response, request, auth }) {
    let { search, page } = request.get();
    const user = await User.query().count("* as total");
    // const { rombel_id } = request.post();
    let sekolah;

    sekolah = MSekolah.query().withCount("siswa as total", (builder) => {
      builder.where({ dihapus: 0 });
    });

    if (search) {
      sekolah.where("nama", "like", `%${search}%`);
    }

    sekolah = await sekolah.paginate(page, 10);

    return response.ok({
      sekolah,
    });
  }

  async detailSuperAdminSekolah({
    response,
    request,
    auth,
    params: { sekolah_id },
  }) {
    let sekolah = await MSekolah.query()
      .withCount("siswa as total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ id: sekolah_id })
      .first();

    let { search, page } = request.get();

    let pembayaran = MPembayaranSekolah.query()
      .where({ m_sekolah_id: sekolah_id })
      .andWhere({ dihapus: 0 });

    if (search) {
      pembayaran.andWhere("nama", "like", `%${search}%`);
    }

    pembayaran = await pembayaran.fetch();

    return response.ok({
      sekolah,
      pembayaran,
    });
  }

  async postSekolah({ response, request, auth }) {
    const { nama, domain, server } = request.post();

    let validation = await validate(
      request.post(),
      rulesUserPost,
      messagesUser
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const sekolah = await MSekolah.create({
      nama,
      domain,
      gender,
      password: password,
      role,
      m_sekolah_id: sekolah.id,
      dihapus: 0,
      avatar,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putSekolah({ response, request, auth, params: { sekolah_id } }) {
    const { nama, domain, server, alamat } = request.post();

    // let validation = await validate(
    //   request.post(),
    //   rulesUserPost,
    //   messagesUser
    // );

    // if (validation.fails()) {
    //   return response.unprocessableEntity(validation.messages());
    // }

    const sekolah = await MSekolah.query().where({ id: sekolah_id }).update({
      nama,
      domain,
      server,
      alamat,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async detailPembayaranSekolah({
    response,
    request,
    auth,
    params: { pembayaran_id },
  }) {
    const user = await User.query().count("* as total");
    // const { rombel_id } = request.post();
    let pembayaran = MPembayaranSekolah.query()
      .with("sekolah")
      .with("dokumen", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ id: pembayaran_id })
      .first();

    return response.ok({
      pembayaran,
    });
  }

  async postPembayaranSekolah({
    response,
    request,
    auth,
    params: { sekolah_id },
  }) {
    const { nama, tanggal, jumlah, mulai_kontrak, akhir_kontrak } =
      request.post();

    let validation = await validate(
      request.post(),
      rulesUserPost,
      messagesUser
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const sekolah = await MPembayaranSekolah.create({
      nama,
      tanggal,
      jumlah,
      mulai_kontrak,
      akhir_kontrak,
      m_sekolah_id: sekolah_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putPembayaranSekolah({
    response,
    request,
    auth,
    params: { pembayaranSekolah_id },
  }) {
    const { nama, tanggal, jumlah, mulai_kontrak, akhir_kontrak } =
      request.post();

    let validation = await validate(
      request.post(),
      rulesUserPost,
      messagesUser
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const sekolah = await MPembayaranSekolah.query()
      .where({ id: pembayaranSekolah_id })
      .update({
        nama,
        tanggal,
        jumlah,
        mulai_kontrak,
        akhir_kontrak,
      });

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async postDokumenPembayaranSekolah({
    response,
    request,
    auth,
    params: { pembayaranSekolah_id },
  }) {
    const { nama, jenis, lampiran } = request.post();

    let validation = await validate(
      request.post(),
      rulesUserPost,
      messagesUser
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const sekolah = await MDokumenPembayaranSekolah.create({
      nama,
      jenis,
      lampiran,
      m_pembayaran_sekolah_id: pembayaranSekolah_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putDokumenPembayaranSekolah({
    response,
    request,
    auth,
    params: { dokumenPembayaranSekolah_id },
  }) {
    const { nama, jenis, lampiran } = request.post();

    let validation = await validate(
      request.post(),
      rulesUserPost,
      messagesUser
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const sekolah = await MDokumenPembayaranSekolah.query()
      .where({ id: dokumenPembayaranSekolah_id })
      .update({
        nama,
        jenis,
        lampiran,
      });

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteDokumenPembayaranSekolah({
    response,
    request,
    auth,
    params: { dokumenPembayaranSekolah_id },
  }) {
    const sekolah = await MDokumenPembayaranSekolah.query()
      .where({ id: dokumenPembayaranSekolah_id })
      .update({
        dihapu: 1,
      });

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postServer({ response, request, auth }) {
    const { nama, ip, tagihan } = request.post();

    let validation = await validate(
      request.post(),
      rulesUserPost,
      messagesUser
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const server = await MServer.create({
      nama,
      ip,
      tagihan,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async putServer({ response, request, auth, params: { server_id } }) {
    const { nama, ip, tagihan } = request.post();

    let validation = await validate(
      request.post(),
      rulesUserPost,
      messagesUser
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const server = await MServer.query().where({ id: server_id }).update({
      nama,
      ip,
      tagihan,
    });

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async deleteServer({ response, request, auth, params: { server_id } }) {
    const server = await MServer.query().where({ id: server_id }).update({
      dihapu: 1,
    });

    return response.ok({
      message: messageDeleteSuccess,
    });
  }

  async postSekolahServer({ response, request, auth, params: { server_id } }) {
    const { sekolah_id } = request.post();

    let validation = await validate(
      request.post(),
      rulesUserPost,
      messagesUser
    );

    if (validation.fails()) {
      return response.unprocessableEntity(validation.messages());
    }

    const server = await TkServerSekolah.create({
      m_server_id: server_id,
      m_sekolah_id: sekolah_id,
      dihapus: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async downloadLapTunggakan({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const rombel = await MRombel.query()
      .with("user", (builder) => {
        builder.select("id", "nama");
      })
      .withCount("anggotaRombel as total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Laporan Tunggakan`);
    worksheet.mergeCells("A1:H1");
    worksheet.mergeCells("A2:H2");
    worksheet.mergeCells("A3:H3");
    worksheet.mergeCells("A4:H4");
    worksheet.mergeCells("A5:H5");
    worksheet.mergeCells("A6:H6");

    worksheet.getCell(
      "A6"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.addConditionalFormatting({
      ref: "A1:H3",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });

    // worksheet.getRow(4).height = 5;
    // worksheet.getRow(5).height = 2;
    worksheet.getCell("A4").border = {
      bottom: { style: "double" },
    };

    worksheet.getCell("A5").border = {
      bottom: { style: "thick" },
      top: { style: "double" },
    };

    worksheet.getCell("A1").value = "REKAPITULASI KEUANGAN SISWA";
    worksheet.getCell("A2").value = sekolah.nama.toUpperCase();
    worksheet.getCell("A3").value = `TAHUN PELAJARAN ${ta.tahun}`;

    await Promise.all(
      rombel.toJSON().map(async (d, idx) => {
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 8}:H${(idx + 1) * 1 + 8}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 8}:C${(idx + 1) * 1 + 8}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        // add column headers
        worksheet.getRow(7).values = [
          "No",
          "Kelas",
          "Wali Kelas",
          "Jumlah Siswa",
          `Tahun Pelajaran ${ta.tahun}`,
        ];
        worksheet.getRow(8).values = [
          "",
          "",
          "",
          "",
          "Potongan",
          "Komite Diterima",
          "% Masuk",
          "Tunggakan",
        ];
        worksheet.columns = [
          { key: "no" },
          { key: "kelas" },
          { key: "walas" },
          { key: "siswa" },
          { key: "potongan" },
          { key: "komite" },
          { key: "masuk" },
          { key: "tunggakan" },
        ];

        // Add row using key mapping to columns
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          kelas: d ? d.nama : "-",
          walas: d.user ? d.user.nama : "-",
          siswa: d ? d.__meta__.total : "-",
          potongan: d ? d.tingkat : "-",
          komite: d ? d.tingkat : "-",
          masuk: d ? d.tingkat : "-",
          tunggakan: d ? d.tingkat : "-",
        });

        if (idx == rombel.toJSON().length - 1) {
          worksheet.addConditionalFormatting({
            ref: `B${(idx + 1) * 1 + 10}:H${(idx + 1) * 1 + 14}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                  alignment: { wrapText: true },
                },
              },
            ],
          });

          worksheet.mergeCells(`B${(idx + 1) * 1 + 10}:C${(idx + 1) * 1 + 10}`);
          worksheet.mergeCells(`B${(idx + 1) * 1 + 11}:C${(idx + 1) * 1 + 11}`);
          worksheet.mergeCells(`B${(idx + 1) * 1 + 12}:C${(idx + 1) * 1 + 12}`);
          worksheet.mergeCells(`B${(idx + 1) * 1 + 13}:C${(idx + 1) * 1 + 13}`);
          // worksheet.mergeCells(`B${(idx + 1) * 1 + 14}:C${(idx + 1) * 1 + 14}`);
          worksheet.mergeCells(`D${(idx + 1) * 1 + 13}:D${(idx + 1) * 1 + 14}`);
          worksheet.mergeCells(`E${(idx + 1) * 1 + 13}:E${(idx + 1) * 1 + 14}`);
          worksheet.mergeCells(`F${(idx + 1) * 1 + 13}:F${(idx + 1) * 1 + 14}`);
          worksheet.mergeCells(`G${(idx + 1) * 1 + 13}:G${(idx + 1) * 1 + 14}`);
          worksheet.mergeCells(`H${(idx + 1) * 1 + 13}:H${(idx + 1) * 1 + 14}`);

          worksheet.getCell(`B${(idx + 1) * 1 + 13}`).value = `${sekolah.nama}`;
          worksheet.getCell(`B${(idx + 1) * 1 + 14}`).value = `update :`;
          worksheet.getCell(
            `C${(idx + 1) * 1 + 14}`
          ).value = `${moment().format("DD-MMM-YYYY")}`;
          worksheet.getCell(`B${(idx + 1) * 1 + 17}`).value = `Catatan`;
          worksheet.getCell(
            `B${(idx + 1) * 1 + 18}`
          ).value = `Biaya Pendidikan`;
          worksheet.getCell(`B${(idx + 1) * 1 + 20}`).value = `Mengetahui,`;
          worksheet.getCell(`B${(idx + 1) * 1 + 21}`).value = `Kepala Sekolah`;
          worksheet.getCell(
            `B${(idx + 1) * 1 + 25}`
          ).value = `${ta.nama_kepsek}`;
          worksheet.getCell(`B${(idx + 1) * 1 + 20}`).value = `${
            sekolah.kabupaten
          }, ${moment().format("DD-MMM-YYYY")}`;
          worksheet.getCell(
            `B${(idx + 1) * 1 + 21}`
          ).value = `Bendahara Sekolah`;
          worksheet.getCell(
            `B${(idx + 1) * 1 + 25}`
          ).value = `{nama bendahara}`;
          worksheet.getCell(
            `B${(idx + 1) * 1 + 17}:B${(idx + 1) * 1 + 21}`
          ).border = {
            left: { style: "thin" },
          };
          worksheet.getCell(
            `D${(idx + 1) * 1 + 17}:D${(idx + 1) * 1 + 21}`
          ).border = {
            right: { style: "thin" },
          };
          worksheet.getCell(
            `B${(idx + 1) * 1 + 17}:D${(idx + 1) * 1 + 17}`
          ).border = {
            top: { style: "thin" },
          };
          worksheet.getCell(
            `B${(idx + 1) * 1 + 21}:D${(idx + 1) * 1 + 21}`
          ).border = {
            bottom: { style: "thin" },
          };
        }
      })
    );

    worksheet.getColumn("A").width = 4;
    worksheet.getColumn("B").width = 12;
    worksheet.getColumn("C").width = 30;
    worksheet.getColumn("D").width = 11;
    worksheet.getColumn("E").width = 14;
    worksheet.getColumn("F").width = 15;
    worksheet.getColumn("G").width = 8;
    worksheet.getColumn("H").width = 16;
    worksheet.getRow(4).height = 4.5;
    worksheet.getRow(5).height = 2.5;
    worksheet.getRow(8).height = 38.5;
    worksheet.mergeCells("A7:A8");
    worksheet.mergeCells("B7:B8");
    worksheet.mergeCells("C7:C8");
    worksheet.mergeCells("D7:D8");
    worksheet.mergeCells("E7:H7");

    worksheet.addConditionalFormatting({
      ref: `A7:H8`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 13,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
              wrapText: true,
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
          },
        },
      ],
    });
    worksheet.views = [{ showGridLines: false, style: "pageBreakPreview" }];

    let namaFile = `/uploads/REKAPITULASI-KEUANGAN-SISWA-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async downloadLapKehadiran({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const guru = await User.query()
      .withCount("absen as juli", (builder) => {
        builder
          .where({ absen: "hadir" })
          .whereBetween("waktu_masuk", [
            `2021-07-1 00:00:00`,
            `2021-07-31 23:59:59`,
          ]);
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ role: "guru" })
      .fetch();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Laporan Kehadiran Guru`);
    worksheet.mergeCells("A1:O1");
    worksheet.mergeCells("A2:O2");
    worksheet.mergeCells("A3:O3");
    worksheet.mergeCells("A4:O4");

    worksheet.getCell(
      "A5"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;

    worksheet.addConditionalFormatting({
      ref: "A1:O3",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });

    // worksheet.getRow(4).height = 5;
    // worksheet.getRow(5).height = 2;f

    worksheet.getCell("A1").value = "REKAP ABSENSI KEHADIRAN GURU";
    worksheet.getCell("A2").value = sekolah.nama.toUpperCase();
    worksheet.getCell("A3").value = `TAHUN PELAJARAN ${ta.tahun}`;

    await Promise.all(
      guru.toJSON().map(async (d, idx) => {
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 9}:O${(idx + 1) * 1 + 9}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `C${(idx + 1) * 1 + 9}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        // add column headers
        worksheet.getRow(7).values = [
          "No",
          "Code Guru",
          "Nama Guru",
          "Persentase Kehadiran",
        ];
        worksheet.getRow(8).values = ["", "", "", "", "", "", ""];
        worksheet.getRow(9).values = ["", "", "", "", "", "", ""];
        worksheet.columns = [{ key: "no" }, { key: "code" }, { key: "nama" }];

        // Add row using key mapping to columns
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          code: d ? d.id : "-",
          nama: d ? d.nama : "-",
        });

        if (idx == guru.toJSON().length - 1) {
          worksheet.getCell(`C${(idx + 1) * 1 + 11}`).value = `Mengetahui,`;
          worksheet.getCell(`C${(idx + 1) * 1 + 12}`).value = `Kepala Sekolah`;
          worksheet.getCell(
            `C${(idx + 1) * 1 + 15}`
          ).value = `${ta.nama_kepsek}`;

          worksheet.getCell(`C${(idx + 1) * 1 + 11}`).value = `${
            sekolah.kabupaten
          }, ${moment().format("DD-MMM-YYYY")}`;
          worksheet.getCell(`L${(idx + 1) * 1 + 12}`).value = `Waka. Kurikulum`;
          worksheet.getCell(
            `L${(idx + 1) * 1 + 15}`
          ).value = `{nama bendahara}`;
        }
      })
    );

    worksheet.getColumn("A").width = 5;
    worksheet.getColumn("B").width = 10;
    worksheet.getColumn("C").width = 25;
    worksheet.mergeCells("A7:A9");
    worksheet.mergeCells("B7:B9");
    worksheet.mergeCells("C7:C9");
    worksheet.mergeCells("D7:07");

    worksheet.addConditionalFormatting({
      ref: `A7:O9`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 13,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
              wrapText: true,
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
          },
        },
      ],
    });
    worksheet.views = [{ showGridLines: false, style: "pageBreakPreview" }];

    let namaFile = `/uploads/REKAP-KEHADIRAN-GURU-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async downloadLapInventaris({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const barang = await MBarang.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Laporan Inventasris`);

    worksheet.mergeCells("A1:J1");
    worksheet.mergeCells("A2:J2");
    worksheet.mergeCells("A3:J3");

    worksheet.getCell(
      "A4"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;

    worksheet.addConditionalFormatting({
      ref: "A1:K3",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
          },
        },
      ],
    });

    worksheet.getCell("A1").value = "DAFTAR INVETARIS BARANG";
    worksheet.getCell("A2").value = sekolah.nama.toUpperCase();
    worksheet.getCell("A3").value = `TAHUN PELAJARAN ${ta.tahun}`;

    await Promise.all(
      barang.toJSON().map(async (d, idx) => {
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 6}:Ks${(idx + 1) * 1 + 6}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 6}:C${(idx + 1) * 1 + 6}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        // add column headers
        worksheet.getRow(5).values = [
          "No",
          "Nama Barang",
          "Jumlah Barang",
          "Kondisi",
          "",
          "Stok Awal",
          "Penambahan",
          "",
          "",
          "Keterangan",
        ];

        worksheet.getRow(6).values = [
          "",
          "",
          "",
          "Baik",
          "Rusak",
          "",
          "TW 3",
          "TW 1",
          "TW 2",
        ];

        worksheet.columns = [
          { key: "no" },
          { key: "nama" },
          { key: "jumlah" },
          { key: "baik" },
          { key: "rusak" },
          { key: "awal" },
          { key: "tw3" },
          { key: "tw1" },
          { key: "tw2" },
          { key: "keterangan" },
        ];

        // Add row using key mapping to columns
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          nama: d ? d.nama : "-",
          jumlah: d ? d.jumlah : "-",
          baik: d ? d.baik : "-",
          rusak: d ? d.rusak : "-",
          awal: d ? d.jumlah : "-",
          tw3: "-",
          tw1: "-",
          tw2: "-",
          keterangan: d ? d.kepemilikan : "-",
        });
      })
    );

    worksheet.getColumn("A").width = 4;
    worksheet.getColumn("B").width = 32;
    worksheet.getColumn("C").width = 15;
    worksheet.getColumn("J").width = 16;
    worksheet.mergeCells("A5:A6");
    worksheet.mergeCells("B5:B6");
    worksheet.mergeCells("C5:C6");
    worksheet.mergeCells("D5:E5");
    worksheet.mergeCells("F5:F6");
    worksheet.mergeCells("G5:I5");
    worksheet.mergeCells("J5:J6");

    worksheet.addConditionalFormatting({
      ref: `A5:J6`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 13,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
              wrapText: true,
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
          },
        },
      ],
    });
    worksheet.views = [{ showGridLines: false, style: "pageBreakPreview" }];

    let namaFile = `/uploads/DAFTAR-INVENTARIS-BARANG-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async downloadLapPsg({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const rombel = await MRombel.query()
      .with("user", (builder) => {
        builder.select("id", "nama");
      })
      .withCount("anggotaRombel as total", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .with("anggotaRombel", (builder) => {
        builder
          .with("user", (builder) => {
            builder.select("id", "nama").with("keteranganPkl", (builder) => {
              builder.where({ dihapus: 0 }).andWhere({ m_ta_id: ta.id });
            });
          })
          .where({ dihapus: 0 });
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    // const result = await Promise.all(
    //   rombel.toJSON().map(async (d) => {
    //     const result1 = await Promise.all(
    //       d.anggotaRombel.map(async (e) => {
    //         if (e.user.keteranganPkl1 == null) {
    //           return;
    //         }
    //         return e;
    //       })
    //     );
    //     if(result1){
    //       return result1.length;
    //     }
    //     return;
    //   })
    // );

    // const data = result.filter((d) => d != null);

    // return {rombel, data};

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Laporan PSG`);

    worksheet.mergeCells("A1:J1");
    worksheet.mergeCells("A2:J2");
    worksheet.mergeCells("A3:J3");
    worksheet.mergeCells("A4:J4");

    worksheet.getCell(
      "A4"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.addConditionalFormatting({
      ref: "A1:J3",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
          },
        },
      ],
    });

    worksheet.getCell("A1").value = "REKAP SISWA PKL";
    worksheet.getCell("A2").value = sekolah.nama.toUpperCase();
    worksheet.getCell("A3").value = `TAHUN PELAJARAN ${ta.tahun}`;

    await Promise.all(
      rombel.toJSON().map(async (d, idx) => {
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 6}:J${(idx + 1) * 1 + 6}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 6}:C${(idx + 1) * 1 + 6}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        // add column headers
        worksheet.getRow(5).values = [
          "No",
          "Kelas",
          "Wali Kelas",
          "Jumlah Siswa",
          `Pelaksanaan PKL`,
          ``,
          ``,
          `Persentase`,
          ``,
          ``,
        ];

        worksheet.getRow(6).values = [
          "",
          "",
          "",
          "",
          "Sudah",
          "Sedang",
          "Belum",
          "Sudah",
          "Sedang",
          "Belum",
        ];

        worksheet.columns = [
          { key: "no" },
          { key: "kelas" },
          { key: "walas" },
          { key: "siswa" },
          { key: "sudah" },
          { key: "sedang" },
          { key: "belum" },
          { key: "sudah1" },
          { key: "sedang1" },
          { key: "belum1" },
        ];

        // Add row using key mapping to columns
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          kelas: d ? d.nama : "-",
          walas: d.user ? d.user.nama : "-",
          siswa: d ? d.__meta__.total : "-",
          sudah: d ? d.tingkat : "-",
          sedang: d ? d.tingkat : "-",
          belum: d ? d.tingkat : "-",
          sudah1: d ? d.tingkat : "-",
          sedang1: d ? d.tingkat : "-",
          belum1: d ? d.tingkat : "-",
        });

        if (idx == rombel.toJSON().length - 1) {
          worksheet.addConditionalFormatting({
            ref: `A${(idx + 1) * 1 + 7}:J${(idx + 1) * 1 + 7}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  border: {
                    top: { style: "thick" },
                    left: { style: "thick" },
                    bottom: { style: "thick" },
                    right: { style: "thick" },
                  },
                  alignment: { wrapText: true },
                },
              },
            ],
          });

          worksheet.mergeCells(`B${(idx + 1) * 1 + 7}:C${(idx + 1) * 1 + 7}`);
          worksheet.getCell(`B${(idx + 1) * 1 + 7}`).value = `Total`;
          worksheet.getCell(`D${(idx + 1) * 1 + 7}`).value = `=SUM(D7:D${
            (idx + 1) * 1 + 6
          })`;
          worksheet.getCell(`E${(idx + 1) * 1 + 7}`).value = `=SUM(E7:E${
            (idx + 1) * 1 + 6
          })`;
          worksheet.getCell(`F${(idx + 1) * 1 + 7}`).value = `=SUM(F7:F${
            (idx + 1) * 1 + 6
          })`;
          worksheet.getCell(`G${(idx + 1) * 1 + 7}`).value = `=SUM(G7:G${
            (idx + 1) * 1 + 6
          })`;
          worksheet.getCell(`H${(idx + 1) * 1 + 7}`).value = `=H${
            (idx + 1) * 1 + 7
          }/$H$${(idx + 1) * 1 + 7}`;
          worksheet.getCell(`I${(idx + 1) * 1 + 7}`).value = `=I${
            (idx + 1) * 1 + 7
          }/$I$${(idx + 1) * 1 + 7}`;
          worksheet.getCell(`J${(idx + 1) * 1 + 7}`).value = `=J${
            (idx + 1) * 1 + 7
          }/$J$${(idx + 1) * 1 + 7}`;

          worksheet.mergeCells(`B${(idx + 1) * 1 + 9}:C${(idx + 1) * 1 + 9}`);
          worksheet.mergeCells(`B${(idx + 1) * 1 + 10}:C${(idx + 1) * 1 + 10}`);
          worksheet.mergeCells(`B${(idx + 1) * 1 + 11}:C${(idx + 1) * 1 + 11}`);
          worksheet.getCell(`B${(idx + 1) * 1 + 9}`).value = `Update`;
          worksheet.getCell(
            `B${(idx + 1) * 1 + 10}`
          ).value = `${moment().format("DD-MMM-YYYY")}`;

          worksheet.getCell(
            `B${(idx + 1) * 1 + 9}:C${(idx + 1) * 1 + 9}`
          ).border = {
            left: { style: "thin" },
            top: { style: "thin" },
            right: { style: "thin" },
          };

          worksheet.getCell(
            `B${(idx + 1) * 1 + 10}:C${(idx + 1) * 1 + 10}`
          ).border = {
            right: { style: "thin" },
            left: { style: "thin" },
          };
          worksheet.getCell(
            `B${(idx + 1) * 1 + 10}:C${(idx + 1) * 1 + 10}`
          ).alignment = { vertical: "middle", horizontal: "center" };

          worksheet.getCell(
            `B${(idx + 1) * 1 + 11}:c${(idx + 1) * 1 + 11}`
          ).border = {
            bottom: { style: "thin" },
            right: { style: "thin" },
            left: { style: "thin" },
          };

          worksheet.getCell(`B${(idx + 1) * 1 + 13}`).value = `Mengetahui,`;
          worksheet.getCell(`B${(idx + 1) * 1 + 14}`).value = `Kepala Sekolah`;
          worksheet.getCell(
            `B${(idx + 1) * 1 + 17}`
          ).value = `${ta.nama_kepsek}`;

          worksheet.getCell(`G${(idx + 1) * 1 + 13}`).value = `${
            sekolah.kabupaten
          }, ${moment().format("DD-MMM-YYYY")}`;
          worksheet.getCell(`G${(idx + 1) * 1 + 14}`).value = `Hubin`;
          worksheet.getCell(`G${(idx + 1) * 1 + 17}`).value = `{nama hubin}`;
        }
      })
    );

    worksheet.getColumn("A").width = 4;
    worksheet.getColumn("B").width = 12.5;
    worksheet.getColumn("C").width = 25;
    worksheet.getRow(5).height = 33.5;
    worksheet.mergeCells("A5:A6");
    worksheet.mergeCells("B5:B6");
    worksheet.mergeCells("C5:C6");
    worksheet.mergeCells("D5:D6");
    worksheet.mergeCells("E5:G5");
    worksheet.mergeCells("H5:J5");

    worksheet.addConditionalFormatting({
      ref: `A5:J6`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 13,
              bold: true,
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
              wrapText: true,
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
          },
        },
      ],
    });
    worksheet.views = [{ showGridLines: false, style: "pageBreakPreview" }];

    let namaFile = `/uploads/REKAP-SISWA-PKL-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async hackJadwalUjian({ response, request }) {
    const { offset, limit } = request.post();

    const semuaUser = await User.query()
      .select("id", "nama")
      .with("jadwalUjianSemua", (builder) => {
        builder
          .with("rombelUjian")
          .where({ dihapus: 0 })
          .offset(parseInt(offset))
          .limit(limit);
      })
      .where({ dihapus: 0 })
      // .andWhere({ m_sekolah_id: 33 })
      .andWhere({ role: "guru" })
      // .offset(parseInt(offset))
      // .limit(limit)
      .fetch();

    // return semuaUser;

    const semua = await Promise.all(
      semuaUser.toJSON().map(async (ss) => {
        const a = await Promise.all(
          ss.jadwalUjianSemua.map(async (a) => {
            const b = await Promise.all(
              a.rombelUjian.map(async (b) => {
                const jadwalUjian = await TkJadwalUjian.query()
                  .with("peserta", (builder) => {
                    builder.with("user"),
                      (builder) => {
                        builder.select("id", "nama");
                      };
                  })
                  .with("rombel")
                  .with("jadwalUjian", (builder) => {
                    builder.with("ujian");
                  })
                  .where({ id: b.id })
                  .first();
                const tkJadwalUjian = await TkJadwalUjian.query()
                  .where({ id: b.id })
                  .pluck("m_rombel_id");

                const anggotaRombel = await MAnggotaRombel.query()
                  .where({ m_rombel_id: tkJadwalUjian[0] })
                  .andWhere({ dihapus: 0 })
                  .pluck("m_user_id");

                const pesertaUjianData = await User.query()
                  .whereIn("id", anggotaRombel)
                  .fetch();

                const d = await Promise.all(
                  pesertaUjianData.toJSON().map(async (d) => {
                    const e = await Promise.all(
                      jadwalUjian.toJSON().peserta.map(async (e) => {
                        if (d.id == e.m_user_id) {
                          const pesertaUjian = await TkPesertaUjian.query()
                            .with("jawabanSiswa", (builder) => {
                              builder.with("soal");
                            })
                            .with("user")
                            .where({ id: e.id })
                            .first();

                          let metaHasil = {
                            nilaiPg: 0,
                            nilaiEsai: 0,
                            nilaiTotal: 0,
                            benar: 0,
                          };
                          let analisisBenar = {};
                          let analisisTotal = {};

                          await Promise.all(
                            pesertaUjian
                              .toJSON()
                              .jawabanSiswa.map(async (d) => {
                                if (d.soal.bentuk == "pg") {
                                  if (d.jawaban_pg == d.soal.kj_pg) {
                                    metaHasil.nilaiPg =
                                      metaHasil.nilaiPg + d.soal.nilai_soal;
                                    metaHasil.benar = metaHasil.benar + 1;
                                    analisisBenar[d.soal.kd] = analisisBenar[
                                      d.soal.kd
                                    ]
                                      ? analisisBenar[d.soal.kd] + 1
                                      : 1;
                                  }
                                  analisisTotal[d.soal.kd] = analisisTotal[
                                    d.soal.kd
                                  ]
                                    ? analisisTotal[d.soal.kd] + 1
                                    : 1;
                                } else if (d.soal.bentuk == "esai") {
                                  if (JSON.parse(d.jawaban_rubrik_esai)) {
                                    if (
                                      JSON.parse(d.jawaban_rubrik_esai).length
                                    ) {
                                      JSON.parse(d.jawaban_rubrik_esai).map(
                                        (e) => {
                                          if (e.benar) {
                                            metaHasil.nilaiEsai =
                                              metaHasil.nilaiEsai + e.poin;
                                          }
                                        }
                                      );

                                      if (
                                        d.jawaban_rubrik_esai.indexOf("true") !=
                                        -1
                                      ) {
                                        metaHasil.benar = metaHasil.benar + 1;
                                      }
                                    }
                                  }
                                }
                              })
                          );

                          metaHasil.nilaiTotal =
                            metaHasil.nilaiPg + metaHasil.nilaiEsai;

                          const berhasil = await TkPesertaUjian.query()
                            .where({ id: pesertaUjian.id })
                            .update({
                              nilai: metaHasil.nilaiTotal,
                            });

                          if (berhasil) {
                            return;
                          }
                        }
                      })
                    );
                    return e;
                  })
                );
                return d;
              })
            );
            return b;
          })
        );
        return a;
      })
    );

    return semua;
  }

  async putRekapNilaiAll({
    response,
    request,
    auth,
    // params: { user_id, rekapnilai_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);
    const { offset, limit } = request.post();

    const rekap = await MRekap.query()
      .with("rekaprombel", (builder) => {
        builder.with("rekapnilai", (builder) => {
          builder.with("user", (builder) => {
            builder.select("id", "nama");
          });
        });
      })
      .where({ dihapus: 0 })
      .andWhere({ m_ta_id: ta.id })
      // .andWhere({ tipe: "keterampilan" })
      .offset(parseInt(offset))
      .limit(limit)
      .fetch();

    // return rekap;

    const a = await Promise.all(
      rekap.toJSON().map(async (a) => {
        const r = await Promise.all(
          a.rekaprombel.map(async (d) => {
            const c = await Promise.all(
              d.rekapnilai.map(async (b) => {
                const check = await TkRekapNilai.query()
                  .with("rekapRombel", (builder) => {
                    builder.with("rekap");
                  })
                  .where({ m_user_id: b.user.id })
                  .andWhere({ m_rekap_rombel_id: d.id })
                  .first();

                const materi = await MMateri.query()
                  .where({ id: check.toJSON().rekapRombel.rekap.m_materi_id })
                  .first();

                const rekapNilai = check;

                const checkData = await MUjianSiswa.query()
                  .where({ m_user_id: b.user.id })
                  .andWhere({ m_mata_pelajaran_id: materi.m_mata_pelajaran_id })
                  .andWhere({ m_ta_id: ta.id })
                  .first();

                const mapel = await MMataPelajaran.query()
                  .with("user")
                  .with("materi")
                  .where({ id: materi.m_mata_pelajaran_id })
                  .first();

                if (
                  rekapNilai.toJSON().rekapRombel.rekap.tipe == "tugas" ||
                  rekapNilai.toJSON().rekapRombel.rekap.tipe == "ujian"
                ) {
                  const rekap = await TkRekapNilai.query()
                    .with("rekapRombel", (builder) => {
                      builder.with("rekap", (builder) => {
                        builder
                          .where({ tipe: "tugas" })
                          .andWhere({ m_ta_id: ta.id })
                          .andWhere({ dihapus: 0 })
                          .andWhere({ m_materi_id: materi.id });
                      });
                    })
                    .where({ m_user_id: b.user.id })
                    .fetch();

                  const rekapUjian = await TkRekapNilai.query()
                    .with("rekapRombel", (builder) => {
                      builder.with("rekap", (builder) => {
                        builder
                          .where({ tipe: "ujian" })
                          .andWhere({ teknik: "UH" })
                          .andWhere({ m_ta_id: ta.id })
                          .andWhere({ dihapus: 0 })
                          .andWhere({ m_materi_id: materi.id });
                      });
                    })
                    .where({ m_user_id: b.user.id })
                    .fetch();

                  const ujian = await MUjianSiswa.query()
                    .with("nilaiUAS", (builder) => {
                      builder.select("id", "nilai");
                    })
                    .with("nilaiUTS", (builder) => {
                      builder.select("id", "nilai");
                    })
                    .where({ m_user_id: b.user.id })
                    .andWhere({ m_mata_pelajaran_id: mapel.id })
                    .first();

                  const result = await Promise.all(
                    rekap.toJSON().map(async (d) => {
                      if (d.rekapRombel.rekap == null) {
                        return;
                      }
                      return d;
                    })
                  );

                  const data = result.filter((d) => d != null);

                  let jumlah1 = 0;

                  result
                    .filter((d) => d != null)
                    .forEach((d) => {
                      jumlah1 += d.nilai;
                    });

                  const rata = jumlah1 / data.length;

                  const result1 = await Promise.all(
                    rekapUjian.toJSON().map(async (d) => {
                      if (d.rekapRombel.rekap == null) {
                        return;
                      }
                      return d;
                    })
                  );

                  const dataUjian = result1.filter((d) => d != null);

                  let jumlah = 0;

                  result1
                    .filter((d) => d != null)
                    .forEach((d) => {
                      jumlah += d.nilai;
                    });

                  const rataUjian = jumlah / dataUjian.length;

                  if (check.toJSON().rekapRombel.rekap.teknik == "UTS") {
                    if (checkData) {
                      try {
                        const postUjian = await MUjianSiswa.query()
                          .where({ m_user_id: b.user.id })
                          .andWhere({
                            m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                          })
                          .andWhere({ m_ta_id: ta.id })
                          .update({
                            uts_id: rekapNilai.id,
                          });
                      } catch (error) {
                        return error;
                      }
                    } else {
                      await MUjianSiswa.create({
                        m_user_id: b.user.id,
                        m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                        uts_id: rekapNilai.id,
                        m_ta_id: ta.id,
                      });
                    }
                  } else if (check.toJSON().rekapRombel.rekap.teknik == "UAS") {
                    if (checkData) {
                      await MUjianSiswa.query()
                        .where({ m_user_id: b.user.id })
                        .andWhere({
                          m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                        })
                        .update({
                          uas_id: rekapNilai.id,
                        });
                    } else {
                      await MUjianSiswa.create({
                        m_user_id: b.user.id,
                        m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                        uas_id: rekapNilai.id,
                        m_ta_id: ta.id,
                      });
                    }
                  } else if (check.toJSON().rekapRombel.rekap.teknik == "US") {
                    if (checkData) {
                      await MUjianSiswa.query()
                        .where({ m_user_id: b.user.id })
                        .andWhere({
                          m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                        })
                        .update({
                          us_id: rekapNilai.id,
                        });
                    } else {
                      await MUjianSiswa.create({
                        m_user_id: b.user.id,
                        m_mata_pelajaran_id: materi.m_mata_pelajaran_id,
                        us_id: rekapNilai.id,
                        m_ta_id: ta.id,
                      });
                    }
                  }

                  let nilaiAkhir;
                  if (ujian) {
                    const listNilai = [
                      rataUjian,
                      rata,
                      ujian.toJSON().nilaiUAS
                        ? ujian.toJSON().nilaiUAS?.nilai
                        : null,
                      ujian.toJSON().nilaiUTS
                        ? ujian.toJSON().nilaiUTS?.nilai
                        : null,
                    ];
                    nilaiAkhir = listNilai.filter((nilai) => nilai).length
                      ? listNilai
                          .filter((nilai) => nilai)
                          .reduce((a, b) => a + b, 0) /
                        listNilai.filter((nilai) => nilai).length
                      : 0;
                    await MUjianSiswa.query().where({ id: ujian.id }).update({
                      nilai: nilaiAkhir,
                    });
                  } else {
                    const listNilai = [rataUjian, rata];
                    nilaiAkhir = listNilai.filter((nilai) => nilai).length
                      ? listNilai
                          .filter((nilai) => nilai)
                          .reduce((a, b) => a + b, 0) /
                        listNilai.filter((nilai) => nilai).length
                      : 0;
                    await MUjianSiswa.create({
                      m_ta_id: ta.id,
                      m_user_id: b.user.id,
                      m_mata_pelajaran_id: mapel.id,
                      nilai: nilaiAkhir,
                    });
                  }
                } else if (
                  rekapNilai.toJSON().rekapRombel.rekap.tipe == "keterampilan"
                ) {
                  const rekap = await TkRekapNilai.query()
                    .with("rekapRombel", (builder) => {
                      builder.with("rekap", (builder) => {
                        builder
                          .where({ tipe: "keterampilan" })
                          .andWhere({ m_ta_id: ta.id })
                          .andWhere({ dihapus: 0 })
                          .andWhere({ m_materi_id: materi.id });
                      });
                    })
                    .where({ m_user_id: b.user.id })
                    .fetch();
                  const result = await Promise.all(
                    rekap.toJSON().map(async (d) => {
                      if (d.rekapRombel.rekap == null) {
                        return;
                      }
                      return d;
                    })
                  );
                  const dataKeterampilan = result.filter((d) => d != null);
                  let jumlah0 = 0;
                  result
                    .filter((d) => d != null)
                    .forEach((d) => {
                      jumlah0 += d.nilai;
                    });

                  const rataData = dataKeterampilan.length
                    ? jumlah0 / dataKeterampilan.length
                    : 0;

                  const rekapPraktik = await TkRekapNilai.query()
                    .with("rekapRombel", (builder) => {
                      builder.where({ dihapus: 0 }).with("rekap", (builder) => {
                        builder
                          .where({ tipe: "keterampilan" })
                          .andWhere({ teknik: "praktik" })
                          .andWhere({ m_ta_id: ta.id })
                          .andWhere({ dihapus: 0 })
                          .andWhere({ m_materi_id: materi.id });
                      });
                    })
                    .where({ m_user_id: b.user.id })
                    .fetch();
                  const result1 = await Promise.all(
                    rekapPraktik.toJSON().map(async (d) => {
                      if (d.rekapRombel.rekap == null) {
                        return;
                      }
                      return d;
                    })
                  );
                  let jumlah = 0;
                  result1
                    .filter((d) => d != null)
                    .forEach((d) => {
                      jumlah += d.nilai;
                    });
                  const data4 = result1.filter((d) => d != null);

                  const praktik = jumlah / data4.length;

                  const rekapProyek = await TkRekapNilai.query()
                    .with("rekapRombel", (builder) => {
                      builder.with("rekap", (builder) => {
                        builder
                          .where({ tipe: "keterampilan" })
                          .andWhere({ teknik: "proyek" })
                          .andWhere({ m_ta_id: ta.id })
                          .andWhere({ dihapus: 0 })
                          .andWhere({ m_materi_id: materi.id });
                      });
                    })
                    .where({ m_user_id: b.user.id })
                    .fetch();
                  const result2 = await Promise.all(
                    rekapProyek.toJSON().map(async (d) => {
                      if (d.rekapRombel.rekap == null) {
                        return;
                      }
                      return d;
                    })
                  );
                  let jumlah1 = 0;
                  result2
                    .filter((d) => d != null)
                    .forEach((d) => {
                      jumlah1 += d.nilai;
                    });
                  const data1 = result2.filter((d) => d != null);
                  const proyek = jumlah1 / data1.length;

                  const rekapPortofolio = await TkRekapNilai.query()
                    .with("rekapRombel", (builder) => {
                      builder.with("rekap", (builder) => {
                        builder
                          .where({ tipe: "keterampilan" })
                          .andWhere({ teknik: "portofolio" })
                          .andWhere({ m_ta_id: ta.id })
                          .andWhere({ dihapus: 0 })
                          .andWhere({ m_materi_id: materi.id });
                      });
                    })
                    .where({ m_user_id: b.user.id })
                    .fetch();
                  const result3 = await Promise.all(
                    rekapPortofolio.toJSON().map(async (d) => {
                      if (d.rekapRombel.rekap == null) {
                        return;
                      }
                      return d;
                    })
                  );
                  let jumlah2 = 0;
                  result3
                    .filter((d) => d != null)
                    .forEach((d) => {
                      jumlah2 += d.nilai;
                    });
                  const data2 = result3.filter((d) => d != null);
                  const portofolio = jumlah2 / data2.length;

                  const rekapProduk = await TkRekapNilai.query()
                    .with("rekapRombel", (builder) => {
                      builder.with("rekap", (builder) => {
                        builder
                          .where({ tipe: "keterampilan" })
                          .andWhere({ teknik: "produk" })
                          .andWhere({ m_ta_id: ta.id })
                          .andWhere({ dihapus: 0 })
                          .andWhere({ m_materi_id: materi.id });
                      });
                    })
                    .where({ m_user_id: b.user.id })
                    .fetch();
                  const result4 = await Promise.all(
                    rekapProduk.toJSON().map(async (d) => {
                      if (d.rekapRombel.rekap == null) {
                        return;
                      }
                      return d;
                    })
                  );
                  let jumlah3 = 0;
                  result4
                    .filter((d) => d != null)
                    .forEach((d) => {
                      jumlah3 += d.nilai;
                    });
                  const data3 = result4.filter((d) => d != null);
                  const produk = jumlah3 / data3.length;

                  const nilaiAkhirKeterampilan = await MUjianSiswa.query()
                    .where({ m_user_id: b.user.id })
                    .andWhere({
                      m_mata_pelajaran_id: mapel.id,
                    })
                    .andWhere({ m_ta_id: ta.id })
                    .first();

                  try {
                    if (nilaiAkhirKeterampilan) {
                      await MUjianSiswa.query()
                        .where({ id: nilaiAkhirKeterampilan.id })
                        .update({
                          nilai_keterampilan: rataData,
                        });
                    } else {
                      await MUjianSiswa.create({
                        m_ta_id: ta.id,
                        m_user_id: b.user.id,
                        m_mata_pelajaran_id: mapel.id,
                        nilai_keterampilan: rataData,
                      });
                    }
                  } catch (err) {
                    return err;
                  }

                  // return err;
                }
              })
            );
            return c;
          })
        );
        return r;
      })
    );

    return response.ok({
      message: messagePutSuccess,
      a,
    });
  }

  async downloadRekapRombelSikap({
    response,
    request,
    auth,
    params: { rombel_id, mata_pelajaran_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const rombel = await MRombel.query()
      .with("anggotaRombel", (builder) => {
        builder
          .with("user", (builder) => {
            builder
              .select("id", "nama", "whatsapp")
              .with("rekapSikap", (builder) => {
                builder
                  .with("predikat", (builder) => {
                    builder.select("id", "predikat");
                  })
                  .where({ m_mata_pelajaran_id: mata_pelajaran_id });
              })
              .where({ dihapus: 0 });
          })
          .where({ dihapus: 0 });
      })
      .where({ id: rombel_id })
      .first();

    const predikat = await MPredikatNilai.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .fetch();

    const mataPelajaran = await MMataPelajaran.query()
      .where({ id: mata_pelajaran_id })
      .first();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Daftar Rekap Sikap Siswa`);

    worksheet.mergeCells("A1:M1");
    worksheet.mergeCells("A2:M2");
    worksheet.mergeCells("A3:M3");

    worksheet.getCell(
      "A4"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;

    worksheet.addConditionalFormatting({
      ref: "A1:M3",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });

    worksheet.addConditionalFormatting({
      ref: "A11:M11",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });

    worksheet.getCell("A1").value = "Rekapan Sikap Siswa";

    worksheet.getCell("A2").value = rombel.nama;
    worksheet.getCell("A3").value = mataPelajaran.nama;

    await Promise.all(
      predikat.toJSON().map(async (e, idd) => {
        worksheet.getRow(5).values = ["No", "Predikat"];
        worksheet.columns = [{ key: "no" }, { key: "predikat" }];

        // Add row using key mapping to columns
        let row = worksheet.addRow({
          no: `${idd + 1}`,
          predikat: e ? e.predikat : "-",
        });
      })
    );

    await Promise.all(
      rombel
        .toJSON()
        .anggotaRombel.sort((a, b) =>
          ("" + a.user.nama).localeCompare("" + b.user.nama)
        )
        .map(async (d, idx) => {
          worksheet.addConditionalFormatting({
            ref: `B${(idx + 1) * 1 + 11}:C${(idx + 1) * 1 + 11}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "left",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          worksheet.addConditionalFormatting({
            ref: `A${(idx + 1) * 1 + 11}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "center",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          worksheet.addConditionalFormatting({
            ref: `D${(idx + 1) * 1 + 11}:M${(idx + 1) * 1 + 11}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "center",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          // add column headers
          worksheet.getRow(11).values = [
            "No",
            "Nama",
            "Whatsapp",
            "Predikat",
            "Tekun",
            "Jujur",
            "Sopan Santun",
            "Disiplin",
            "Percaya Diri",
            "Tanggung Jawab",
            "Bersyukur",
            "Bekerja Sama",
            "Gotong Royong",
          ];
          worksheet.columns = [
            { key: "no" },
            { key: "nama" },
            { key: "whatsapp" },
            { key: "predikat" },
            { key: "Tekun" },
            { key: "Jujur" },
            { key: "SopanSantun" },
            { key: "Disiplin" },
            { key: "PercayaDiri" },
            { key: "TanggungJawab" },
            { key: "Bersyukur" },
            { key: "BekerjaSama" },
            { key: "GotongRoyong" },
          ];

          // Add row using key mapping to columns
          let row = worksheet.addRow({
            no: `${idx + 1}`,
            nama: d.user ? d.user.nama : "-",
            whatsapp: d.user ? d.user.whatsapp : "-",
            predikat: d.user.rekapSikap
              ? d.user.rekapSikap.predikat
                ? d.user.rekapSikap.predikat.predikat
                : ""
              : "",
            Tekun: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_id.includes("1")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_id.includes("1")
                ? 0
                : ""
              : "",
            Jujur: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_id.includes("2")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_id.includes("2")
                ? 0
                : ""
              : "",
            SopanSantun: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_id.includes("3")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_id.includes("3")
                ? 0
                : ""
              : "",
            Disiplin: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_id.includes("4")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_id.includes("4")
                ? 0
                : ""
              : "",
            PercayaDiri: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_id.includes("5")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_id.includes("5")
                ? 0
                : ""
              : "",
            TanggungJawab: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_id.includes("6")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_id.includes("6")
                ? 0
                : ""
              : "",
            Bersyukur: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_id.includes("7")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_id.includes("7")
                ? 0
                : ""
              : "",
            BekerjaSama: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_id.includes("8")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_id.includes("8")
                ? 0
                : ""
              : "",
            GotongRoyong: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_id.includes("9")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_id.includes("9")
                ? 0
                : ""
              : "",
          });
        })
    );

    worksheet.mergeCells("D5:K5");
    worksheet.mergeCells("D6:K6");
    worksheet.mergeCells("D7:K7");
    worksheet.mergeCells("D8:K8");

    worksheet.getCell("D5").value = `Tata Cara dan syarat pengisian :`;
    worksheet.getCell(
      "D6"
    ).value = `isi kolom predikat sesuai dengan nama predikat yang ada`;
    worksheet.getCell(
      "D7"
    ).value = `isi data dengan 1 apabila sikap ditunjukkan dan 0 untuk sikap ditingkatkan `;
    worksheet.getCell(
      "D8"
    ).value = `kosongkan apabila tidak ditunjukkan ataupun ditingkatkan `;

    worksheet.getColumn("A").width = 6;
    worksheet.getColumn("B").width = 20;
    worksheet.getColumn("C").width = 23;
    worksheet.getColumn("D").width = 6;

    let namaFile = `/uploads/rekapan-sikap-siswa-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }
  async importSikapRekapRombelServices(
    filelocation,
    sekolah,
    rombel_id,
    mata_pelajaran_id,
    ta
  ) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar Rekap Sikap Siswa");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber > 11) {
        data.push({
          nama: explanation.getCell("B" + rowNumber).value,
          whatsapp: explanation.getCell("C" + rowNumber).value,
          predikat: explanation.getCell("D" + rowNumber).value,
          Tekun: explanation.getCell("E" + rowNumber).value,
          Jujur: explanation.getCell("F" + rowNumber).value,
          SopanSantun: explanation.getCell("G" + rowNumber).value,
          Disiplin: explanation.getCell("H" + rowNumber).value,
          PercayaDiri: explanation.getCell("I" + rowNumber).value,
          TanggungJawab: explanation.getCell("J" + rowNumber).value,
          Bersyukur: explanation.getCell("K" + rowNumber).value,
          BekerjaSama: explanation.getCell("L" + rowNumber).value,
          GotongRoyong: explanation.getCell("M" + rowNumber).value,
        });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        const userSiswa = await User.query()
          .select("id", "whatsapp", "dihapus")
          .where({ whatsapp: d.whatsapp })
          .andWhere({ dihapus: 0 })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        const predikatId = await MPredikatNilai.query()
          .where({ predikat: `${d.predikat}` })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        const check = await MSikapRombel.query()
          .where({ dihapus: 0 })
          .andWhere({ m_mata_pelajaran_id: mata_pelajaran_id })
          .andWhere({ m_rombel_id: rombel_id })
          .andWhere({ m_user_id: userSiswa.id })
          .first();

        const m_sikap_ditunjukkan_id = [];
        const m_sikap_ditingkatkan_id = [];

        if (d.Tekun || parseInt(d.Tekun) === 0) {
          d.Tekun == 1
            ? m_sikap_ditunjukkan_id.push(1)
            : m_sikap_ditingkatkan_id.push(1);
        }
        if (d.Jujur || parseInt(d.Jujur) === 0) {
          d.Jujur == 1
            ? m_sikap_ditunjukkan_id.push(2)
            : m_sikap_ditingkatkan_id.push(2);
        }
        if (d.SopanSantun || parseInt(d.SopanSantun) === 0) {
          d.SopanSantun == 1
            ? m_sikap_ditunjukkan_id.push(3)
            : m_sikap_ditingkatkan_id.push(3);
        }
        if (d.Disiplin || parseInt(d.Disiplin) === 0) {
          d.Disiplin == 1
            ? m_sikap_ditunjukkan_id.push(4)
            : m_sikap_ditingkatkan_id.push(4);
        }
        if (d.PercayaDiri || parseInt(d.PercayaDiri) === 0) {
          d.PercayaDiri == 1
            ? m_sikap_ditunjukkan_id.push(5)
            : m_sikap_ditingkatkan_id.push(5);
        }
        if (d.TanggungJawab || parseInt(d.TanggungJawab) === 0) {
          d.TanggungJawab == 1
            ? m_sikap_ditunjukkan_id.push(6)
            : m_sikap_ditingkatkan_id.push(6);
        }
        if (d.Bersyukur || parseInt(d.Bersyukur) === 0) {
          d.Bersyukur == 1
            ? m_sikap_ditunjukkan_id.push(7)
            : m_sikap_ditingkatkan_id.push(7);
        }
        if (d.BekerjaSama || parseInt(d.BekerjaSama) === 0) {
          d.BekerjaSama == 1
            ? m_sikap_ditunjukkan_id.push(8)
            : m_sikap_ditingkatkan_id.push(8);
        }
        if (d.GotongRoyong || parseInt(d.GotongRoyong) === 0) {
          d.GotongRoyong == 1
            ? m_sikap_ditunjukkan_id.push(9)
            : m_sikap_ditingkatkan_id.push(9);
        }

        if (check) {
          await MSikapRombel.query()
            .where({ dihapus: 0 })
            .andWhere({ m_mata_pelajaran_id: mata_pelajaran_id })
            .andWhere({ m_rombel_id: rombel_id })
            .andWhere({ m_user_id: userSiswa.id })
            .update({
              m_predikat_nilai_id: predikatId.id,
              m_sikap_ditunjukkan_id: m_sikap_ditunjukkan_id.join(","),
              m_sikap_ditingkatkan_id: m_sikap_ditingkatkan_id.join(","),
            });
        } else if (predikatId) {
          await MSikapRombel.create({
            m_mata_pelajaran_id: mata_pelajaran_id,
            m_user_id: userSiswa.id,
            m_predikat_nilai_id: predikatId.id,
            m_rombel_id: rombel_id,
            m_sikap_ditunjukkan_id: m_sikap_ditunjukkan_id.join(","),
            m_sikap_ditingkatkan_id: m_sikap_ditingkatkan_id.join(","),
            status: 1,
            dihapus: 0,
          });
        }
      })
    );

    return result;
  }

  async importSikapRekapRombel({
    request,
    response,
    auth,
    params: { rombel_id, mata_pelajaran_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importSikapRekapRombelServices(
      `tmp/uploads/${fname}`,
      sekolah,
      rombel_id,
      mata_pelajaran_id,
      ta
    );
  }

  async downloadSikapSiswa({ response, request, auth, params: { rombel_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const rombel = await MRombel.query()
      .with("anggotaRombel", (builder) => {
        builder
          .with("user", (builder) => {
            builder
              .select("id", "nama", "whatsapp")
              .with("sikap")
              .where({ dihapus: 0 });
          })
          .where({ dihapus: 0 });
      })
      .where({ id: rombel_id })
      .first();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Daftar Sikap Siswa`);

    worksheet.mergeCells("A1:M1");
    worksheet.mergeCells("A2:M2");
    worksheet.mergeCells("A3:M3");

    worksheet.getCell(
      "A4"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;

    worksheet.addConditionalFormatting({
      ref: "A1:M3",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });

    worksheet.addConditionalFormatting({
      ref: "A11:M11",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });

    worksheet.getCell("A1").value = "Sikap Siswa";

    worksheet.getCell("A2").value = rombel.nama;

    await Promise.all(
      rombel
        .toJSON()
        .anggotaRombel.sort((a, b) =>
          ("" + a.user.nama).localeCompare("" + b.user.nama)
        )
        .map(async (d, idx) => {
          worksheet.addConditionalFormatting({
            ref: `B${(idx + 1) * 1 + 11}:C${(idx + 1) * 1 + 11}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "left",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          worksheet.addConditionalFormatting({
            ref: `A${(idx + 1) * 1 + 11}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "center",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          worksheet.addConditionalFormatting({
            ref: `D${(idx + 1) * 1 + 11}:M${(idx + 1) * 1 + 11}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "center",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          // add column headers
          worksheet.getRow(11).values = [
            "No",
            "Nama",
            "Whatsapp",
            "Tekun",
            "Jujur",
            "Sopan Santun",
            "Disiplin",
            "Percaya Diri",
            "Tanggung Jawab",
            "Bersyukur",
            "Bekerja Sama",
            "Gotong Royong",
            "Berdoa sebelum dan sesudah melakukan kegiatan",
            "Menjalankan ibadah sesuai dengan agamanya",
            "Memberi salam pada saat awal dan akhir kegiatan",
            "Bersyukur atas nikmat dan karunia Tuhan Yang Maha Esa",
            "Mensyukuri kemampuan manusia dalam mengendalikan diri",
            "Bersyukur ketika berhasil mengerjakan sesuatu",
            "Berserah diri (tawakal) kepada Tuhan setelah berikhtiar atau melakukan usaha",
            "Memelihara hubungan baik dengan sesama umat",
            "Menghormati orang lain yang menjalankan ibadah sesuai dengan agamanya",
          ];
          worksheet.columns = [
            { key: "no" },
            { key: "nama" },
            { key: "whatsapp" },
            { key: "Tekun" },
            { key: "Jujur" },
            { key: "SopanSantun" },
            { key: "Disiplin" },
            { key: "PercayaDiri" },
            { key: "TanggungJawab" },
            { key: "Bersyukur" },
            { key: "BekerjaSama" },
            { key: "GotongRoyong" },
            { key: "Berdoasebelum" },
            { key: "Menjalankan" },
            { key: "Memberi" },
            { key: "Bersyukur" },
            { key: "Mensyukuri" },
            { key: "Bersyukurketika" },
            { key: "Berserahdiri" },
            { key: "Memelihara" },
            { key: "Menghormati" },
          ];

          // Add row using key mapping to columns
          let row = worksheet.addRow({
            no: `${idx + 1}`,
            nama: d.user ? d.user.nama : "-",
            whatsapp: d.user ? d.user.whatsapp : "-",
            Tekun: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_sosial_id.includes("1")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_sosial_id.includes("1")
                ? 0
                : ""
              : "",
            Jujur: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_sosial_id.includes("2")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_sosial_id.includes("2")
                ? 0
                : ""
              : "",
            SopanSantun: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_sosial_id.includes("3")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_sosial_id.includes("3")
                ? 0
                : ""
              : "",
            Disiplin: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_sosial_id.includes("4")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_sosial_id.includes("4")
                ? 0
                : ""
              : "",
            PercayaDiri: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_sosial_id.includes("5")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_sosial_id.includes("5")
                ? 0
                : ""
              : "",
            TanggungJawab: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_sosial_id.includes("6")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_sosial_id.includes("6")
                ? 0
                : ""
              : "",
            Bersyukur: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_sosial_id.includes("7")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_sosial_id.includes("7")
                ? 0
                : ""
              : "",
            BekerjaSama: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_sosial_id.includes("8")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_sosial_id.includes("8")
                ? 0
                : ""
              : "",
            GotongRoyong: d.user.rekapSikap
              ? d.user.rekapSikap.m_sikap_ditunjukkan_sosial_id.includes("9")
                ? 1
                : d.user.rekapSikap.m_sikap_ditingkatkan_sosial_id.includes("9")
                ? 0
                : ""
              : "",

            Berdoasebelum: d.user.sikap
              ? d.user.sikap.m_sikap_spiritual_ditunjukkan_id.includes("1")
                ? 1
                : d.user.sikap.m_sikap_spiritual_ditingkatkan_id.includes("1")
                ? 0
                : ""
              : "",
            Menjalankan: d.user.sikap
              ? d.user.sikap.m_sikap_spiritual_ditunjukkan_id.includes("2")
                ? 1
                : d.user.sikap.m_sikap_spiritual_ditingkatkan_id.includes("2")
                ? 0
                : ""
              : "",
            Memberi: d.user.sikap
              ? d.user.sikap.m_sikap_spiritual_ditunjukkan_id.includes("3")
                ? 1
                : d.user.sikap.m_sikap_spiritual_ditingkatkan_id.includes("3")
                ? 0
                : ""
              : "",
            Bersyukur: d.user.sikap
              ? d.user.sikap.m_sikap_spiritual_ditunjukkan_id.includes("4")
                ? 1
                : d.user.sikap.m_sikap_spiritual_ditingkatkan_id.includes("4")
                ? 0
                : ""
              : "",
            Mensyukuri: d.user.sikap
              ? d.user.sikap.m_sikap_spiritual_ditunjukkan_id.includes("5")
                ? 1
                : d.user.sikap.m_sikap_spiritual_ditingkatkan_id.includes("5")
                ? 0
                : ""
              : "",
            Bersyukurketika: d.user.sikap
              ? d.user.sikap.m_sikap_spiritual_ditunjukkan_id.includes("6")
                ? 1
                : d.user.sikap.m_sikap_spiritual_ditingkatkan_id.includes("6")
                ? 0
                : ""
              : "",
            Berserahdiri: d.user.sikap
              ? d.user.sikap.m_sikap_spiritual_ditunjukkan_id.includes("7")
                ? 1
                : d.user.sikap.m_sikap_spiritual_ditingkatkan_id.includes("7")
                ? 0
                : ""
              : "",
            Memelihara: d.user.sikap
              ? d.user.sikap.m_sikap_spiritual_ditunjukkan_id.includes("8")
                ? 1
                : d.user.sikap.m_sikap_spiritual_ditingkatkan_id.includes("8")
                ? 0
                : ""
              : "",
            Menghormati: d.user.sikap
              ? d.user.sikap.m_sikap_spiritual_ditunjukkan_id.includes("9")
                ? 1
                : d.user.sikap.m_sikap_spiritual_ditingkatkan_id.includes("9")
                ? 0
                : ""
              : "",
          });
        })
    );

    worksheet.mergeCells("D5:K5");
    worksheet.mergeCells("D6:K6");
    worksheet.mergeCells("D7:K7");
    worksheet.mergeCells("D8:K8");

    worksheet.getCell("D5").value = `Tata Cara dan syarat pengisian :`;
    worksheet.getCell(
      "D6"
    ).value = `isi kolom predikat sesuai dengan nama predikat yang ada`;
    worksheet.getCell(
      "D7"
    ).value = `isi data dengan 1 apabila sikap ditunjukkan dan 0 untuk sikap ditingkatkan `;
    worksheet.getCell(
      "D8"
    ).value = `kosongkan apabila tidak ditunjukkan ataupun ditingkatkan `;

    worksheet.getColumn("A").width = 6;
    worksheet.getColumn("B").width = 20;
    worksheet.getColumn("C").width = 23;
    worksheet.getColumn("D").width = 6;

    let namaFile = `/uploads/rekapan-sikap-siswa-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }
  async importSikapSiswaServices(
    filelocation,
    sekolah,
    rombel_id,
    mata_pelajaran_id,
    ta
  ) {
    var workbook = new Excel.Workbook();

    workbook = await workbook.xlsx.readFile(filelocation);

    let explanation = workbook.getWorksheet("Daftar Rekap Sikap Siswa");

    let colComment = explanation.getColumn("A");

    let data = [];

    colComment.eachCell(async (cell, rowNumber) => {
      if (rowNumber > 11) {
        data.push({
          nama: explanation.getCell("B" + rowNumber).value,
          whatsapp: explanation.getCell("C" + rowNumber).value,
          predikat: explanation.getCell("D" + rowNumber).value,
          Tekun: explanation.getCell("E" + rowNumber).value,
          Jujur: explanation.getCell("F" + rowNumber).value,
          SopanSantun: explanation.getCell("G" + rowNumber).value,
          Disiplin: explanation.getCell("H" + rowNumber).value,
          PercayaDiri: explanation.getCell("I" + rowNumber).value,
          TanggungJawab: explanation.getCell("J" + rowNumber).value,
          Bersyukur: explanation.getCell("K" + rowNumber).value,
          BekerjaSama: explanation.getCell("L" + rowNumber).value,
          GotongRoyong: explanation.getCell("M" + rowNumber).value,
        });
      }
    });

    const result = await Promise.all(
      data.map(async (d) => {
        const userSiswa = await User.query()
          .select("id", "whatsapp", "dihapus")
          .where({ whatsapp: d.whatsapp })
          .andWhere({ dihapus: 0 })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        const predikatId = await MPredikatNilai.query()
          .where({ predikat: `${d.predikat}` })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        const check = await MSikapRombel.query()
          .where({ dihapus: 0 })
          .andWhere({ m_mata_pelajaran_id: mata_pelajaran_id })
          .andWhere({ m_rombel_id: rombel_id })
          .andWhere({ m_user_id: userSiswa.id })
          .first();

        const m_sikap_ditunjukkan_id = [];
        const m_sikap_ditingkatkan_id = [];

        if (d.Tekun || parseInt(d.Tekun) === 0) {
          d.Tekun == 1
            ? m_sikap_ditunjukkan_id.push(1)
            : m_sikap_ditingkatkan_id.push(1);
        }
        if (d.Jujur || parseInt(d.Jujur) === 0) {
          d.Jujur == 1
            ? m_sikap_ditunjukkan_id.push(2)
            : m_sikap_ditingkatkan_id.push(2);
        }
        if (d.SopanSantun || parseInt(d.SopanSantun) === 0) {
          d.SopanSantun == 1
            ? m_sikap_ditunjukkan_id.push(3)
            : m_sikap_ditingkatkan_id.push(3);
        }
        if (d.Disiplin || parseInt(d.Disiplin) === 0) {
          d.Disiplin == 1
            ? m_sikap_ditunjukkan_id.push(4)
            : m_sikap_ditingkatkan_id.push(4);
        }
        if (d.PercayaDiri || parseInt(d.PercayaDiri) === 0) {
          d.PercayaDiri == 1
            ? m_sikap_ditunjukkan_id.push(5)
            : m_sikap_ditingkatkan_id.push(5);
        }
        if (d.TanggungJawab || parseInt(d.TanggungJawab) === 0) {
          d.TanggungJawab == 1
            ? m_sikap_ditunjukkan_id.push(6)
            : m_sikap_ditingkatkan_id.push(6);
        }
        if (d.Bersyukur || parseInt(d.Bersyukur) === 0) {
          d.Bersyukur == 1
            ? m_sikap_ditunjukkan_id.push(7)
            : m_sikap_ditingkatkan_id.push(7);
        }
        if (d.BekerjaSama || parseInt(d.BekerjaSama) === 0) {
          d.BekerjaSama == 1
            ? m_sikap_ditunjukkan_id.push(8)
            : m_sikap_ditingkatkan_id.push(8);
        }
        if (d.GotongRoyong || parseInt(d.GotongRoyong) === 0) {
          d.GotongRoyong == 1
            ? m_sikap_ditunjukkan_id.push(9)
            : m_sikap_ditingkatkan_id.push(9);
        }

        if (check) {
          await MSikapRombel.query()
            .where({ dihapus: 0 })
            .andWhere({ m_mata_pelajaran_id: mata_pelajaran_id })
            .andWhere({ m_rombel_id: rombel_id })
            .andWhere({ m_user_id: userSiswa.id })
            .update({
              m_predikat_nilai_id: predikatId.id,
              m_sikap_ditunjukkan_id: m_sikap_ditunjukkan_id.join(","),
              m_sikap_ditingkatkan_id: m_sikap_ditingkatkan_id.join(","),
            });
        } else if (predikatId) {
          await MSikapRombel.create({
            m_mata_pelajaran_id: mata_pelajaran_id,
            m_user_id: userSiswa.id,
            m_predikat_nilai_id: predikatId.id,
            m_rombel_id: rombel_id,
            m_sikap_ditunjukkan_id: m_sikap_ditunjukkan_id.join(","),
            m_sikap_ditingkatkan_id: m_sikap_ditingkatkan_id.join(","),
            status: 1,
            dihapus: 0,
          });
        }
      })
    );

    return result;
  }

  async importSikapSiswa({
    request,
    response,
    auth,
    params: { rombel_id, mata_pelajaran_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    let file = request.file("file");
    let fname = `import-excel.xlsx`;

    //move uploaded file into custom folder
    await file.move(Helpers.tmpPath("/uploads"), {
      name: fname,
      overwrite: true,
    });

    if (!file.moved()) {
      return fileUpload.error();
    }

    return await this.importSikapSiswaServices(
      `tmp/uploads/${fname}`,
      sekolah,
      rombel_id,
      mata_pelajaran_id,
      ta
    );
  }

  async downloadLedgerNilai({
    response,
    request,
    auth,
    params: { rombel_id },
  }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const rombel = await MRombel.query()
      .with("anggotaRombel", (builder) => {
        builder
          .with("user", (builder) => {
            builder
              .with("nilaiSemuaUjian", (builder) => {
                builder.with("mapel").where({ m_ta_id: ta.id });
              })
              .with("profil", (builder) => {
                builder.select("m_user_id", "nis");
              })
              .select("id", "nama", "gender");
          })
          .where({ dihapus: 0 });
      })
      .with("user", (builder) => {
        builder.select("id", "nama");
      })
      .where({ id: rombel_id })
      .first();

    // return rombel;

    let workbook = new Excel.Workbook();

    let worksheet = workbook.addWorksheet(`Rekap Nilai Siswa`);

    let alreadyMerged = 0;
    let sudahGabung = 0;
    // add column headers

    const urutan = rombel
      .toJSON()
      .anggotaRombel.sort((a, b) => {
        return (
          b.user.nilaiSemuaUjian.reduce((c, d) => {
            return c + d.nilai + d.nilai_keterampilan;
          }, 0) -
          a.user.nilaiSemuaUjian.reduce((c, d) => {
            return c + d.nilai + d.nilai_keterampilan;
          }, 0)
        );
      })
      .map((d) => d.id);

    // return urutan;

    await Promise.all(
      rombel.toJSON().anggotaRombel.map(async (d, idx) => {
        worksheet.getRow(6).values = ["No", "NIS", "Nama", "Gen"];
        worksheet.getRow(7).values = ["No", "NIS", "Nama", "Gen"];
        worksheet.getRow(8).values = ["No", "NIS", "Nama", "Gen"];
        worksheet.columns = [
          { key: "no" },
          { key: "nis" },
          { key: "user" },
          { key: "gen" },
        ];
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          nis: d.user.profil ? d.user.profil.nis : "",
          user: d.user ? d.user.nama : "-",
          gen: d.user ? d.user.gender : "",
        });

        // const row = worksheet.getRow(8);
        await Promise.all(
          d.user.nilaiSemuaUjian.map(async (e, nox) => {
            worksheet.getColumn([`${(nox + 1) * 2 + 3}`]).values = [
              ``,
              ``,
              ``,
              ``,
              ``,
              `Mata Pelajaran`,
              `${e.mapel.kode}`,
              `P`,
            ];
            worksheet.getColumn([`${(nox + 1) * 2 + 4}`]).values = [
              ``,
              ``,
              ``,
              ``,
              ``,
              ``,
              `${e.mapel.kode}`,
              `K`,
            ];
            // worksheet.mergeCells(`${(nox + 1) * 2 + 3}:${(nox + 1) * 2 + 4}`);

            row.getCell([`${(nox + 1) * 2 + 3}`]).value = `${
              e.nilai ? e.nilai : "-"
            }`;
            row.getCell([`${(nox + 1) * 2 + 4}`]).value = `${
              e.nilai_keterampilan ? e.nilai_keterampilan : "-"
            }`;
            row.getCell([`${(nox + 1) * 2 + 3}`]).border = {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            };
            row.getCell([`${(nox + 1) * 2 + 4}`]).border = {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            };
            row.getCell([`${(nox + 1) * 2 + 5}`]).border = {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            };
            row.getCell([`${(nox + 1) * 2 + 6}`]).border = {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            };

            if (nox == d.user.nilaiSemuaUjian.length - 1) {
              row.getCell([`${(nox + 1) * 2 + 5}`]).value =
                d.user.nilaiSemuaUjian.reduce(
                  (a, b) => a + b.nilai + b.nilai_keterampilan,
                  0
                );

              const cell = row.getCell([`${(nox + 1) * 2 + 5}`]);

              // row.getCell([`${(nox + 1) * 2 + 6}`]).value = `=RANK(${colName(
              //   (nox + 1) * 2 + 4
              // )}${idx + 9};$${colName((nox + 1) * 2 + 4)}$9:$${colName(
              //   (nox + 1) * 2 + 4
              // )}$100)`;

              row.getCell([`${(nox + 1) * 2 + 6}`]).value =
                urutan.findIndex((f) => f == d.id) + 1;

              alreadyMerged = (nox + 1) * 2 + 4;
            }

            // // Add row using key mapping to columns
            // let row = worksheet.addRow ({
            //   tugas1: e ? e.nilai : "-",
            //   tugas2: e ? e.nilai : "-",
            //   tugas3: e ? e.nilai : "-",
            //   tugas4: e ? e.nilai : "-",
            //   tugas5: e ? e.nilai : "-",
            // });
          })
        );

        worksheet.addConditionalFormatting({
          ref: `A6:D8`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  bold: true,
                },
                fill: {
                  type: "pattern",
                  pattern: "solid",
                  bgColor: {
                    argb: "C0C0C0",
                    fgColor: { argb: "C0C0C0" },
                  },
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
              },
            },
          ],
        });

        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 8}:D${(idx + 1) * 1 + 8}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
              },
            },
          ],
        });
      })
    );

    worksheet.getCell(
      "A1"
    ).value = `LEGER PERNILAIAN AKHIR SEMESTER GANJIL DARING`;
    worksheet.getCell("A2").value = rombel.nama;
    worksheet.getCell("A3").value = sekolah.nama;
    worksheet.getCell("A4").value = `TAHUN PELAJARAN ${ta.tahun}`;
    // worksheet.getCell("A3").value = jadwalMengajar.toJSON().mataPelajaran.nama;

    worksheet.getCell(
      "A5"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.mergeCells(`A1:${colName(alreadyMerged + 1)}1`);
    worksheet.mergeCells(`A2:${colName(alreadyMerged + 1)}2`);
    worksheet.mergeCells(`A3:${colName(alreadyMerged + 1)}3`);
    worksheet.mergeCells(`A4:${colName(alreadyMerged + 1)}4`);
    worksheet.addConditionalFormatting({
      ref: "A1:I4",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "0000FF", fgColor: { argb: "0000FF" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
          },
        },
      ],
    });

    worksheet.mergeCells(`A6:A8`);
    worksheet.mergeCells(`B6:B8`);
    worksheet.mergeCells(`C6:C8`);
    worksheet.mergeCells(`D6:D8`);

    worksheet.mergeCells(6, 5, 6, `${alreadyMerged}`);
    worksheet.mergeCells(6, `${alreadyMerged + 1}`, 8, `${alreadyMerged + 1}`);
    worksheet.mergeCells(6, `${alreadyMerged + 2}`, 8, `${alreadyMerged + 2}`);

    worksheet.getCell(`${colName(alreadyMerged)}6`).value = `JUMLAH`;
    worksheet.getCell(`${colName(alreadyMerged + 1)}6`).value = `PERINGKAT`;

    worksheet.addConditionalFormatting({
      ref: `E6:${colName(alreadyMerged + 1)}8`,
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
            font: {
              name: "Times New Roman",
              family: 4,
              size: 11,
              // bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: {
                argb: "C0C0C0",
                fgColor: { argb: "C0C0C0" },
              },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
          },
        },
      ],
    });

    worksheet.getColumn("B").width = 14;
    worksheet.getColumn("C").width = 28;
    worksheet.getColumn(`${colName(alreadyMerged)}`).width = 12;
    worksheet.getColumn(`${colName(alreadyMerged + 1)}`).width = 16;

    worksheet.views = [
      {
        state: "frozen",
        xSplit: 4,
        ySplit: 8,
        topLeftCell: "A6",
        activeCell: "A6",
      },
    ];

    // worksheet.mergeCells(20,22,22,23);

    // worksheet.mergeCells(22,22,23,24);
    let namaFile = `/uploads/Leger-Nilai-${rombel.nama}-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async putBobotNilai({ response, request, auth, params: { bobot_id } }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    let {
      tugas_pts,
      uh_pts,
      uts_pts,
      uas_pts,
      praktik_pts,
      produk_pts,
      proyek_pts,
      portofolio_pts,

      tugas_pas,
      uh_pas,
      uts_pas,
      uas_pas,
      praktik_pas,
      produk_pas,
      proyek_pas,
      portofolio_pas,
    } = request.post();

    // const rules = {
    //     tugas:"required",
    //     uh:"required",
    //     uts:"required",
    //     uas:"required",
    //     praktik:"required",
    //     produk:"required",
    //     proyek:"required",
    //     portofolio:"required",
    // };
    // const message = {
    //   "tugas.required": "tugas harus diisi",
    //   "uh.required": "uh harus diisi",
    //   "uts.required": "uts harus diisi",
    //   "praktik.required": "praktik harus diisi",
    //   "produk.required": "produk harus diisi",
    //   "proyek.required": "proyek harus diisi",
    //   "portofolio.required": "portofolio harus diisi",
    // };
    // const validation = await validate(request.all(), rules, message);
    // if (validation.fails()) {
    //   return response.unprocessableEntity(validation.messages());
    // }

    const bobot = await MBobotNilai.query().where({ id: bobot_id }).update({
      tugas_pts,
      uh_pts,
      uts_pts,
      uas_pts,
      praktik_pts,
      produk_pts,
      proyek_pts,
      portofolio_pts,

      tugas_pas,
      uh_pas,
      uts_pas,
      uas_pas,
      praktik_pas,
      produk_pas,
      proyek_pas,
      portofolio_pas,
    });

    if (!bobot) {
      return response.notFound({
        message: messageNotFound,
      });
    }

    return response.ok({
      message: messagePutSuccess,
    });
  }

  async naikTAJam({ response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);
    const taa = await Mta.query()
      .where({ aktif: 1 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .first();

    await Mta.create({
      tahun: taa.tahun,
      semester: taa.semester,
      nama_kepsek: taa.nama_kepsek,
      nip_kepsek: taa.nip_kepsek,
      aktif: taa.aktif,
      dihapus: taa.dihapus,
      m_sekolah_id: taa.m_sekolah_id,
      semester: taa.semester,
      mapel_sinkron: 0,
      rombel_sinkron: 0,
      jadwal_sinkron: 0,
    });

    const jam = await MJamMengajar.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ m_ta_id: ta.id })
      .fetch();

    const taBaru = await Mta.query()
      .where({ aktif: 1 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .orderBy("id", "desc")
      .first();

    const all = await Promise.all(
      jam.toJSON().map(async (d) => {
        await MJamMengajar.create({
          kode_hari: d.kode_hari,
          hari: d.hari,
          jam_ke: d.jam_ke,
          jam_mulai: d.jam_mulai,
          jam_akhir: d.jam_akhir,
          istirahar: d.istirahar,
          m_sekolah_id: d.m_sekolah_id,
          m_ta_id: taBaru.id,
        });
      })
    );

    return all;
    return response.ok({
      message: messagePostSuccess,
    });
  }

  async naikTAMapel({ response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const mapel = await MMataPelajaran.query()
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ m_ta_id: ta.id })
      .fetch();

    const taBaru = await Mta.query()
      .where({ aktif: 1 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .orderBy("id", "desc")
      .first();

    const all = await Promise.all(
      mapel.toJSON().map(async (d, nox) => {
        await MMataPelajaran.create({
          nama: d.nama,
          kode: d.kode,
          kelompok: d.kelompok,
          kkm: d.kkm,
          dihapus: 0,
          m_user_id: d.m_user_id,
          m_sekolah_id: d.m_sekolah_id,
          m_ta_id: taBaru.id,
        });
      })
    );

    await Mta.query().where({ id: taBaru.id }).update({
      mapel_sinkron: 1,
    });
    return response.ok({
      message: messagePostSuccess,
    });
  }

  async naikTARombel({ response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const rombel = await MRombel.query()
      .with("anggotaRombel", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ m_ta_id: ta.id })
      .fetch();

    const taBaru = await Mta.query()
      .where({ aktif: 1 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .orderBy("id", "desc")
      .first();

    const all = await Promise.all(
      rombel.toJSON().map(async (d) => {
        const rombelBaru = await MRombel.create({
          tingkat: d.tingkat,
          nama: d.nama,
          kelompok: d.kelompok,
          dihapus: 0,
          m_user_id: d.m_user_id,
          m_jurusan_id: d.m_jurusan_id,
          m_sekolah_id: d.m_sekolah_id,
          m_ta_id: taBaru.id,
        });

        const checkKategoriMapel = await MKategoriMapel.query()
          .where({ m_rombel_id: rombelBaru.id })
          .first();

        if (!checkKategoriMapel) {
          await MKategoriMapel.create({
            nama: "Muatan Nasional",
            dihapus: 0,
            m_rombel_id: rombelBaru.id,
          });
          await MKategoriMapel.create({
            nama: "Muatan Kewilayahan",
            dihapus: 0,
            m_rombel_id: rombelBaru.id,
          });
          await MKategoriMapel.create({
            nama: "Muatan Peminatan Kejurusan",
            dihapus: 0,
            m_rombel_id: rombelBaru.id,
          });
        }

        const jamMengajar = await MJamMengajar.query()
          .select("id")
          .where({ m_sekolah_id: sekolah.id })
          .andWhere({ m_ta_id: taBaru.id })
          .fetch();

        const jadwalMengajarData = await Promise.all(
          jamMengajar.toJSON().map(async (data) => {
            data.m_mata_pelajaran_id = null;
            data.m_rombel_id = rombelBaru.id;
            data.m_jam_mengajar_id = data.id;
            data.m_sekolah_id = sekolah.id;
            data.m_ta_id = taBaru.id;
            delete data.id;
            delete data.jamFormat;

            return data;
          })
        );

        await MJadwalMengajar.createMany(jadwalMengajarData);
        const data = await Promise.all(
          d.anggotaRombel.map(async (e, nox) => {
            await MAnggotaRombel.create({
              role: e.role,
              dihapus: 0,
              m_user_id: e.m_user_id,
              m_rombel_id: rombelBaru.id,
            });
          })
        );
        // return data;
      })
    );

    await Mta.query().where({ id: taBaru.id }).update({
      rombel_sinkron: 1,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async naikTAJadwal({ response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const ta = await this.getTAAktif(sekolah);

    const rombel = await MRombel.query()
      .with("anggotaRombel", (builder) => {
        builder.where({ dihapus: 0 });
      })
      .where({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .andWhere({ m_ta_id: ta.id })
      .fetch();

    const taBaru = await Mta.query()
      .where({ aktif: 1 })
      .andWhere({ m_sekolah_id: sekolah.id })
      .andWhere({ dihapus: 0 })
      .orderBy("id", "desc")
      .first();

    // const jam = await MJamMengajar.query()
    //   .where({ m_ta_id: taBaru.id })
    //   .andWhere({ m_sekolah_id: sekolah.id })
    //   .andWhere({ istirahat: 0 })
    //   .fetch();

    const jadwal = await MJadwalMengajar.query()
      .whereNotNull("m_mata_pelajaran_id")
      .where({ m_ta_id: ta.id })
      .andWhere({ m_sekolah_id: sekolah.id })
      .fetch();

    const all = await Promise.all(
      jadwal.toJSON().map(async (d) => {
        const jam = await MJamMengajar.query()
          .where({ id: d.m_jam_mengajar_id })
          .first();

        const jamBaru = await MJamMengajar.query()
          .where({ kode_hari: jam.kode_hari })
          .andWhere({ hari: jam.hari })
          .andWhere({ jam_mulai: jam.jam_mulai })
          .andWhere({ istirahat: jam.istirahat })
          .andWhere({ m_ta_id: taBaru.id })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        const mapel = await MMataPelajaran.query()
          .where({ id: d.m_mata_pelajaran_id })
          .first();

        // return Promise.resolve(mapel.nama);

        const mapelBaru = await MMataPelajaran.query()
          .where({ nama: mapel.nama })
          .andWhere({ kode: mapel.kode })
          .andWhere({ kelompok: mapel.kelompok })
          .andWhere({ kkm: mapel.kkm })
          .andWhere({ dihapus: mapel.dihapus })
          .andWhere({ m_user_id: mapel.m_user_id })
          .andWhere({ m_ta_id: taBaru.id })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        const rombel = await MRombel.query()
          .where({ id: d.m_rombel_id })
          .first();

        const rombelBaru = await MRombel.query()
          .where({ tingkat: rombel.tingkat })
          .andWhere({ nama: rombel.nama })
          .andWhere({ kelompok: rombel.kelompok })
          .andWhere({ dihapus: rombel.dihapus })
          .andWhere({ m_user_id: rombel.m_user_id })
          .andWhere({ m_jurusan_id: rombel.m_jurusan_id })
          .andWhere({ m_ta_id: taBaru.id })
          .andWhere({ m_sekolah_id: sekolah.id })
          .first();

        const jadwalBaruNih = await MJadwalMengajar.query()
          .where({ m_rombel_id: rombelBaru.id })
          .andWhere({ m_ta_id: taBaru.id })
          .andWhere({ m_jam_mengajar_id: jamBaru.id })
          .andWhere({ m_sekolah_id: sekolah.id })
          .update({
            m_mata_pelajaran_id: mapelBaru.id,
            diubah: 1,
          });

        const mataPelajaran = await MMataPelajaran.query()
          .where({ id: mapelBaru.id })
          .first();

        if (mataPelajaran.kelompok == "C") {
          const check = await MMateri.query()
            .where({ m_mata_pelajaran_id: mapelBaru.id })
            .andWhere({ tingkat: rombelBaru.tingkat })
            .andWhere({ m_jurusan_id: rombelBaru.m_jurusan_id })
            .first();

          if (!check) {
            const materi = await MMateri.create({
              tingkat: rombelBaru.tingkat,
              m_jurusan_id: rombelBaru.m_jurusan_id,
              m_mata_pelajaran_id: mapelBaru.id,
            });

            await TkMateriRombel.create({
              m_materi_id: materi.id,
              m_rombel_id: rombelBaru.id,
            });
          } else {
            const checkTk = await TkMateriRombel.query()
              .where({ m_materi_id: check.id })
              .andWhere({ m_rombel_id: rombelBaru.id })
              .first();
            await TkMateriRombel.create({
              m_materi_id: check.id,
              m_rombel_id: rombelBaru.id,
            });
          }
        } else {
          const check = await MMateri.query()
            .where({ m_mata_pelajaran_id: mapelBaru.id })
            .andWhere({ tingkat: rombelBaru.tingkat })
            .first();

          if (!check) {
            const materi = await MMateri.create({
              tingkat: rombelBaru.tingkat,
              m_mata_pelajaran_id: mapelBaru.id,
            });

            await TkMateriRombel.create({
              m_materi_id: materi.id,
              m_rombel_id: rombelBaru.id,
            });
          } else {
            const checkTk = await TkMateriRombel.query()
              .where({ m_materi_id: check.id })
              .andWhere({ m_rombel_id: rombelBaru.id })
              .first();
            if (!checkTk) {
              await TkMateriRombel.create({
                m_materi_id: check.id,
                m_rombel_id: rombelBaru.id,
              });
            }
          }
        }

        // await MJadwalMengajar.create({});

        // return data;
      })
    );

    await Mta.query().where({ id: taBaru.id }).update({
      jadwal_sinkron: 1,
    });
    await Mta.query().where({ id: ta.id }).update({
      aktif: 0,
    });

    return response.ok({
      message: messagePostSuccess,
    });
  }

  async getAbsensiAnak({ auth, response, request }) {
    const { whatsapp } = request.post();

    const user = await User.query()
      .where({ whatsapp: whatsapp })
      .where({ dihapus: 0 })
      .with("sekolah")
      .first();

    if (!user) {
      return response.notFound({
        message: `Periksa kembali nomor yang anda masukan`,
      });
    }

    const tanggal = moment().format("YYYY-MM-DD");

    const absen = await MAbsen.query()
      .where({ m_user_id: user.id })
      .whereBetween("created_at", [
        `${tanggal} 00:00:00`,
        `${tanggal} 23:59:59`,
      ])
      .first();

    if (!absen) {
      return `${user.nama} belum absen masuk sekolah hari ini`;
    }

    if (absen.absen == "hadir") {
      if (!absen.waktu_pulang) {
        return `${user.nama} ${absen.absen} masuk pada ${moment(
          absen.created_at
        ).format("HH:mm")} dan belum absen pulang`;
      } else {
        return `${user.nama} ${absen.absen} masuk pada ${moment(
          absen.created_at
        ).format("HH:mm")} dan pulang pada ${absen.waktu_pulang}`;
      }
    } else if (absen.absen == "izin") {
      return `${user.nama} ${absen.absen} dengan keterangan ${absen.keterangan} dan lampiran ${absen.lampiran}`;
    } else if (absen.absen == "sakit") {
      return `${user.nama} ${absen.absen} dengan keterangan ${absen.keterangan} dan lampiran ${absen.lampiran}`;
    }
  }

  async getTugasAnak({ auth, response, request }) {
    const { whatsapp } = request.post();

    const userIds = await User.query()
      .where({ whatsapp: whatsapp })
      .where({ dihapus: 0 })
      .ids();

    if (!userIds.length) {
      return response.notFound({
        message: `Periksa kembali nomor yang anda masukan`,
      });
    }
    const timelineData = await TkTimeline.query()
      .with("timeline", (builder) => {
        builder
          .with("tugas")
          // .with("rombel")
          .with("user", (builder) => builder.select("id", "nama"))
          .with("mataPelajaran", (builder) => {
            builder.select("id", "m_user_id", "nama");
          });
      })
      .with("user", (builder) => builder.select("id", "nama"))
      .where({ tipe: "tugas" })
      .where({ dikumpulkan: 0 })
      .whereIn("m_user_id", userIds)
      .andWhere({ dihapus: 0 })
      .orderBy("created_at", "desc")
      .fetch();

    const timeline = timelineData
      .toJSON()
      .filter((d) => {
        if (
          moment(
            moment(d.timeline.tugas.tanggal_pembagian)
              .add(7, "hours")
              .format("YYYY-MM-DD ") + d.timeline.tugas.waktu_pembagian
          ) <= moment() ||
          d.timeline.tugas.waktu_pembagian == null
        ) {
          return true;
        } else {
          return false;
        }
      })
      .map((d) => {
        return `- ${d.timeline.tugas.judul}, oleh Guru ${d.timeline.user.nama}`;
      });

    return response.ok({
      tugas: timeline,
    });
  }

  async getUjianAnak({ auth, response, request }) {
    const { whatsapp } = request.post();

    const hari_ini = moment().format("YYYY-MM-DD HH:mm");

    const user = await User.query()
      .where({ whatsapp: whatsapp })
      .where({ dihapus: 0 })
      .first();

    if (!user) {
      return response.notFound({
        message: `Periksa kembali nomor yang anda masukan`,
      });
    }

    const guruIds = await User.query()
      .where({ m_sekolah_id: user.m_sekolah_id })
      .where({ dihapus: 0 })
      .whereNot({ role: "siswa" })
      .ids();
    const ta = await Mta.query()
      .where({ m_sekolah_id: user.m_sekolah_id })
      .where({ aktif: 1 })
      .where({ dihapus: 0 })
      .first();
    if (!ta) {
      return "Tahun AJaran sekolah belum terdaftar";
    }

    const rombelIds = await MRombel.query()
      .where({ m_ta_id: ta.id })
      .andWhere({ dihapus: 0 })
      .ids();

    const anggotaRombel = await MAnggotaRombel.query()
      .where({ m_user_id: user.id })
      .andWhere({ dihapus: 0 })
      .whereIn("m_rombel_id", rombelIds)
      .pluck("m_rombel_id");

    const jadwalIds = await MJadwalUjian.query()
      .where({ dihapus: 0 })
      .andWhere("waktu_ditutup", ">=", hari_ini)
      .whereIn("m_user_id", guruIds)
      .ids();

    const jadwalUjian = await TkJadwalUjian.query()
      .with("jadwalUjian", (builder) => {
        builder.with("ujian");
      })
      .where({ dihapus: 0 })
      .whereIn("m_rombel_id", anggotaRombel)
      .whereIn("m_jadwal_ujian_id", jadwalIds)
      .fetch();
    const ujian = jadwalUjian
      .toJSON()
      .filter((d) => d.jadwalUjian !== null && d.jadwalUjian.ujian)
      .map((d) => `• ${d.jadwalUjian.ujian.nama}`);

    return response.ok({
      jadwalUjian: ujian,
    });
  }

  async updateNilaiJadwalUjian({ response, request }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { tk_jadwal_ujian_id, m_jadwal_ujian_id } = request.post();

    const jadwalUjian = await TkJadwalUjian.query()
      .with("peserta", (builder) => {
        builder.with("user"),
          (builder) => {
            builder.select("id", "nama");
          };
      })
      .with("rombel")
      .with("jadwalUjian", (builder) => {
        builder.with("ujian");
      })
      .where({ id: tk_jadwal_ujian_id })
      .first();

    const tkJadwalUjian = await TkJadwalUjian.query()
      .where({ id: tk_jadwal_ujian_id })
      .pluck("m_rombel_id");

    const anggotaRombel = await MAnggotaRombel.query()
      .where({ m_rombel_id: tkJadwalUjian[0] })
      .andWhere({ dihapus: 0 })
      .pluck("m_user_id");

    const pesertaUjianData = await User.query()
      .whereIn("id", anggotaRombel)
      .fetch();

    await Promise.all(
      [0].map(async (_, idx) => {
        // Create workbook & add worksheet

        await Promise.all(
          pesertaUjianData
            .toJSON()
            .sort((a, b) => ("" + a.nama).localeCompare(b.nama))
            .map(async (d) => {
              await Promise.all(
                jadwalUjian
                  .toJSON()
                  .peserta.sort((a, b) =>
                    ("" + a.user.nama).localeCompare(b.user.nama)
                  )
                  .map(async (e) => {
                    if (d.id == e.m_user_id) {
                      const pesertaUjian = await TkPesertaUjian.query()
                        .with("jawabanSiswa", (builder) => {
                          builder.with("soal");
                        })
                        .with("user")
                        .where({ id: e.id })
                        .first();

                      let metaHasil = {
                        nilaiPg: 0,
                        nilaiEsai: 0,
                        nilaiTotal: 0,
                        benar: 0,
                      };
                      let analisisBenar = {};
                      let analisisTotal = {};

                      await Promise.all(
                        pesertaUjian.toJSON().jawabanSiswa.map(async (d) => {
                          if (d.soal.bentuk == "pg") {
                            if (d.jawaban_pg == d.soal.kj_pg) {
                              metaHasil.nilaiPg =
                                metaHasil.nilaiPg + d.soal.nilai_soal;
                              metaHasil.benar = metaHasil.benar + 1;
                              analisisBenar[d.soal.kd] = analisisBenar[
                                d.soal.kd
                              ]
                                ? analisisBenar[d.soal.kd] + 1
                                : 1;
                            }
                            analisisTotal[d.soal.kd] = analisisTotal[d.soal.kd]
                              ? analisisTotal[d.soal.kd] + 1
                              : 1;
                          } else if (d.soal.bentuk == "esai") {
                            if (JSON.parse(d.jawaban_rubrik_esai)) {
                              if (JSON.parse(d.jawaban_rubrik_esai).length) {
                                JSON.parse(d.jawaban_rubrik_esai).map((e) => {
                                  if (e.benar) {
                                    metaHasil.nilaiEsai =
                                      metaHasil.nilaiEsai + e.poin;
                                  }
                                });

                                if (
                                  d.jawaban_rubrik_esai.indexOf("true") != -1
                                ) {
                                  metaHasil.benar = metaHasil.benar + 1;
                                }
                              }
                            }
                          }
                        })
                      );

                      metaHasil.nilaiTotal =
                        metaHasil.nilaiPg + metaHasil.nilaiEsai;

                      await TkPesertaUjian.query().where({ id: e.id }).update({
                        nilai_pg: metaHasil.nilaiPg,
                        nilai_esai: metaHasil.nilaiEsai,
                        nilai: metaHasil.nilaiTotal,
                      });
                    }
                  })
              );
            })
        );
      })
    );
  }

  async downloadAnalisisMateri({
    response,
    request,
    auth,
    params: { topik_id },
  }) {
    const user1 = await auth.getUser();

    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const { analisis, m_jadwal_mengajar_id } = request.get();

    if (analisis) {
      const jadwalMengajar = await MJadwalMengajar.query()
        .where({ id: m_jadwal_mengajar_id })
        .first();

      const rombel = await MRombel.query()
        .select("id", "nama")
        .where({ id: jadwalMengajar.m_rombel_id })
        .first();

      const mapel = await MMataPelajaran.query()
        .select("id", "nama")
        .where({ id: jadwalMengajar.m_mata_pelajaran_id })
        .first();

      const userIds = await MAnggotaRombel.query()
        .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
        .andWhere({ dihapus: 0 })
        .pluck("m_user_id");

      const jumlahSiswa = await MAnggotaRombel.query()
        .where({ m_rombel_id: jadwalMengajar.m_rombel_id })
        .andWhere({ dihapus: 0 })
        .count("* as total");

      const user = await User.query()
        .select("id", "nama")
        .with("kesimpulan", (builder) => {
          builder.where({ m_topik_id: topik_id });
        })
        .whereIn("id", userIds)
        .fetch();

      const topik = await MTopik.query()
        .with("bab")
        .withCount("materiKesimpulan as sudahBaca", (builder) => {
          builder.whereIn("m_user_id", userIds).whereNotNull("kesimpulan");
        })
        .where({ id: topik_id })
        .first();

      // return jumlahSiswa;

      const keluarantanggalseconds =
        moment().format("YYYY-MM-DD ") + new Date().getTime();

      let workbook = new Excel.Workbook();
      let worksheet = workbook.addWorksheet(`Analisis Materi`);
      worksheet.mergeCells("A1:F1");
      worksheet.mergeCells("A2:F2");
      worksheet.mergeCells("A3:F3");
      worksheet.mergeCells("A4:F4");
      worksheet.mergeCells("A5:F5");
      worksheet.getCell("A1").value = `${mapel.nama}`;
      worksheet.getCell("A2").value = `Analisis Materi ${topik.judul}`;
      worksheet.getCell("A3").value = `Bab ${topik.toJSON().bab.judul}`;
      worksheet.getCell("A4").value = rombel.nama;
      worksheet.getCell("A5").value = sekolah.nama;
      worksheet.getCell(
        "A8"
      ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user1.nama}`;

      worksheet.addConditionalFormatting({
        ref: "A1:F5",
        rules: [
          {
            type: "expression",
            formulae: ["MOD(ROW()+COLUMN(),1)=0"],
            style: {
              font: {
                name: "Times New Roman",
                family: 4,
                size: 16,
                bold: true,
              },
              // fill: {
              //   type: "pattern",
              //   pattern: "solid",
              //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
              // },
              alignment: {
                vertical: "middle",
                horizontal: "center",
              },
              // border: {
              //   top: { style: "thin" },
              //   left: { style: "thin" },
              //   bottom: { style: "thin" },
              //   right: { style: "thin" },
              // },
            },
          },
        ],
      });
      worksheet.getCell("B6").value = `Sudah Baca`;
      worksheet.getCell("C6").value = `Belum Baca`;
      worksheet.getCell("B7").value = topik.toJSON().__meta__.sudahBaca;
      worksheet.getCell("C7").value =
        jumlahSiswa[0].total - topik.toJSON().__meta__.sudahBaca;

      worksheet.addConditionalFormatting({
        ref: "B6:C7",
        rules: [
          {
            type: "expression",
            formulae: ["MOD(ROW()+COLUMN(),1)=0"],
            style: {
              font: {
                name: "Times New Roman",
                family: 4,
                size: 12,
                bold: true,
              },
              fill: {
                type: "pattern",
                pattern: "solid",
                bgColor: { argb: "D9EEFF", fgColor: { argb: "D9EEFF" } },
              },
              alignment: {
                vertical: "middle",
                horizontal: "center",
              },
              border: {
                top: { style: "thin" },
                left: { style: "thin" },
                bottom: { style: "thin" },
                right: { style: "thin" },
              },
            },
          },
        ],
      });
      worksheet.addConditionalFormatting({
        ref: "A9:F9",
        rules: [
          {
            type: "expression",
            formulae: ["MOD(ROW()+COLUMN(),1)=0"],
            style: {
              font: {
                name: "Times New Roman",
                family: 4,
                size: 12,
                bold: true,
              },
              fill: {
                type: "pattern",
                pattern: "solid",
                bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
              },
              alignment: {
                vertical: "middle",
                horizontal: "center",
              },
              border: {
                top: { style: "thin" },
                left: { style: "thin" },
                bottom: { style: "thin" },
                right: { style: "thin" },
              },
            },
          },
        ],
      });
      const result = await Promise.all(
        user.toJSON().map(async (d, idx) => {
          worksheet.addConditionalFormatting({
            ref: `B${(idx + 1) * 1 + 9}:F${(idx + 1) * 1 + 9}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "left",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          worksheet.addConditionalFormatting({
            ref: `A${(idx + 1) * 1 + 9}`,
            rules: [
              {
                type: "expression",
                formulae: ["MOD(ROW()+COLUMN(),1)=0"],
                style: {
                  font: {
                    name: "Times New Roman",
                    family: 4,
                    size: 11,
                    // bold: true,
                  },
                  alignment: {
                    vertical: "middle",
                    horizontal: "center",
                  },
                  border: {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                  },
                },
              },
            ],
          });
          // add column headers
          worksheet.getRow(9).values = [
            "No",
            "Nama",
            "Waktu Mulai",
            "Waktu Akhir",
            "Durasi",
            "Kesimpulan",
          ];
          worksheet.columns = [
            { key: "no" },
            { key: "nama" },
            { key: "waktu_mulai" },
            { key: "waktu_akhir" },
            { key: "durasi" },
            { key: "kesimpulan" },
          ];
          // return d.kesimpulan;
          // Add row using key mapping to columns
          let row = worksheet.addRow({
            no: `${idx + 1}`,
            nama: d ? d.nama : "-",
            waktu_mulai: d.kesimpulan[0] ? d.kesimpulan[0].waktu_mulai : "-",
            waktu_akhir: d.kesimpulan[0] ? d.kesimpulan[0].waktu_selesai : "-",
            durasi: d.kesimpulan[0] ? d.kesimpulan[0].durasi : "-",
            kesimpulan: d.kesimpulan[0] ? d.kesimpulan[0].kesimpulan : "-",
          });
        })
      );

      worksheet.getColumn("A").width = 6;
      worksheet.getColumn("B").width = 25;
      worksheet.getColumn("C").width = 17;
      worksheet.getColumn("D").width = 17;
      worksheet.getColumn("E").width = 9;
      worksheet.getColumn("F").width = 18;

      let namaFile = `/uploads/Rekap-Analisis-Materi-${keluarantanggalseconds}.xlsx`;
      // save workbook to disk
      await workbook.xlsx.writeFile(`public${namaFile}`);
      // return result;
      return namaFile;
    }
  }

  async downloadRekening({ response, request, auth }) {
    const domain = request.headers().origin;

    const sekolah = await this.getSekolahByDomain(domain);

    if (sekolah == "404") {
      return response.notFound({ message: "Sekolah belum terdaftar" });
    }

    const user = await auth.getUser();

    const keluarantanggalseconds =
      moment().format("YYYY-MM-DD ") + new Date().getTime();

    const rekening = await MRekSekolah.query().where({ dihapus: 0 }).fetch();

    let workbook = new Excel.Workbook();
    let worksheet = workbook.addWorksheet(`Daftar Rekening`);

    worksheet.addConditionalFormatting({
      ref: "A1:I2",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 16,
              bold: true,
            },
            // fill: {
            //   type: "pattern",
            //   pattern: "solid",
            //   bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            // },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            // border: {
            //   top: { style: "thin" },
            //   left: { style: "thin" },
            //   bottom: { style: "thin" },
            //   right: { style: "thin" },
            // },
          },
        },
      ],
    });
    worksheet.addConditionalFormatting({
      ref: "A4:I4",
      rules: [
        {
          type: "expression",
          formulae: ["MOD(ROW()+COLUMN(),1)=0"],
          style: {
            font: {
              name: "Times New Roman",
              family: 4,
              size: 12,
              bold: true,
            },
            fill: {
              type: "pattern",
              pattern: "solid",
              bgColor: { argb: "C0C0C0", fgColor: { argb: "C0C0C0" } },
            },
            alignment: {
              vertical: "middle",
              horizontal: "center",
            },
            border: {
              top: { style: "thin" },
              left: { style: "thin" },
              bottom: { style: "thin" },
              right: { style: "thin" },
            },
          },
        },
      ],
    });
    await Promise.all(
      rekening.toJSON().map(async (d, idx) => {
        worksheet.addConditionalFormatting({
          ref: `B${(idx + 1) * 1 + 4}:I${(idx + 1) * 1 + 4}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "left",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        worksheet.addConditionalFormatting({
          ref: `A${(idx + 1) * 1 + 4}`,
          rules: [
            {
              type: "expression",
              formulae: ["MOD(ROW()+COLUMN(),1)=0"],
              style: {
                font: {
                  name: "Times New Roman",
                  family: 4,
                  size: 11,
                  // bold: true,
                },
                alignment: {
                  vertical: "middle",
                  horizontal: "center",
                },
                border: {
                  top: { style: "thin" },
                  left: { style: "thin" },
                  bottom: { style: "thin" },
                  right: { style: "thin" },
                },
              },
            },
          ],
        });
        // add column headers
        worksheet.getRow(4).values = [
          "No",
          "Jenis",
          "Nama Bank",
          "No Rekening",
          "Nama Pemilik",
          "Saldo",
          "Pemasukan",
          "Pengeluaran",
          "Total",
        ];

        worksheet.columns = [
          { key: "no" },
          { key: "jenis" },
          { key: "bank" },
          { key: "norek" },
          { key: "pemilik" },
          { key: "saldo" },
          { key: "pemasukan" },
          { key: "pengeluaran" },
          { key: "total" },
        ];

        // Add row using key mapping to columns
        let row = worksheet.addRow({
          no: `${idx + 1}`,
          jenis: d ? d.jenis : "-",
          bank: d ? d.bank : "-",
          norek: d ? d.norek : "-",
          pemilik: d ? d.pemilik : "-",
          saldo: d ? d.saldo : "-",
          pemasukan: d ? d.pemasukan : "-",
          pengeluaran: d ? d.pengeluaran : "-",
          total: d
            ? d.pemasukan
            : "0" - d
            ? d.pengeluaran
            : "0" + d
            ? d.saldo
            : "0",
        });
      })
    );
    worksheet.getCell("A1").value = "Rekap Rekening";
    worksheet.getCell("A2").value = sekolah.nama;
    worksheet.mergeCells("A1:I1");
    worksheet.mergeCells("A2:I2");
    worksheet.getCell(
      "A3"
    ).value = `Diunduh tanggal ${keluarantanggalseconds} oleh ${user.nama}`;
    worksheet.getColumn("A").width = 6;
    worksheet.getColumn("B").width = 18;
    worksheet.getColumn("C").width = 14;
    worksheet.getColumn("D").width = 15;
    worksheet.getColumn("E").width = 15;
    worksheet.getColumn("F").width = 9;
    worksheet.getColumn("G").width = 13;
    worksheet.getColumn("H").width = 13;
    worksheet.getColumn("I").width = 9;

    let namaFile = `/uploads/rekap-Rekening-${keluarantanggalseconds}.xlsx`;

    // save workbook to disk
    await workbook.xlsx.writeFile(`public${namaFile}`);

    return namaFile;
  }

  async hackUjianSiswaNilai({ response, request }) {
    const { offset, limit } = request.post();

    const semuaUser = await User.query()
      .select("id", "nama")
      .where({ dihapus: 0 })
      // .andWhere({ m_sekolah_id: 33 })
      .andWhere({ role: "siswa" })
      .andWhere({ m_sekolah_id: 33 })
      // .offset(parseInt(offset))
      // .limit(limit)
      .ids();

    const ujian = await MUjianSiswa.quey()
      .whereIn("m_user_id", semuaUser)
      .fetch();

    // return semuaUser;

    const semua = await Promise.all(ujian.toJSON().map(async (ss) => {}));

    return semua;
  }

  async ip({ response, request }) {
    return response.ok({ ip: [request.ip(), request.ips()] });
  }

  async notFoundPage({ response, request, auth }) {
    return `<p>Data tidak ditemukan, silahkan kembali ke <a href="http://getsmartschool.id">Smart School</a></p>`;
  }
}
module.exports = MainController;
